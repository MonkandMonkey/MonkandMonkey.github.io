<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[#4.排列与组合]]></title>
      <url>/2017/06/21/4-%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<hr>
<p>排列组合是高中数学里我们学过的知识，不过那时候我们计算的是满足某一条件的排列组合的总数，也就是说，我们求的是一个数值。而今天的问题是：通过完成一个程序，列出某个排列组合的所有可能情况。</p>
<p><strong>问题：</strong></p>
<ol>
<li>如何生成$n$个数中选择$k$个数的所有组合$C_n^k$ ?</li>
<li>如何生成$n$个数中选择$k$个数的所有排列$A_n^k$ ?</li>
<li>如何生成由$n$个数字组成的所有$k$位数 ?</li>
</ol>
<hr>
<p>问题1：<br>
组合$C_n^k$，数字的顺序无关，即：相同的数字以不同的顺序出现会被视为一种情况。我们在列举每一种情况时，可以逐位列举。e.g.<br>
列出$C_5^3$的所有可能，我们可以这样做:<br>
从数组 <strong>[1,2,3,4,5]</strong> 中每次挑选出 <strong>3</strong> 个不同的数字来，且不关注这些数字的顺序。</p>
<p>——  ——  ——<br>
[1]　[2]　[3]</p>
<p>1). 位置[1]上可以选择：1,2,3,4,5，但是我们仔细想想就会发现：对于组合问题，为了不重复统计，我们通常让数字按照从小到大的顺序排列，即我们通常使用：3,4,5 而非5,4,3。所以如果5个里取3个的话位置[1]上最大就是3，因为还要留两个数填在位置[2],和位置[3]上。<br>
2). 假设我们在位置[1]上填了2,接着我们来填位置[2],此时，我们发现，剩下的能够供我们选择的数字变成了[3,4,5]，因为默认按照从小到大排列。在填位置[2]时，我们的方法和填位置[1]是一样的，唯一的不同是可供选择的数少了一些。这里可以用递归进行处理。<br>
3). 我们用同样的方法也填出了位置[3]上的数据。现在我们可以输出当前组合，eg.2,3,5。<br>
4). 接下来需要找到下一种组合：在填位置</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[月光与晚霞]]></title>
      <url>/2017/06/09/%E6%9C%88%E5%85%89%E4%B8%8E%E6%99%9A%E9%9C%9E/</url>
      <content type="html"><![CDATA[<p><img src="/images/photo/moon.jpg" alt="夜空中纯粹的月亮"><br>
&lt;p align = &quot;center&quot;&gt;夜空中纯粹的月亮&lt;/p&gt;
<img src="/images/photo/cloud1.jpg" alt="风卷残云"><br>
&lt;p align = &quot;center&quot;&gt;风卷残云&lt;/p&gt;
<img src="/images/photo/cloud2.jpg" alt="残云"><br>
&lt;p align = &quot;center&quot;&gt;残云&lt;/p&gt;
<img src="/images/photo/cloud3.jpg" alt="残云"><br>
&lt;p align = &quot;center&quot;&gt;残云&lt;/p&gt;
<img src="/images/photo/lake.jpg" alt="黄昏之湖"><br>
&lt;p align = &quot;center&quot;&gt;黄昏之湖&lt;/p&gt;
<img src="/images/photo/wanxia.jpg" alt="晚霞"><br>
&lt;p align = &quot;center&quot;&gt;晚霞&lt;/p&gt;</p>
]]></content>
      
        
        <tags>
            
            <tag> living </tag>
            
            <tag> photo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#3.二叉查找树]]></title>
      <url>/2017/06/09/3-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>给定一个（无序）数组，创建一棵基本的二叉查找树。</p>
<hr>
<p><strong>考虑：</strong></p>
<p>1 . 什么是<em>二叉查找树</em><br>
2 . 空数组</p>
<hr>
<p><strong>知识点：</strong></p>
<p>1 . <strong>二叉查找树：</strong>  在数值上： 左孩子&lt;根&lt;右孩子。<br>
2 . <strong>中序遍历：</strong> 先访问左子树，再访问根节点，最后访问右子树。对于每棵子树，也采用此顺序访问。中序遍历一棵二叉查找树，就能得到一个<em>非递减</em>的数列。</p>
<hr>
<p><strong>思路：</strong><br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add node to a binary tree with root</span></div><div class="line">add_node(root)&#123;</div><div class="line"><span class="keyword">for</span> each element in ary:   </div><div class="line">    <span class="keyword">if</span> root is null:</div><div class="line">        make it the root node</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> ele's val &gt; root:</div><div class="line">            add_node(root-&gt;right)</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ele's val &lt; root:</div><div class="line">            add_node(root-&gt;left)</div><div class="line">        <span class="keyword">else</span>: <span class="comment">// not create a new node</span></div><div class="line">            root's num ++</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>代码：</strong><br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: Construct a binary seach tree</div><div class="line">* Idea: left &lt; root &lt; right, mid order traverse.</div><div class="line">* Time: O(nlogn)</div><div class="line">* Space:O(n)</div><div class="line">* Mistakes: The tree's root is nullptr, so the output is null.</div><div class="line">* 2017-06-06</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> value;  <span class="comment">// node value</span></div><div class="line">    <span class="keyword">int</span> num;    <span class="comment">// num of nodes with the same value</span></div><div class="line">    BinaryTreeNode *right;</div><div class="line">    BinaryTreeNode *left;</div><div class="line">&#125;BTNode;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ancestor</span>&#123;</span></div><div class="line">    BTNode *node;</div><div class="line">    BTNode *parent;</div><div class="line">    <span class="keyword">bool</span> is_left_child;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Ancestor *des_node = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="comment">// add a node to binary tree</span></div><div class="line"><span class="function">BTNode* <span class="title">add_node</span><span class="params">(BTNode *root, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    BTNode *ptr = root;</div><div class="line">    <span class="keyword">if</span>(!ptr)&#123; <span class="comment">// ptr is null</span></div><div class="line">        ptr = <span class="keyword">new</span> BTNode;</div><div class="line">        ptr-&gt;value = val;</div><div class="line">        ptr-&gt;num = <span class="number">1</span>;</div><div class="line">        ptr-&gt;left = ptr-&gt;right = <span class="literal">nullptr</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(val &gt; ptr-&gt;value)&#123;</div><div class="line">            ptr-&gt;right = add_node(ptr-&gt;right, val);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val &lt; ptr-&gt;value)&#123;</div><div class="line">            ptr-&gt;left = add_node(ptr-&gt;left, val);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            ptr-&gt;num += <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// build a binary tree</span></div><div class="line"><span class="function">BTNode* <span class="title">build_binary_tree</span><span class="params">(<span class="keyword">int</span>* ary, <span class="keyword">int</span> node_num)</span></span>&#123;</div><div class="line">    BTNode *root = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">if</span>(node_num&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line">    root = add_node(root, ary[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;node_num; i++)&#123;</div><div class="line">        add_node(root, ary[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print binary tree</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_binary_tree</span><span class="params">(BTNode *root)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    BTNode* ptr = root;</div><div class="line">    <span class="keyword">if</span>(ptr-&gt;left)&#123;</div><div class="line">        output_binary_tree(ptr-&gt;left);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ptr-&gt;value&lt;&lt;<span class="string">":"</span>&lt;&lt;ptr-&gt;num&lt;&lt;<span class="string">"  "</span>;</div><div class="line">    <span class="keyword">if</span>(ptr-&gt;right)&#123;</div><div class="line">        output_binary_tree(ptr-&gt;right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// main func</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ary[] = &#123;<span class="number">90</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">-100</span>,<span class="number">20</span>, <span class="number">23</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">22</span>,<span class="number">78</span>, <span class="number">-1</span>,<span class="number">88</span>,<span class="number">27</span>,<span class="number">9</span>,<span class="number">8</span>, <span class="number">90</span>,<span class="number">90</span>,<span class="number">33</span>,<span class="number">10</span>,<span class="number">24</span>, <span class="number">67</span>,<span class="number">54</span>,<span class="number">24</span>,<span class="number">89</span>,<span class="number">120</span>, <span class="number">44</span>,<span class="number">55</span>,<span class="number">34</span>,<span class="number">100</span>,<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">int</span> node_num = <span class="keyword">sizeof</span>(ary)/<span class="keyword">sizeof</span>(ary[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Node num:"</span>&lt;&lt;node_num&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// build tree</span></div><div class="line">    BTNode *root = build_binary_tree(ary, node_num);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\nThe Binary Tree is:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    output_binary_tree(root);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
            <tag> BTree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#2.链表的倒数第k个节点]]></title>
      <url>/2017/06/06/2-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>找到一个单向链表的倒数第k个节点。</p>
<hr>
<p><strong>考虑：</strong></p>
<p>1 . 空链表<br>
2 . k的输入是否合法</p>
<hr>
<p><strong>知识点：</strong></p>
<p>1 . **创建链表：**可以拆解为不断在当前链表后追加一个节点的操作。<br>
链表尾节点：NODE *ptr;<br>
创建1个节点：NODE *new_node = new NODE; new_node-&gt;data = val;<br>
把该节点接到尾节点之后：ptr-&gt;next = new_node;<br>
2 . **倒数第k个节点：**由于是单向链表，所以没办法倒着遍历。<br>
策略1：第一轮遍历所有节点，得出链表长度n；第二轮向前走n-k+1步，到达倒数第k个节点。（共走了: n+n-k+1步）<br>
策略2：可以采用以前一后相隔（k-1）个节点的两个指针，同时向前推进，当走在前面的指针到达链表尾部时，后面的指针刚好到达倒数第k个节点。（两个指针也共走了:n+n-k+1步）<br>
两种策略需要访问的节点数量是一样的，但是为什么第二种策略看起来更聪明呢？<br>
因为策略1是顺序执行的，先走n步，然后再走n-k+1步。O(2n)<br>
策略二可以并行执行：先走k-1步，然后两个指针再一起走n-k+1步。O(n)</p>
<hr>
<p><strong>代码：</strong><br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: 打印链表的倒数第k个节点</div><div class="line">* Idea: 考虑各种情况：空链表，k不合法，创建链表，释放链表。</div><div class="line">* Time: O(n)</div><div class="line">* Space:O(n)</div><div class="line">* Mistakes: 创建链表，指针应当先判断为空。ptr=nullptr时，访问ptr-&gt;next会报错。</div><div class="line">* 2017-06-04</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></div><div class="line">&#125;NODE;</div><div class="line"></div><div class="line"><span class="comment">// add a node after the pre_ptr</span></div><div class="line"><span class="function">NODE* <span class="title">add_node</span><span class="params">(NODE* pre_ptr, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    NODE* nd = <span class="keyword">new</span> NODE;</div><div class="line">    nd-&gt;n = data;</div><div class="line">    nd-&gt;next = <span class="literal">nullptr</span>;</div><div class="line">    pre_ptr-&gt;next = nd;</div><div class="line">    <span class="keyword">return</span> nd;</div><div class="line">&#125;</div><div class="line"><span class="comment">// create a link list</span></div><div class="line"><span class="function">NODE* <span class="title">create_linklist</span><span class="params">(NODE*head, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">    NODE *ptr;</div><div class="line">    ptr = <span class="keyword">new</span> NODE;</div><div class="line">    head = ptr;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=length; i++)&#123;</div><div class="line">        ptr = add_node(ptr, i);</div><div class="line">    &#125;</div><div class="line">    ptr-&gt;next = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div><div class="line"><span class="comment">// release the link list</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">release_linklist</span><span class="params">(NODE*head)</span></span>&#123;</div><div class="line">    NODE *ptr=head, *q;</div><div class="line">    <span class="keyword">while</span>(ptr!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        q = ptr;</div><div class="line">        <span class="keyword">delete</span> ptr;</div><div class="line">        ptr = q-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// output the link list</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_linklist</span><span class="params">(NODE* head)</span></span>&#123;</div><div class="line">    NODE* ptr = head-&gt;next;</div><div class="line">    <span class="keyword">while</span>(ptr != <span class="literal">nullptr</span>)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ptr-&gt;n&lt;&lt;<span class="string">'\t'</span>;</div><div class="line">        ptr = ptr-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// output the</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">back_k_node</span><span class="params">(NODE* head, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="comment">// null</span></div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Link list is null!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="comment">// k &lt; 1</span></div><div class="line">    <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"k should be greater than 0!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line"></div><div class="line">    NODE *ptr1, *ptr2;</div><div class="line">    ptr1 = ptr2 = head-&gt;next;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="comment">// k &gt; num</span></div><div class="line">        <span class="keyword">if</span>(ptr1 == <span class="literal">nullptr</span>) &#123;<span class="keyword">break</span>;&#125;</div><div class="line">        ptr1 = ptr1-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ptr1 == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" is larger than the linklist size!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">while</span>(ptr1-&gt;next != <span class="literal">nullptr</span>)&#123;</div><div class="line">        ptr1 = ptr1-&gt;next;</div><div class="line">        ptr2 = ptr2-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">"th ele is: "</span>&lt;&lt;ptr2-&gt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main func</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    NODE* head = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">19</span>;</div><div class="line">    <span class="keyword">int</span> test_units[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-20</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">100</span>&#125;;</div><div class="line">    head = create_linklist(head, num);</div><div class="line">    print_linklist(head);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        back_k_node(head, test_units[i]);</div><div class="line">    release_linklist(head);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#1.字符串转整数]]></title>
      <url>/2017/05/31/1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>把一个字符串转变成整数： eg. &quot;19088&quot; -&gt; 19088, &quot;-123&quot; -&gt; -123</p>
<hr>
<p><strong>考虑：</strong></p>
<ol start="0">
<li>空指针</li>
<li>符号的正负</li>
<li>是包含非法字符：-, 0~9之外的。</li>
<li>结果是否溢出</li>
</ol>
<hr>
<p><strong>知识点：</strong></p>
<ol start="0">
<li>
<p>字符串指针：<br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* strs[<span class="number">10</span>] = &#123;<span class="string">"aaa"</span>, <span class="string">"bb"</span>, <span class="literal">nullptr</span>, ..., <span class="string">"123"</span>&#125;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>字符串指针操作:
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>* s; </div><div class="line">s++; <span class="comment">// 指针后移一位</span></div><div class="line"><span class="keyword">while</span>(*s != <span class="number">0</span>)&#123;&#125; <span class="comment">// 是否到字符串尾部'\0'</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>有符号整数（int）的范围：[-2^31, 0), [0, 2^31 - 1)
2147483647     -2147483648<br>
+0, -0 占了两个名额，所以2^31-1</p>
</li>
<li>
<p>判断 a + x 是否会溢出：<br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a + x &gt; INT_MAX</span></div><div class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"><span class="comment">// a + x &lt; INT_MIN</span></div><div class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>判断 a * x 是否会溢出：<br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a * x &gt; INT_MAX</span></div><div class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"><span class="comment">// a * x &lt; INT_MIN</span></div><div class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure></p>
</li>
</ol>
<hr>
<p><strong>代码：</strong><br>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: 字符串转nt</div><div class="line">* Idea: overflow, null, illegal char, negtative.</div><div class="line">* Time: O(len(s))</div><div class="line">* Space: O(len(s))</div><div class="line">* Mistakes: 指针++，而不是*s++;</div><div class="line">* 2017-05-31</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">will_overflow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">const</span> <span class="keyword">char</span>* type)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(type, <span class="string">"add"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"null!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">    <span class="keyword">bool</span> neg = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(*s == <span class="string">'-'</span>) neg = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(*s != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(*s == <span class="string">'-'</span>) &#123;s++;<span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(*s &gt; <span class="string">'9'</span> || *s &lt;<span class="string">'0'</span>)&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"illegal str!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(!will_overflow(number, <span class="number">10</span>, <span class="string">"mul"</span>))&#123;</div><div class="line">            number = number * <span class="number">10</span>;</div><div class="line">            <span class="keyword">int</span> d = *s - <span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(!will_overflow(number, d, <span class="string">"add"</span>)) &#123;number += d;&#125;</div><div class="line">            <span class="keyword">else</span> &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"overflow!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"overflow!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        s++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(neg) number = -number;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* strs[<span class="number">10</span>] = &#123;<span class="string">"-0"</span>, <span class="string">"0"</span>, <span class="literal">nullptr</span>,  <span class="string">"-18997"</span>, <span class="string">"-018997"</span>, <span class="string">"1232"</span>, <span class="string">"0018997"</span>, <span class="string">"9.34"</span>, <span class="string">"78dd90"</span>, <span class="string">"122139142182951451345134"</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">':'</span>&lt;&lt;str2int(strs[i])&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow Get Started]]></title>
      <url>/2017/05/19/Tensorflow-Get-Started/</url>
      <content type="html"><![CDATA[<p>这篇博客的主要内容来自于<strong>Tensorflow的英文官方教程</strong>：
<a href="https://www.tensorflow.org/get_started/get_started" target="_blank" rel="external">Getting started with tensorflow!</a>，同时加入了个人的理解和知识点的扩充。<br>
<strong>感谢上面那篇文章的作者，很棒的入门的教程！</strong></p>
<p>Tensorflow——An open-source software library for Machine Intelligence
--致力于深度学习的Python开源库。</p>
<ul>
<li>Lowlevel API：较为底层的API，适合高级使用者:比较care模型性能的研究人员，和对底层代码很感兴趣的人员。</li>
<li>Highlevel API: 高层一点的API，较lowlevel API好学，易用。能够帮助你方便地管理datasets，模型，完成训练和预测的工作。</li>
<li>请注意那些名字里有_contrib_的API: 这些API仍在developing阶段，tensorflow的代码是开源的，这意味着那些API可能处于变化中。如果感兴趣，你也可以加入到tensorflow的coding队伍中，变成一个为其他开发人员设计工具的开发人员。</li>
</ul>
<p>我的寄语：<br>
Dear friend,<br>
建议你在学习tensorflow之前，</p>
<ul>
<li>丰富自己的__想象力__， 因为你的脑海中需要构建出一幅__data flow graph__，这幅图能让你的代码思路更加清晰，这很重要，尤其是当你的模型越来越复杂，需要使用的tensorflow功能越来越多时。</li>
<li>不要着急去看Github上别人写的代码，先花些时间弄懂tensorflow 设计的抽象概念，这在之后能够帮助你快速理解别人的代码，并且自己也能够写出更棒的代码！</li>
<li>Tensorflow官网的documents很多，如果你是一个完完全全的新手，建议你从<a href="https://www.tensorflow.org/get_started/get_started" target="_blank" rel="external">Getting Started With TensorFlow</a>开始学习。</li>
<li>学习资料比较长，请多一点耐心读完，并且随时动手敲代码！</li>
</ul>
<h2>1. 必须理解的概念：</h2>
<ol>
<li>
<p>Tensors: (数据)<br>
任意维数的array，tensor的rank指的是array的维度:<br>
eg.<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tensor examples</span></div><div class="line"><span class="number">3</span> <span class="comment"># rank:0, 1-d array, shape:[]</span></div><div class="line">[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>] <span class="comment"># rank:1, 1-d array, shape:[3]</span></div><div class="line">[[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>], [<span class="number">2.</span>,<span class="number">1.</span>,<span class="number">3.</span>]] <span class="comment"># rank:2, 2-d array or matrix, shape:[2, 3]</span></div><div class="line">[[[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>], [<span class="number">2.</span>,<span class="number">1.</span>,<span class="number">3.</span>]]] <span class="comment"># rank:3, 3-d array or matrix, shape:[1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<p>tensorflow把封装成一个Python类，使用类中的方法，可以方便地对array进行管理和操作。</p>
</li>
<li>
<p>Computational Graph: (计算图)
数据量越大，计算过程越复杂，越需要一个清晰的思路整理数据处理的流程。Tensorflow通过data flow graph来记录对每部分数据要分别进行什么操作。<br>
<img src="/images/tensorflow/Computational-graph.jpg" alt="Computational graph"><br>
Tensorflow把对数据的操作化作directed graph中的节点，数据（tensor）就是节点直接相连的边，可以想象数据在图上有向地流动，每次流进节点就会进行某种指定的操作，然后流出的是操作之后的数据。Tensorflow这个名字很明确地表达了自己的本质呢。
简单说来，tensorflow做的事情主要分为两步：</p>
<ol>
<li>生成computational graph;</li>
<li>执行computational graph;</li>
</ol>
<p>Computational graph的node，接受0个或任意多个tensor作为input，然后output一个tensor作为输出。是的，node可以没有输入，例如node本身就是一个constant，它不接受任何输入，执行的动作是：把存储在自己内部的数值输出。下面我们创建两个constant node试试看：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const_node_1 = tf.constant(<span class="number">3.0</span>, tf.float32)</div><div class="line">const_node_2 = tf.constant(<span class="number">4.0</span>) <span class="comment"># float默认就是tf.float32，可以不必显式指明</span></div><div class="line">const_node_3 = tf.constant(<span class="number">5</span>)   <span class="comment"># int 类型</span></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_1</div><div class="line">&lt;tf.Tensor <span class="string">'Const_11:0'</span> shape=() dtype=float32&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_2</div><div class="line">&lt;tf.Tensor <span class="string">'Const_10:0'</span> shape=() dtype=float32&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_3</div><div class="line">&lt;tf.Tensor <span class="string">'Const_9:0'</span> shape=() dtype=int32&gt;</div></pre></td></tr></table></figure></p>
<p>这里并没有显示每个constant内部存储的值，但是别担心，在它们真正参与计算时，3.0,4.0和5都会乖乖出现的。这里我们只是生成了一个包含三个constant nodes的computational graph，它现在是静态的，并没有进行任何实质上的操作，下一步我们通过run这个graph，让数据真正地flow起来!</p>
</li>
<li>
<p>Session：(会话)<br>
Computational graph的运行必需要处在一个叫做：session的环境中才可以进行，session像一个厉害的大管家，为我们隔离了许多复杂的控制和状态，让我们不必为这些琐碎的问题操心。下面我们就来创建一个session，期待看到数据流动起来的样子：<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sess = tf.Session()</div><div class="line">print(sess.run(const_node_1, const_node_2))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess</div><div class="line">&lt;tensorflow.python.client.session.Session object at <span class="number">0x7f5fddfaab38</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(sess.run([const_node_1, const_node_2]))</div><div class="line">[<span class="number">3.0</span>, <span class="number">4.0</span>] <span class="comment"># 3.0 and 4.0 as we expected</span></div></pre></td></tr></table></figure></p>
<p>来点更复杂一些的操作：比如让上面两个节点的值相加：3.0 + 4.0
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_node_1 = tf.add(const_node_1, const_node_2)</div><div class="line">print(sess.run(add_node_1))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">7.0</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>Placeholder: (data)
可能你还是觉得太简单了，两个常数相加挺无聊的，我想自己指定两个加数的值：<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a = tf.placeholder(tf.float32)</div><div class="line">b = tf.placeholder(tf.float32)</div><div class="line">add_node_2 = tf.add(a, b) <span class="comment"># + 是 tf.add()的简洁形式</span></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(sess.run(add_node_2, &#123;a:<span class="number">1</span>, b:<span class="number">5</span>&#125;)) <span class="comment"># 虽然是int, 仍然当成tf.float32</span></div><div class="line"><span class="number">6.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(sess.run(add_node_2, &#123;a:[<span class="number">1</span>,<span class="number">3</span>], b:[<span class="number">2.2</span>,<span class="number">3.4</span>]&#125;))</div><div class="line">[ <span class="number">3.20000005</span>  <span class="number">6.4000001</span> ]</div></pre></td></tr></table></figure></p>
<p>这里我们用到了_Placeholder_：它相当于函数在定义时的形参，在使用的时候就会被赋予具体的值;同时我们可以指定传入参数的类型：eg.tf.float32。Placeholder在定义时不能初始化，它的赋值必须在run时进行。<br>
注：观察到上面1 + 2.2 和3+3.4的结果比真实值稍稍大了一点点，通过尝试tf.float16, tf.float64的	placeholder(), 可以发现，小数的精度越高这个误差越小。<br>
下面我们更进一步实现(a + b) * c 的计算过程：</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用两个node实现</span></div><div class="line">c = tf.placeholder(tf.float32)</div><div class="line">add_mult_node_1 = add_node_2 * c</div><div class="line"><span class="comment"># output</span></div><div class="line">print(sess.run(add_mult_node_1, &#123;a:<span class="number">1.1</span>, b:<span class="number">2.2</span>, c:<span class="number">3.</span>&#125;))</div><div class="line"><span class="number">9.9</span></div><div class="line"><span class="comment"># 使用一个node实现</span></div><div class="line">add_mult_node_2 = (a + b) * c</div><div class="line"><span class="comment"># output</span></div><div class="line">print(sess.run(add_mult_node_2, &#123;a:<span class="number">1.1</span>, b:<span class="number">2.2</span>, c:<span class="number">3.</span>&#125;))</div><div class="line"><span class="number">9.9</span></div></pre></td></tr></table></figure></p>
<p>在这个过程中，我们需要在心里绘制出一幅computational graph， 如果操作很多也可以直接画在纸上。<br>
<strong>Important</strong>: Placeholder如果在定义时被赋值，将会报错! Its value must be fed using the feed_dict 	optional argument to Session.run(), Tensor.eval(), or Operation.run().</p>
</li>
<li>
<p>Variables：(params)<br>
在Tensorflow中，我们使用Variables来存储和更新parameters。 Variables 是存储在内存中的 tensors. 它们必须在launch graph之前显式初始化，还可以training过程中和training结束之后存储到你的磁盘上，以便下次直接使用该模型。T</p>
<p>我们需要明确Placeholder和Variable的使用：</p>
<ul>
<li>Input data 通常声明为Placeholder</li>
<li>Model的参数通常声明为Variable</li>
<li>Placeholder 为feed data而生，定义时不能赋值，其内容为空，执行时通过run(),eval()等方法赋予实际值</li>
<li>Variable 为模型参数而生，定义时必须提供初值，数据类型可以是任意type、shape的Tensor 。</li>
</ul>
<p>下面我们通过一个简单的Linear Model看看如何使用Variable定义模型参数：lm = W * x + b
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">W = tf.Variable([<span class="number">.3</span>], tf.float32)</div><div class="line">b = tf.Variable([<span class="number">-.3</span>], tf.float32)</div><div class="line">x = tf.placeholder(tf.float32)</div><div class="line">linear_model = W * x + b</div></pre></td></tr></table></figure></p>
<p>初始化Variables:<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">init = tf.global_variables_initializer()</div><div class="line">sess.run(init)</div></pre></td></tr></table></figure></p>
<p>run init会初始化整个graph中的所有全局Variables；TensorFlow是lazy执行的，在run之前，所有的Variables都没有被赋予实际的值。<br>
下一步我们feed一组input样本x给我们可爱的linear model，看它会有什么输出：<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(sess.run(linear_model, &#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line">[ <span class="number">0.</span>          <span class="number">0.30000001</span>  <span class="number">0.60000002</span>  <span class="number">0.90000004</span>]</div></pre></td></tr></table></figure></p>
<p>现在我们需要知道这个linear_model的预测效果如何，接下来我们将给出样本的真实值_y_, 通过_loss_function_对比模型的输出_y_m_和真实值y之间的差异。loss function的类型很多，这里选择简单的平方误差函数：loss = (y_m - y)^2</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">y = tf.placeholder(tf.float32)</div><div class="line">squared_deltas = tf.square(linear_model - y) <span class="comment"># 单个样本预测误差</span></div><div class="line">loss = tf.reduce_sum(squared_deltas) 		 <span class="comment"># 整体样本预测误差</span></div><div class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y: [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">23.66</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/tensorflow/origin_lm.png" alt="Origin Linear Model"><br>
哎呀，这个模型的误差足足有_23.66_，效果不够理想！我们需要对它进行改进，通常训练模型的过程会通过最小化误差函数自动调整模型参数，从而使模型达到最优，这里我们为了方便，就直接给出最优模型。best_linear_model = -1.0 * x + 1.0， 这一步我们更新模型参数W,b的值为-1.0， 1.0。
更新Variable的值，可以通过tf.assign()方法实现：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># assign best val for W and b</span></div><div class="line">fix_W = tf.assign(W, [<span class="number">-1.</span>])</div><div class="line">fix_b = tf.assign(b, [<span class="number">1.</span>])</div><div class="line"><span class="comment"># do the operation acturally</span></div><div class="line">sess.run([fix_W, fix_b])</div><div class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y: [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">0.0</span></div></pre></td></tr></table></figure></p>
<p>现在model的loss是0，效果有了很大的提升！</p>
</li>
<li>
<p>自动调参：<br>
既然是_machine learning_，不能每次都手动更新参数吧，别着急，这一步我们学习如何自动更新模型参数，从而提升预测效果。<br>
Tensorflow提供了许多类型的optimizer，在train阶段，这些optimizer能够自动优化你指定的__目标函数__，通常是让损失函数达到最小。tf.train.GradientDescentOptimizer是最简单的optimizer。<br>
其原理是：梯度下降法。把要优化的目标函数想象成一座座连绵的山，我们从山中的任意一点开始下山，目标是尽快到达山下的_最低点_，梯度下降法的策略是：求当前位置的梯度g（最陡的方向下山最快），然后沿着梯度的负方向走一步，这一步应该迈的距离是learning_rate，也叫_步长_。步长的太大可能会导致错过最低点，太小又可能导致收敛的太慢，因此需要小心地选择一个合适的步长。
备注: GradientDescent算法不能保证每次都收敛到全局最优解，有时候你很可能得到的只是一个局部最优解。
当然，optimizer使用起来十分easy，因为它就是个黑盒子，我们只需要告诉它要优化的目标函数，它就会自动帮我们找到最优解。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># choose an optimizer</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</div><div class="line"><span class="comment"># tell it what to do next</span></div><div class="line">train = optimizer.minimize(loss)</div><div class="line"><span class="comment"># init W, b with</span></div><div class="line">sess.run(init)  </div><div class="line"><span class="comment"># train loop</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">  sess.run(train, &#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y:[<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;)</div><div class="line">print(sess.run([W, b]))</div><div class="line"><span class="comment"># output</span></div><div class="line">[array([<span class="number">-0.9999969</span>], dtype=float32), array([ <span class="number">0.99999082</span>],</div><div class="line"> dtype=float32)]</div></pre></td></tr></table></figure></p>
<p>经过1000次迭代之后，W,b 已经十分接近标准答案-1.0,1.0了，我们完成了就是自动学习参数的过程！</p>
</li>
</ol>
<h2>2. 完整的模型训练过程：</h2>
<p>上一步我们直接给出了模型的最优参数，接下来我们进行一次真正意义上的_Machine Learning_，让模型自己学习出最优的W,b。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="string">"""complete_example_tf.py</span></div><div class="line">Description: a complete example for tensorflow tutorial.</div><div class="line">Date: 2017-05-19</div><div class="line">Author: MonkandMonkey</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># A complete tensorflow example</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complete_try</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># max iteration times</span></div><div class="line">    max_iter = <span class="number">1000</span></div><div class="line">    <span class="string">'''Construct the computational graph'''</span></div><div class="line">    <span class="comment"># model parameters</span></div><div class="line">    W = tf.Variable([<span class="number">.3</span>], tf.float32)</div><div class="line">    b = tf.Variable([<span class="number">-.3</span>], tf.float32)</div><div class="line">    <span class="comment"># model input and output</span></div><div class="line">    x = tf.placeholder(tf.float32)</div><div class="line">    liner_model = W * x + b  <span class="comment"># predict y</span></div><div class="line">    y = tf.placeholder(tf.float32)  <span class="comment"># true y</span></div><div class="line">    <span class="comment"># define loss function</span></div><div class="line">    suqared_deltas = tf.square(liner_model - y)</div><div class="line">    loss = tf.reduce_sum(suqared_deltas)</div><div class="line">    <span class="comment"># choose an optimizer</span></div><div class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>)</div><div class="line">    <span class="comment"># set the train object</span></div><div class="line">    train = optimizer.minimize(loss)</div><div class="line"></div><div class="line">    <span class="string">'''Prepare training data'''</span></div><div class="line">    x_train = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">    y_train = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, - <span class="number">3</span>]</div><div class="line"></div><div class="line">    <span class="string">'''Run the graph'''</span></div><div class="line">    sess = tf.Session()</div><div class="line">    init = tf.global_variables_initializer()</div><div class="line">    sess.run(init)  <span class="comment"># initialize params: W, b</span></div><div class="line">    <span class="comment"># training loop</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</div><div class="line">        <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</div><div class="line">            curr_W, curr_b, curr_loss = sess.run([W, b, loss], feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line">            print(<span class="string">"[&#123;:0&gt;3&#125;] - W: &#123;:&lt;5.4f&#125;, b: &#123;:&lt;6.4f&#125;, loss: &#123;:&lt;6.4f&#125;"</span>.format(i, curr_W[<span class="number">0</span>], curr_b[<span class="number">0</span>], curr_loss))</div><div class="line">        sess.run(train, feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line"></div><div class="line">    <span class="comment"># evaluate the accuracy</span></div><div class="line">    trained_W, trained_b, trained_loss = sess.run([W, b, loss], feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line">    print(<span class="string">"Training result:"</span>)</div><div class="line">    print(<span class="string">"  W: &#123;:&lt;5.4f&#125;, b: &#123;:&lt;6.4f&#125;, loss: &#123;:&lt;6.4f&#125;"</span>.format(trained_W[<span class="number">0</span>], trained_b[<span class="number">0</span>], trained_loss))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> trained_W[<span class="number">0</span>], trained_b[<span class="number">0</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Pic for tensorflow tutorial</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_tensorflow</span><span class="params">(W, b)</span>:</span></div><div class="line">    y = np.array([<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>])</div><div class="line">    x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">    y_m = W * x + b</div><div class="line"></div><div class="line">    plt.plot(x, y, <span class="string">'b.'</span>, x, y_m, <span class="string">'r-'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># add labels</span></div><div class="line">    plt.xlabel(<span class="string">"x"</span>)</div><div class="line">    plt.ylabel(<span class="string">"y"</span>)</div><div class="line">    <span class="comment"># add legends</span></div><div class="line">    plt.legend([<span class="string">"y-truth"</span>, <span class="string">"y-predict"</span>])</div><div class="line">    <span class="comment"># add title</span></div><div class="line">    plt.title(<span class="string">"Best linear_model: W=&#123;:.2f&#125;, b=&#123;:.2f&#125;"</span>.format(W, b))</div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic_tensorflow: a simple plot for tensorflow get started!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">"Start running!"</span>)</div><div class="line">    W, b = complete_try()<span class="comment"># train the model</span></div><div class="line">    pic_tensorflow(W, b) <span class="comment"># plot the model</span></div></pre></td></tr></table></figure></p>
<p>这里借用tensroflow的computational graph:<br>
<img src="https://www.tensorflow.org/images/getting_started_final.png" alt="Graph for this linear model"><br>
这幅图远比我们想象得要复杂一些，不过很多细节都是tensorflow帮我们补充上的，我们只需要确保那些关键细节正确。</p>
<h2>3. 还能更简单？</h2>
<p><em>tf.contrib.learn</em> 让 Machine learning 的过程进一步地简化，属于更加high level的API，让整个machine learning的过程看起来越来越像你草稿纸上的几行简单的“算法思路”。<br>
仍以Linear Model为例，我们看看使用_tf.contrib.learn_如何完成相同的事情：<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment"># NumPy 包通常用于处理数据</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># input data：only 1 feature - x</span></div><div class="line">features = [tf.contrib.layers.real_valued_column(<span class="string">"x"</span>, dimension=<span class="number">1</span>)]</div><div class="line"></div><div class="line"><span class="comment"># estimator: provide the handler for model's fitting and evaluation </span></div><div class="line"><span class="comment"># 更多类型的estimator可以查阅API</span></div><div class="line">estimator = tf.contrib.learn.LinearRegressor(feature_columns=features)</div><div class="line"></div><div class="line"><span class="comment"># read and set up data sets.</span></div><div class="line"><span class="comment"># numpy_input_fn: 读入、划分数据集为一个个batch</span></div><div class="line"><span class="comment"># 1 epoch: 使用一遍data set </span></div><div class="line">x = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</div><div class="line">y = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</div><div class="line">input_fn = tf.contrib.learn.io.numpy_input_fn(&#123;<span class="string">"x"</span>: x&#125;, y, batch_size=<span class="number">4</span>,</div><div class="line">                                                  num_epochs=<span class="number">1000</span>)</div><div class="line"><span class="comment"># 训练迭代1000次</span></div><div class="line">estimator.fit(input_fn=input_fn, steps=<span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 检验模型的效果（实际使用应当在test set进行）</span></div><div class="line">print(estimator.evaluate(input_fn=input_fn))</div></pre></td></tr></table></figure></p>
<p>tf.contrib提供了许多常用的model,例如：linear regression,logistic regression, linear classification, logistic classification, and many neural network classifiers and regressors。当然，如果你想自己定制model,也是可以的，下面就是一个自己定制的Linear Model例子：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># featiures: [x], labels: true y, mode:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(features, labels, mode)</span>:</span></div><div class="line">    <span class="comment"># Build a linear model and predict values</span></div><div class="line">    W = tf.get_variable(<span class="string">"W"</span>, [<span class="number">1</span>], dtype=tf.float64)</div><div class="line">    b = tf.get_variable(<span class="string">"b"</span>, [<span class="number">1</span>], dtype=tf.float64)</div><div class="line">    y = W * features[<span class="string">'x'</span>] + b</div><div class="line">    <span class="comment"># Loss sub-graph</span></div><div class="line">    loss = tf.reduce_sum(tf.square(y - labels))</div><div class="line">    <span class="comment"># Training sub-graph</span></div><div class="line">    global_step = tf.train.get_global_step()</div><div class="line">    optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</div><div class="line">    train = tf.group(optimizer.minimize(loss),</div><div class="line">                     tf.assign_add(global_step, <span class="number">1</span>))</div><div class="line">    <span class="comment"># ModelFnOps connects subgraphs we built to the</span></div><div class="line">    <span class="comment"># appropriate functionality.</span></div><div class="line">    <span class="keyword">return</span> tf.contrib.learn.ModelFnOps(</div><div class="line">        mode=mode, predictions=y,</div><div class="line">        loss=loss,</div><div class="line">        train_op=train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    estimator = tf.contrib.learn.Estimator(model_fn=model)</div><div class="line">    <span class="comment"># define our data set</span></div><div class="line">    x = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</div><div class="line">    y = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</div><div class="line">    input_fn = tf.contrib.learn.io.numpy_input_fn(&#123;<span class="string">"x"</span>: x&#125;, y, <span class="number">4</span>, num_epochs=<span class="number">1000</span>)</div><div class="line">    <span class="comment"># train</span></div><div class="line">    estimator.fit(input_fn=input_fn, steps=<span class="number">1000</span>)</div><div class="line">    <span class="comment"># evaluate our model</span></div><div class="line">    print(estimator.evaluate(input_fn=input_fn, steps=<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p>上一部分中的tf.contrib.learn.LinearRegressor，是tf.contrib.learn.Estimator的一个sub-class, 如果我们要定义自己的model, 也需要继承Estimator类。可以通过定义<em>model_fn</em>函数，来描述是一个怎样的model。<em>model_fn</em>中需要指明:fit, loss, evaluate，整个流程看起来非常像我们第二部分中使用low level API实现的例子： 定义parameters, 定义model， 定义loss, optimizer。就好像我们分别设计个几个sub-graphs，然后使用<em>ModelFnOps</em>把各个子图连接起来。</p>
<hr>
<p>读到这里，你应该已经了解了tensorflow的基本套路，面对长长的示例代码也不怕了, 写起代码来也更得心应手。<br>
希望本文对你的理解有所帮助！(<em><sup>_</sup></em>)</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> tensorflow </tag>
            
            <tag> machine learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中_的疑惑]]></title>
      <url>/2017/05/17/Python%E4%B8%AD-%E7%9A%84%E7%96%91%E6%83%91/</url>
      <content type="html"><![CDATA[<p>在Tensorflow tutorial：RNN教程的示例代码中，发现了&quot;_&quot;的使用：</p>
<p><img src="/images/python/useof_1.PNG" alt="tensorflow example which uses '_'"></p>
<p>经过查阅，将其身世简单记录如下：<br>
在Python中，变量的命名规则是：变量名必须是大小写英文、数字和_的组合，且不能用数字开头，所以a single _ 是可以作为变量名的，虽然看起来怪怪的。<br>
_的一个常见用途是：充当一个占位符，有时候，某个位置必须要写一个变量，但是这个变量后面又不会用到，这时候会使用_当变量名，又叫throwaway variable。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> tbh.bag.atom_set():</div><div class="line">	n += <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>又如：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">label, has_label, _ = text.partition(<span class="string">':'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows下mysql安装]]></title>
      <url>/2017/05/10/windows%E4%B8%8Bmysql%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ol>
<li>
<p>下载 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">MySQL Server 5.17.16 Community</a>版:<br>
选择os version (x64)<br>
下载下面的第一个ZIP文件</p>
</li>
<li>
<p>解压到指定目录（无需安装，解压就行）</p>
</li>
<li>
<p>bin路径添加到<strong>Path</strong>环境变量</p>
</li>
<li>
<p>在解压的根目录下，新建配置文件：my.ini<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line"><span class="comment"># 设置mysql客户端默认字符集</span></div><div class="line">default-character-set=utf8</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line"><span class="comment"># 设置3306端口</span></div><div class="line">port = 3306</div><div class="line"><span class="comment"># 设置mysql的安装目录</span></div><div class="line">basedir=path-to\MySQL\install</div><div class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></div><div class="line">datadir=path-to\MySQL\install\sqldata</div><div class="line"><span class="comment"># 允许最大连接数</span></div><div class="line">max_connections=50</div><div class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></div><div class="line">character-set-server=utf8</div><div class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></div><div class="line">default-storage-engine=INNODB</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>管理员打开cmd，cd 到MySQL的bin目录下：<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; mysqld install</div></pre></td></tr></table></figure></p>
<p>安装mysql服务成功！</p>
</li>
<li>
<p>启动mysqld服务:<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div><div class="line">``` </div><div class="line">发现失败：需要手动初始化data目录：</div><div class="line">```bash</div><div class="line">&gt; mysqld --initialize-insecure</div></pre></td></tr></table></figure></p>
<p>再次运行：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div></pre></td></tr></table></figure></p>
<p>成功！</p>
</li>
<li>
<p>创建用户，设置密码:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; mysql -u root <span class="comment"># root 登陆</span></div><div class="line"><span class="comment"># 创建用户amy，设置密码，授权</span></div><div class="line">&gt; create user <span class="string">'amy'</span>@<span class="string">'localhost'</span> identified by <span class="string">'pwd'</span>;</div><div class="line">&gt; grant all privileges on *.* to amy@<span class="string">'localhost'</span>;</div><div class="line">&gt; <span class="built_in">exit</span> <span class="comment"># 退出当前登陆</span></div><div class="line">&gt; mysql -u amy -p</div><div class="line">&gt; your_pwd <span class="comment"># 输入刚刚为用户amy设置的密码</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>执行sql语句:
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; show databases;</div></pre></td></tr></table></figure></p>
<p>可以看到系统默认的数据库。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[matplotlib绘图笔记]]></title>
      <url>/2017/05/09/matplotlib%E7%BB%98%E5%9B%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>本篇记录使用matplotlib进行简单的数据可视化。</p>
<h3>1. matplotlib 与 pyplot</h3>
<p>按照官网的说明：pyplot是matplotlib 的一个module。通常，我们也只是使用这一个module。但是dir(matplotlib)并没有查看到其中包含pyplot，这就让人很好奇了。<br>
matplotlib是一个python <em>libary</em>， pyplot 是一个 <em>module</em>。那么，libary和module, 还有package到底是什么呢？</p>
<ul>
<li>module: a module in python is a .py file that defines one or more function/classes which you intend to reuse in different codes of your program.<br>
模块：简单的说就是.py文件，我们会把想要重复使用的代码放到module里。使用时直接import。</li>
<li>package: a directory of Python module(s).<br>
包：通常我们把一些相关的module文件组织在一起。dir查看一个package，它一定具有__path__变量，module则没有。</li>
<li>libary: When used in Python, a library is used loosely to describe a collection of the core modules.<br>
库：libary这种叫法在Python里并不常见，matplotlib其实是一个package,我们在python 的PyPI - the Python Package Index里可以查到它哦。<br>
现在，我们知道了：matplotlib是一个package，而面向用户的功能主要由其中的<em>pyplot</em> modulet提供，因此我们使用时常常这样写：</li>
</ul>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure></p>
<h3>2. matplotlib 的基本概念</h3>
<ul>
<li>figure: 可以理解成画板上的画布，是最最基础的。</li>
<li>axes:   画布通常可以划分成多个小的区域，我们在不同区域作画，这些小的区域叫做axes。如果不划分，那么整个画布就是一个绘图区域。</li>
</ul>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一幅图</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 多幅图:分成m*n块子图</span></div><div class="line">fig, axes = plt.subplots(m, n)</div><div class="line">axes[<span class="number">0</span>].plot(x, y)</div><div class="line"><span class="comment"># 划分，并切换到第一个子图</span></div><div class="line">plt.subplot(<span class="number">121</span>)</div><div class="line">plt.plot(x, y)</div></pre></td></tr></table></figure></p>
<h3>3. 使用示例：</h3>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="string">"""learn.py</span></div><div class="line">Description: Learn to use pyplot</div><div class="line">Date: 2017-05-08</div><div class="line">Author: MonkandMonkey</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> matplotlib.mlab <span class="keyword">as</span> mlab</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a simple pic</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic1</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># evenly sampled time at 200ms intervals</span></div><div class="line">    y = np.arange(<span class="number">0.</span>, <span class="number">10.</span>, <span class="number">1.</span>)</div><div class="line"></div><div class="line">    <span class="comment"># red dashes, blue squares and green triangles</span></div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    <span class="comment"># x axis range, y axis range</span></div><div class="line">    plt.xlim([<span class="number">0</span>, <span class="number">10</span>])</div><div class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1000</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic1: a simple plot with three different markers and colors!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a pic with text</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic2</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.4</span>)</div><div class="line"></div><div class="line">    <span class="comment"># plot dot</span></div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    <span class="comment"># add labels</span></div><div class="line">    plt.xlabel(<span class="string">"no"</span>)</div><div class="line">    plt.ylabel(<span class="string">"num"</span>)</div><div class="line">    <span class="comment"># add legends</span></div><div class="line">    plt.legend([<span class="string">"legend1"</span>, <span class="string">"legend2"</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    <span class="comment"># add tilte</span></div><div class="line">    plt.title(<span class="string">"Pic2: work with text"</span>)</div><div class="line">    print(<span class="string">"Plot pic2: a simple plot with xlabel and ylabel!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># subplots</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic3</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</div><div class="line"></div><div class="line">    plt.figure()</div><div class="line">    <span class="comment"># m, n, no of axes</span></div><div class="line">    plt.subplot(<span class="number">121</span>)</div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    plt.title(<span class="string">"sub1"</span>)</div><div class="line"></div><div class="line">    plt.subplot(<span class="number">122</span>)</div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    plt.title(<span class="string">"sub2"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic3: subplots!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># boxplot</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic4</span><span class="params">()</span>:</span></div><div class="line">    data = [&#123;<span class="string">"a"</span>: <span class="string">"aaa"</span>, <span class="string">"b"</span>: <span class="number">22.3</span>, <span class="string">"c"</span>: <span class="number">20</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"bbb"</span>, <span class="string">"b"</span>: <span class="number">41.2</span>, <span class="string">"c"</span>: <span class="number">2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ccc"</span>, <span class="string">"b"</span>: <span class="number">52.22</span>, <span class="string">"c"</span>: <span class="number">5</span>&#125;,</div><div class="line">            &#123;<span class="string">"a"</span>: <span class="string">"dddd"</span>, <span class="string">"b"</span>: <span class="number">28.9</span>, <span class="string">"c"</span>: <span class="number">19.2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ee"</span>, <span class="string">"b"</span>: <span class="number">28.3</span>, <span class="string">"c"</span>: <span class="number">11</span>&#125;]</div><div class="line">    df = pd.DataFrame(data)</div><div class="line">    df.set_index([<span class="string">"a"</span>])</div><div class="line">    y = df[<span class="string">"b"</span>]</div><div class="line">    plt.boxplot(y)</div><div class="line"></div><div class="line">    <span class="comment"># config</span></div><div class="line">    plt.title(<span class="string">"pic4: box plot"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># histogram</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic5</span><span class="params">()</span>:</span></div><div class="line">    fig, ax = plt.subplots()</div><div class="line">    mu = <span class="number">50</span></div><div class="line">    sigma = <span class="number">2.5</span></div><div class="line">    <span class="comment"># normalization rand float 800*1 dim</span></div><div class="line">    y = mu + sigma * np.random.randn(<span class="number">800</span>)</div><div class="line"></div><div class="line">    n, bins, patches = plt.hist(y, <span class="number">100</span>, normed=<span class="number">1</span>)</div><div class="line">    <span class="comment"># add a 'best fit' line</span></div><div class="line">    y = mlab.normpdf(bins, mu, sigma)</div><div class="line">    ax.plot(bins, y, <span class="string">'--'</span>)</div><div class="line"></div><div class="line">    ax.set_xlabel(<span class="string">'Smarts'</span>)</div><div class="line">    ax.set_ylabel(<span class="string">'Probability density'</span>)</div><div class="line">    ax.set_title(<span class="string">r'Histogram of IQ: $\mu=100$, $\sigma=15$'</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Pic5: histogram!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pic5()</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> plot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 python argparse: 编写友好的命令行接口]]></title>
      <url>/2017/05/07/%E4%BD%BF%E7%94%A8python%20argparse%20%E7%BC%96%E5%86%99%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>Python 的 *args 和 kwargs 总是感觉对人不太友好，直到 <strong>argparse</strong> 模块的出现解救了我！学习 <a href="https://docs.python.org/3/howto/argparse.html" target="_blank" rel="external">argparse Tutorial</a> 的时候又不小心发现了格式化字符串的函数<a href="https://pyformat.info/" target="_blank" rel="external">&quot;str&quot;.format</a>,瞬间，有了一种进城的感觉。<br>
<img src="http://img.boqiicdn.com/Data/Bbs/Users/132/13229/1322908/img90981381981050.gif" alt="dakang"></p>
<p>argparse模块使得编写用户友好的命令行接口非常容易。程序只需定义好它要求的参数，然后argparse将负责如何从sys.argv中解析出这些参数。argparse模块还会自动生成帮助和使用信息并且当用户赋给程序非法的参数时产生错误信息。</p>
<p>首先准备一下基础知识：<br>
arguments即：参数，函数被调用时，必须要知道的一些信息。有时函数需要接收不止一个参数，这么多参数，它如何一一对上号呢？这个对号入座的策略就是Python的参数传递机制。</p>
<h3>策略1 - positional arguments: 位置参数</h3>
<p>位置参数即：函数和大家声明好了，传给我的第一个参数是梨，第二个参数是枣，第三个参数是西瓜，你们调用我的时候必须按照这个顺序来，出错了我可不负责哦！😝<br>
优点：输入简洁，方便
缺点：参数多时，准确记住顺序困难，输入量也很大。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a-b</div><div class="line"><span class="comment"># 调用</span></div><div class="line">subtract(<span class="number">3</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<h3>策略2 - keyword arguments: 关键字参数</h3>
<p>如果你实在记不住参数的顺序，但你可以记得你参数的名字，那么你可以使用keyword arguments,常常见到Github上别人家的代码充斥着 <em>*args</em> , <em>kwargs</em> 这些天书一般的符号，看得都晕了，但其实，它们虽然写起来比较复杂，但是对于调用者来说却十分方便。使用时，不必记住每个参数的顺序，只需告诉函数我这个参数的名字和值，函数就知道如何对应。如果你觉得输入名字太麻烦，按顺序给参数也可以，兼容位置参数。
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">	<span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<h3>策略3 - optional arguments: 可选参数</h3>
<p>实际上，我们常常只会用到函数的一部分参数，如果想要你的函数对别人友好一些，那就得辛苦一下在代码里多写几行了。如果调用者制定了参数的值，那就使用这个值，如果没有，那就使用默认值。</p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">    <span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_start=<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>) <span class="comment"># 3-2=?</span></div></pre></td></tr></table></figure></p>
<h3>argeparse 使用</h3>
<p>需要注意的一点： argparse 用于编写<strong>用户</strong>交互命令行接口，前面我们说的是函数调用的接口，这一点要清楚。argparse能让你的程序更加友好，更加鲁棒，用户的肆意输入也不会让它崩溃，同时还能提供提示信息，告诉用户如何正确地使用你的程序。<br>
下面我们通过栗子来看看，argparse到底有多方便：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" Command-line arg parsing library</span></div><div class="line">    Example Usage:</div><div class="line">    - python learn_argparse.py -h</div><div class="line">    - python learn_argparse.py "hello"</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f -t clean</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="comment"># CPython argparse Example</span></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    parser = argparse.ArgumentParser()</div><div class="line">    <span class="comment"># add arguments</span></div><div class="line">    parser.add_argument(<span class="string">"echo"</span>, help=<span class="string">"echo the string you use here"</span>)</div><div class="line">    parser.add_argument(<span class="string">"-d"</span>, <span class="string">"--double"</span>, help=<span class="string">"double the number you input here"</span>, type=float)</div><div class="line">    parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--format"</span>, help=<span class="string">"format the output"</span>, action=<span class="string">'store_true'</span>)</div><div class="line">    parser.add_argument(<span class="string">"-t"</span>, <span class="string">"--type"</span>, help=<span class="string">"output format type"</span>, choices=[<span class="string">"clean"</span>, <span class="string">"math"</span>, <span class="string">"string"</span>], default=<span class="string">"math"</span>)</div><div class="line">    <span class="comment"># parse arguments</span></div><div class="line">    args = parser.parse_args()</div><div class="line">    print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The string is"</span>, args.echo))</div><div class="line">    <span class="keyword">if</span> args.double:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.format:</div><div class="line">            print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> args.type == <span class="string">"clean"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">elif</span> args.type == <span class="string">"string"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The double of &#123;:&gt;8&#125; is &#123;:&gt;8&#125;"</span>, args.double, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125; * &#123;&#125; = &#123;&#125;"</span>.format(<span class="string">"The exp is"</span>, args.double, args.double, <span class="number">2</span> * args.double))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure></p>
<p>例子中涉及了4种参数的使用方法:</p>
<pre><code>1. echo: 位置参数，必须
2. -d: 加'-'表示可选参数，type限定输入类型
3. -f: 标记参数，action=store_true, 输入代表True,不输入代表False，后面不跟其他值
4. -t: 限定参数的选择范围：[&quot;clean&quot;, &quot;math&quot;, &quot;string&quot;]只能是三者之一； 缺省默认值default=&quot;math&quot;。  
</code></pre>
<p>实例：
<img src="/images/python/argparse_rst1.PNG" alt="input">
<img src="/images/python/argparse_rst2.PNG" alt="output"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> arg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xpath那些事儿]]></title>
      <url>/2017/05/03/xpath%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p>今天让我们来聊聊Xpath！Xpath在web爬虫中使用的非常频繁，它能够帮助我们方便地定位到网页中的某个（些）具体元素。<br>
本文的主要目的是记录一些xpath的常用知识，捋一捋学习的的思路。</p>
<p><strong>提纲:</strong><br>
<a href="#intro">1.何为Xpath?</a><br>
<a href="#examples">2.通过例子学习：</a><br>
<a href="#selenium">3.selenium中使用find_element_by_xpath()定位元素：</a></p>
<p>&lt;h3 id = &quot;intro&quot;&gt;1. 何为Xpath?&lt;/h3&gt;
Xpath，从它的姓，我们可以知道它和XML有些关系。XML指可扩展标记语言（EXtensible Markup Language）
直观地感受一下XML语言表示出的文档的样子：<br>
<img src="/images/spider/XML_eg.PNG" alt="XML例子">
*&lt;p align=&quot;left&quot;&gt;图1-XML 示例&lt;/p&gt; *</p>
<p>可以发现：XML文档层级清晰，父节点包着子节点。当我们要定位到其中的某一个节点时，可以从某个祖先节点开始，沿途经过某些节点到达目标节点，这就构成了一条路径，许许多多这样的路径生发出来，看起来就像一棵倒置的大树，根节点在上，叶子节点在下。</p>
<p>Xpath就是这类路径的表示方法(路径表达式)。Xpath不仅适用于XML文档，html文档它也搞得定！<br>
&lt;h3 id = &quot;examples&quot;&gt;2. 通过例子学习： &lt;/h3&gt;</p>
<ul>
<li>Xpath的教程和参考手册：<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="external">W3C school--XPATH</a>里面包含了详细的语法知识和例子。</li>
<li>推荐Chrome的Xpath Helper扩展，会随当前网页自动加载，输入xpath会自动显示出定位的元素。</li>
<li>如果想知道某个元素的xpath,可以使用chrome debugger的copy xpath功能，那里的xpath表达式简洁易懂。</li>
</ul>
<p>下面展示了一些有用的例子，以后可能会用到。</p>
<ol>
<li>
<p>选取 class = 'u '的 div:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>选取 table 元素的某个部分, 索引下标从1开始:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/table/tbody/tr/td[2]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>选取 id = 'login '的 div：id是唯一的；//表示可以不从根节点开始搜索，只要满足表达式即可；/表示从根结点开始搜索
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//div[@id=&apos;login&apos;]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>选取 id = 'login '的 元素,由于id是唯一的，所以也可以不指明div:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//*[@id=&apos;login&apos;]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>当满足条件的元素有多个时，只选择最后一个:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/div/span[last()]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>复合谓词 and：选取具有某个子元素的父节点div:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and ./div/span[@class=&apos;uu&apos;]]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>函数 not：排除具有某个子元素的父节点div, 轴：following-sibling，可以定义相对于当前结点的节点集合；./：以当前结点为根搜索
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and not(./div/span[@class=&apos;uu&apos;]) and following-sibling::div[@class=&apos;mm&apos;]]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>选取 文本内容包含&quot;hello&quot;的 span:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[contains(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>选取 文本内容以&quot;hello&quot;开头的 span:<br>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[starts-with(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure></p>
</li>
</ol>
<p>&lt;h3 id = &quot;selenium&quot;&gt;3. selenium中使用find_element_by_xpath()定位元素：&lt;/h3&gt;</p>
<ol>
<li>
<p>基本用法：<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取div元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/html/body/div[@class='ut']"</span>)</div><div class="line"><span class="comment"># 获取div中的文本</span></div><div class="line">div_content = div_ele.text</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>text()函数无法使用<br>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 试图获取某text()元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/text()[2]"</span>)</div><div class="line"><span class="comment"># 注意！这样会报错，因为find_element_by_xpath()返回的必须是element类型，而不是str!</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>只能选择class属性为一个的情况：
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/div[@class='u']"</span>)</div></pre></td></tr></table></figure></p>
<p>选择具有多个class属性的元素，可以用css selector:
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'ok good nice'</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element(By.CSS_SELECTOR, <span class="string">'li.ok.good.nice'</span>)</div></pre></td></tr></table></figure></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> xpath </tag>
            
            <tag> spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++单例模式singleton实现]]></title>
      <url>/2017/04/30/c++%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8Fsingleton%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3>1.singleton 单例模式：</h3>
<p>设计一个类，我们只能生成该类的一个实例。eg. __地球__就是一个singleton，据我们所知，宇宙中目前只有一个<strong>地球</strong>。</p>
<h3>2.实现思路：</h3>
<p>设一个static private变量：instance。每次要生成该类实例时都检查一下这个instance是否为nullptr：是的话就新建一个实例赋给该instance，否的话就直接返回这个实例。</p>
<p><em>为什么instance需要是static的呢？</em></p>
<p>因为instance应该是一个类变量，它需要被整个class共享，static关键字在上一篇<em>笔记</em>中讲过：它可以限制变量的作用域，static变量在类中就会变成类变量，整个类的实例都能访问。如果是实例变量的话，那么每个实例都将拥有分别拥有各自的instance，就无从判断该类是不是已经有一个实例了。<br>
eg. 宇宙在创造地球的时候，为了让人类珍惜赖以生存的家园，它决定整个宇宙中只能有一个地球，但是它要创造的星球很多，常常忘记已经创造了哪个，还没创造哪个。所以为了保证只有一个地球，它把<strong>地球</strong>类设计成了单例模式，并且给了这个类一张白纸。有一天它决定要创造地球了，于是就先让地球出示了那张纸，它发现：那张纸是空白的，这说明地球还没有被创造过，所以它就选好了一个位置（内存），并把这个位置记在了白纸上，然后它在这个位置上创造了地球。一个月后，忙碌的宇宙又想起了创造地球这件事，但是它不确定自己是否已经创造过地球了，于是它找到<em>地球</em>类，让它出示那张纸，发现那张纸上已经有一个地址了！地球类对宇宙说：“我已经有一个实例了，它就在这个纸上写的位置上，不信你去瞧瞧！”宇宙按照地址找到了地球，发现它就在那里，于是宇宙就决定进行下一步：改善地球环境。这当然都是后话了。</p>
<p><em>为什么instance需要是private的呢？</em></p>
<p>因为如果instance是public的，那么任意一个该类的实例都可以修改它的值，比如：创建完一个实例之后，编程人员不小心把instance又置为了nullptr,那么下次就还能够创建新的实例，这是不符合单例模式宗旨的。</p>
<h3>3.实现代码：</h3>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* instance;</div><div class="line">    <span class="keyword">int</span> no=<span class="number">0</span>;</div><div class="line">    Singleton()&#123;no++; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Construct!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">    ~Singleton()&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Delete!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="literal">nullptr</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;no&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 初始化instance</span></div><div class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Singleton* single1 = Singleton::getInstance();</div><div class="line">    Singleton* single2 = Singleton::getInstance();</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single1 addr:"</span>&lt;&lt;single1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single2 addr:"</span>&lt;&lt;single2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span>(single1 == single2)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"same"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    single1-&gt;Print();</div><div class="line">    single2-&gt;Print();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果图：
<img src="/images/cpp/singleton_rst.PNG" alt="运行结果图">
我说说我有疑问的的几点：</p>
<ol>
<li>instance变量为什么是Singleton*类型，不能是Singleton或者Singleton&amp;类型？<br>
答：如果是Singleton类型：那就是递归结构了，自身包含自身，没法做到只有一个实例；<br>
如果是Singleton&amp;引用类型，对于引用类型的成员, 只能通过初始化表达式进行初始化。Singleton(Singleton &amp;s):instance(s) { },这还是递归结构嘛，先有鸡还是先有蛋的问题。</li>
<li>instance变量如何初始化呢？<br>
答：在类的外面，初始化为nullptr。不能在里面初始化，否则zongshinullptr，总能创建新的实例。</li>
<li>构造函数和析构函数为什么是private的？<br>
答：构造函数是private：构造函数就是生成实例的，如果public则其他实例可以被任意生成；<br>
析构函数在实例被销毁时自动调用，析构函数只能有一个, 不能被重载。析构函数可以被显式的调用, 以释放对象中动态申请的内存。如果析构函数是public,则实例将能够被随意销毁，instance变量如果没有了，下次就不能够再生成了。</li>
<li>为什么~Singleton()析构函数没有被调用，而构造函数被调用了？<br>
答：因为new Singleton()所以构造函数被调用了，以instance地址为起点，开辟了一块空间，给instance变量进行了初始化；<br>
因为该实例存在于静态存储区，static的变量要程序关闭才会释放。</li>
<li>如何验证这个类真的只有一个实例？<br>
答：在本例中，==用来判断两个指针是否相同，即判断两个实例是否在同一个地址。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何安装Mongodb？]]></title>
      <url>/2017/04/30/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Mongodb%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>本文记录了在我的PC上安装Mongodb的过程，以备忘。<br>
参考：<a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="external">菜鸟教程-Mongodb</a></p>
<h3>1. 下载：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">Mongodb community</a> 选择适合自己操作系统的版本。</h3>
<h3>2. 安装Mongodb：</h3>
<ol>
<li>
<p>安装Mongodb的安装文件，可以选择complete默认安装，也可选择custom自己指定安装的路径和功能。</p>
</li>
<li>
<p>创建数据目录：我要把数据库的数据目录放在D:盘
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; d:</div><div class="line">&gt; <span class="built_in">cd</span> \your-path-to\Mongodb</div><div class="line">&gt; mkdir db <span class="comment"># 新建一个db文件夹</span></div><div class="line">&gt; mkdir <span class="built_in">log</span> <span class="comment"># 新建一个log文件夹</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>添加环境变量：在Path环境变量中添加Mongodb安装好的bin路径，就能从命令行直接启动Mongodb而无需切换到安装目录下了。</p>
</li>
<li>
<p>设置安全认证登陆：<br>
Mongodb默认没有密码，但是为了保证数据的安全性，我们给数据库开启安全性认证。大致流程是这样的：</p>
<ul>
<li>以无认证方式启动mongodb server</li>
<li>client连接上去，创建一个usr-admin(管理用户的用户)</li>
<li>以认证方式启动mongodb server</li>
<li>client以usr-admin身份登陆，再创建一个普通用户amy(只对test数据库有操作权限)</li>
<li>使用amy登陆，向test数据库中插入数据。</li>
</ul>
</li>
<li>
<p>创建用户：
以管理员权限打开cmd。
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; mongod --dbpath <span class="string">"\your-path-to\Mongodb\db"</span> --logpath    </div><div class="line"><span class="string">"\your-path-to\Mongodb\log\Mongodb.log"</span>   </div><div class="line"><span class="comment"># 以不认证方式启动Mongodb服务，log写在log文件夹下的Mogodb.log文件里，这样控制台窗    </span></div><div class="line"><span class="comment"># 口就不会输出一大堆信息，整个世界都清静了。</span></div></pre></td></tr></table></figure></p>
<p><em>创建用户:</em><br>
设置了认证，需要有用户才可以登陆。我们这一步创建两个用户：usr-admin和amy。<br>
usr-admin是管理员，amy是普通用户。<br>
<strong>5.1 创建usr-admin用户：</strong><br>
打开一个新的cmd窗口：<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动一个client，会连接上刚才启动的server服务。  </span></div><div class="line">&gt; mongo</div></pre></td></tr></table></figure></p>
<p><img src="/images/Mongodb/1-connected.PNG" alt="连接成功！" title="client链接server"><br>
Mongodb 3.0以后把addUser()函数改成了<a href="https://docs.mongodb.com/manual/reference/method/db.createUser/#create-administrative-user-with-roles" target="_blank" rel="external">createUser()</a><br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; use admin</div><div class="line">&gt; db.createUser(&#123;</div><div class="line">	user:<span class="string">"usr-admin"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [&#123;</div><div class="line">		role:<span class="string">"userAdminAnyDatabase"</span>,</div><div class="line">		db: <span class="string">"admin"</span></div><div class="line">	&#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>role（角色）就是权限的集合。在这里，我们赋予了usr-admin用户对于admin数据库 “userAdminAnyDatabase”的权限。<br>
<strong>5.2 创建普通用户：</strong></p>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以认证方式启动mongdb server:</span></div><div class="line">&gt; mongod --dbpath <span class="string">"D:\0-softwares\coding\Mongodb\db"</span> --logpath <span class="string">"D:\0-softwares\coding\Mongodb\log\Mongodb.log"</span> --auth</div><div class="line"><span class="comment"># 新开一个cmd启动client</span></div><div class="line">&gt; use admin <span class="comment"># 切换到admin数据库下</span></div><div class="line">&gt; db.auth(<span class="string">'usr-admin'</span>,<span class="string">'password'</span>) <span class="comment"># 以usr-admin身份登陆</span></div><div class="line"><span class="comment"># 从test数据库创建用户amy</span></div><div class="line">&gt; use <span class="built_in">test</span></div><div class="line">&gt; db.createUser(&#123; </div><div class="line">	user:<span class="string">"amy"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [</div><div class="line">		&#123;role:<span class="string">"readWrite"</span>,db: <span class="string">"test"</span>&#125;,</div><div class="line">		&#123;role:<span class="string">"dbOwner"</span>,db:<span class="string">"test"</span>&#125;</div><div class="line">	]</div><div class="line">&#125;)</div><div class="line">&gt; show users</div><div class="line">&gt; db.auth(<span class="string">'amy'</span>,<span class="string">'password'</span>)</div><div class="line">&gt; db.test.insert(&#123;<span class="string">'hello'</span>:<span class="string">'amy'</span>&#125;)</div><div class="line">&gt; db.tets.find()</div></pre></td></tr></table></figure></p>
</li>
</ol>
<h3>3. 总结：</h3>
<ul>
<li>建议使用认证登陆，这样能够保证数据库的安全；</li>
<li>用户登陆应当从创建该用户的数据库开始：use the-database；</li>
<li>usr-admin用户可以创建其他用户；</li>
<li>可以删除用户：db.dropUser('usrname')</li>
<li>删除数据库：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; use dbname   </div><div class="line">&gt; db.dropDatabase()</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codeblocks 16.01 中使用C++的nullptr]]></title>
      <url>/2017/04/25/codeblocks%E4%B8%ADnullptr%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2>1.  nullptr头文件:</h2>
<p>std::nullptr_t定义在标准头文件&lt;span style=&quot;color:lightblue&quot;&gt;&lt;cstddef&gt;&lt;/span&gt;中。但实际上在源程序中不包含该头文件仍可以正常使用nullptr_t类型与nullptr对象。</p>
<h2>2.  nullptr的简介：</h2>
<h4>[转自wikipedia]</h4>
<p>nullptr是c++11语言标准用来表示&lt;span style=&quot;color:green&quot;&gt;空指针&lt;/span&gt;的常量值。<br>
在C语言中，空指针的值表示为#define NULL (void *)0。<br>
在C++语言中，由于对语法的类型检查更为严格，因而空指针的值就不能表示为(void *)0;。例如，空指针的值表示为FILE *fp=(void *)0;编译报错。所以至少自C++98开始#define NULL 0，但这会在函数重载时遇到新的困难。eg.</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">void</span> *p)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    foo(<span class="string">'x'</span>,<span class="literal">NULL</span>);<span class="comment">//匹配哪个版本的foo()？</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>C++11开始，定义了空指针的常值为nullptr，解决了上述函数重载问题。
在没有C++11的nullptr时，可以自己实现一个：</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">class</span> <span class="title">nullptr_t</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span>*() <span class="title">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; </div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span> <span class="title">C</span>::*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</div><div class="line">&#125; </div><div class="line"><span class="literal">nullptr</span> = &#123;&#125;;</div></pre></td></tr></table></figure></p>
<h2>3.  设置codeblocks支持nullptr:</h2>
<p>如果程序中包含nullptr，且编译时报错<br>
&lt;span style=&quot;color:red&quot;&gt;error: 'nullptr' was not declared in this scope
&lt;/span&gt;<br>
那么，你的编译器可能使用的还是较早版本的c++语言标准。要让它支持nullptr,可以进行如下设置：<br>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Settings</div><div class="line">  -Compiler</div><div class="line">    -Compiler Settings</div><div class="line">    -Compiler Flags</div><div class="line">        -General:</div><div class="line">          勾上：Have g++ follow the c++11 ISO c++ language standard</div><div class="line">          ok</div></pre></td></tr></table></figure></p>
<p>注意：我的codeblocks版本是：16.01</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[static变量在c++中的使用]]></title>
      <url>/2017/04/24/static%E5%8F%98%E9%87%8F%E5%9C%A8c-%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>今天学习c++ singleton（单例模式）的实现时，发现static关键字扮演者至关重要的角色，趁此机会总结一下：<br>
<a href="#intro">1.static简介</a><br>
<a href="#func">2.static作用</a><br>
<a href="#diff">3.static局部变量和static全局变量的区别</a>
<a href="#example">4.示例</a></p>
<p>&lt;h3 id = &quot;intro&quot;&gt;1. static 简介&lt;/h3&gt;</p>
<p><strong>变量其实只不过是程序可操作的存储区的名称。</strong> C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。
变量的存储区分类：</p>
<ol>
<li>栈：临时变量。由编译器决定何时分配，不需要的时候自动清除的内存。</li>
<li>堆：由 new 分配的内存块。由编程人员指定何时分配，并要delete显式释放。堆可以动态地扩展和收缩。</li>
<li>常量存储区：里面存放的是常量，不允许修改。</li>
<li>静态存储区：全局变量，静态变量。</li>
</ol>
<p>&lt;h3 id = &quot;func&quot;&gt;2. static 作用&lt;/h3&gt;</p>
<p><em>static</em>的作用主要有3点：</p>
<ol>
<li>隐藏：加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。</li>
<li>变量的持久化：静态数据区的变量会在程序刚开始运行时，就完成唯一一次初始化。</li>
<li>默认初始化为0：出生在静态存储区的变量（static,global）,会自动初始化为0x00。tips:将变量弄成全局的可以省去初始化为0的工序。</li>
</ol>
<p>&lt;h3 id = &quot;diff&quot;&gt;3. static局部变量和static全局变量的区别&lt;/h3&gt;
主要区别在于“隐藏”这一点：
加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。<br>
而未加static的全局变量可以在其他文件中访问到。</p>
<p>&lt;h3 id = &quot;example&quot;&gt;4. static变量使用示例&lt;/h3&gt;</p>
<p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">staticLocalVar</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_var = <span class="number">9</span>; <span class="comment">// 静态局部变量</span></div><div class="line">    local_var++;</div><div class="line">    <span class="keyword">return</span> local_var;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> global_var = <span class="number">0</span>;<span class="comment">// 静态全局变量</span></div><div class="line"><span class="keyword">int</span> iszero1; <span class="comment">// 静态存储区的变量会自动初始化为0</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> iszero2;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"global_var : local_var"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(; global_var&lt;<span class="number">10</span>; global_var++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;global_var&lt;&lt;<span class="string">" : "</span>&lt;&lt;staticLocalVar()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> iszero3; <span class="comment">// 非静态存储区的变量会初始化为一个未知的值！！！</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero1:"</span>&lt;&lt;iszero1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero2:"</span>&lt;&lt;iszero2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero3:"</span>&lt;&lt;iszero3&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：
<img src="/images/cpp/static_rst.jpg" alt="运行结果图"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 学习笔记]]></title>
      <url>/2017/04/23/Hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2>1. 说说你的故事</h2>
<h3>为你的hexo blog添加&quot;about&quot;详情页</h3>
<ul>
<li>
<p>新建一个 about 页面
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo new page <span class="string">"about"</span></div></pre></td></tr></table></figure></p>
</li>
<li>
<p>在blog的根目录下会自动生成一个about文件夹，把里面的about.md修改成你想写的信息。</p>
</li>
<li>
<p>简单修改配置文件: 在所用<strong>主题</strong>的_config.yml文件中，将nav中about前面的注释去掉。
例如：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nav:</div><div class="line">    home: .</div><div class="line">    archive: archives</div><div class="line">    about: about</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>刷新一下，即刻呈现！
<img src="/images/hexo/hexo-about.jpg" alt="blog's about page"></p>
</li>
</ul>
<p>&lt;br&gt;
&lt;br&gt;</p>
<h2>2. 把你本地的blog部署到github上</h2>
<ul>
<li>
<p>到github新建一个仓库，仓库名为：YourGithubUsername.github.io <strong>必须为这个名字</strong></p>
</li>
<li>
<p>配置root目录下的_config.yml文件:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:YourGithubUsername/YourGithubUsername.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>在cmd中执行命令：
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo clean</div><div class="line">&gt; hexo generate</div><div class="line">&gt; hexo deploy</div></pre></td></tr></table></figure></p>
</li>
</ul>
<p>就会自动生成.deploy_git文件夹,并推送到github上。<br>
也可以手动推送至github:</p>
<ul>
<li>
<p>在git中cd 进入这个.deploy_git文件夹
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 初次操作</div><div class="line">$ git remote add origin [your repo link] //http or ssh</div><div class="line">$ git push -u origin master </div><div class="line">// 之后推送</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
</li>
<li>
<p>打开浏览器，访问：https://yourgithubusername.github.io/
就可以看到你的博客啦！</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2>Quick Start</h2>
<h3>Create a new post</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3>Run server</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3>Generate static files</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3>Deploy to remote sites</h3>
<p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Secret(秘密)]]></title>
      <url>/2017/04/22/I-love-u/</url>
      <content type="html"><![CDATA[<p>I love you, it's a fact.
2017/04/22</p>
]]></content>
      
        
        <tags>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
