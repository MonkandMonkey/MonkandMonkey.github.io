<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[windows下mysql安装]]></title>
      <url>/2017/05/10/windows%E4%B8%8Bmysql%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ol>
<li>下载 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="external">MySQL Server 5.17.16 Community</a>版:<br> 选择os version (x64)<br> 下载下面的第一个ZIP文件</li>
<li>解压到指定目录（无需安装，解压就行）  </li>
<li>bin路径添加到<strong>Path</strong>环境变量</li>
<li><p>在解压的根目录下，新建配置文件：my.ini   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line"><span class="comment"># 设置mysql客户端默认字符集</span></div><div class="line">default-character-set=utf8</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line"><span class="comment"># 设置3306端口</span></div><div class="line">port = 3306</div><div class="line"><span class="comment"># 设置mysql的安装目录</span></div><div class="line">basedir=path-to\MySQL\install</div><div class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></div><div class="line">datadir=path-to\MySQL\install\sqldata</div><div class="line"><span class="comment"># 允许最大连接数</span></div><div class="line">max_connections=50</div><div class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></div><div class="line">character-set-server=utf8</div><div class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></div><div class="line">default-storage-engine=INNODB</div></pre></td></tr></table></figure>
</li>
<li><p>管理员打开cmd，cd 到MySQL的bin目录下：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; mysqld install</div></pre></td></tr></table></figure>
<p> 安装mysql服务成功！</p>
</li>
<li><p>启动mysqld服务:  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div><div class="line">``` </div><div class="line">发现失败：需要手动初始化data目录：</div><div class="line">```bash</div><div class="line">&gt; mysqld --initialize-insecure</div></pre></td></tr></table></figure>
<p> 再次运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div></pre></td></tr></table></figure>
<p> 成功！</p>
</li>
<li><p>创建用户，设置密码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; mysql -uroot <span class="comment"># root 登陆</span></div><div class="line"><span class="comment"># 创建用户amy，设置密码，授权</span></div><div class="line">&gt; create user <span class="string">'amy'</span>@<span class="string">'localhost'</span> identified by <span class="string">'pwd'</span>;</div><div class="line">&gt; grant all privileges on *.* to amy@<span class="string">'localhost'</span>;</div><div class="line">&gt; <span class="built_in">exit</span> <span class="comment"># 退出当前登陆</span></div><div class="line">&gt; mysql -uamy -p</div><div class="line">&gt; your_pwd <span class="comment"># 输入刚刚为amys设置的密码</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行sql语句:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; show databases;</div></pre></td></tr></table></figure>
<p> 可以看到系统默认的数据库。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[matplotlib绘图笔记]]></title>
      <url>/2017/05/09/matplotlib%E7%BB%98%E5%9B%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>本篇记录使用matplotlib进行简单的数据可视化。</p>
<h3 id="1-matplotlib-与-pyplot"><a href="#1-matplotlib-与-pyplot" class="headerlink" title="1. matplotlib 与 pyplot"></a>1. matplotlib 与 pyplot</h3><p>按照官网的说明：pyplot是matplotlib 的一个module。通常，我们也只是使用这一个module。但是dir(matplotlib)并没有查看到其中包含pyplot，这就让人很好奇了。<br>matplotlib是一个python <em>libary</em>， pyplot 是一个 <em>module</em>。那么，libary和module, 还有package到底是什么呢？   </p>
<ul>
<li>module: a module in python is a .py file that defines one or more function/classes which you intend to reuse in different codes of your program.<br>模块：简单的说就是.py文件，我们会把想要重复使用的代码放到module里。使用时直接import。</li>
<li>package: a directory of Python module(s).<br>包：通常我们把一些相关的module文件组织在一起。dir查看一个package，它一定具有<strong>path</strong>变量，module则没有。</li>
<li>libary: When used in Python, a library is used loosely to describe a collection of the core modules.<br>库：libary这种叫法在Python里并不常见，matplotlib其实是一个package,我们在python 的PyPI - the Python Package Index里可以查到它哦。<br>现在，我们知道了：matplotlib是一个package，而面向用户的功能主要由其中的<em>pyplot</em> modulet提供，因此我们使用时常常这样写：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure>
<h3 id="2-matplotlib-的基本概念"><a href="#2-matplotlib-的基本概念" class="headerlink" title="2. matplotlib 的基本概念"></a>2. matplotlib 的基本概念</h3><ul>
<li>figure: 可以理解成画板上的画布，是最最基础的。</li>
<li>axes:   画布通常可以划分成多个小的区域，我们在不同区域作画，这些小的区域叫做axes。如果不划分，那么整个画布就是一个绘图区域。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一幅图</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 多幅图:分成m*n块子图</span></div><div class="line">fig, axes = plt.subplots(m, n)</div><div class="line">axes[<span class="number">0</span>].plot(x, y)</div><div class="line"><span class="comment"># 划分，并切换到第一个子图</span></div><div class="line">plt.subplot(<span class="number">121</span>)</div><div class="line">plt.plot(x, y)</div></pre></td></tr></table></figure>
<h3 id="3-使用示例："><a href="#3-使用示例：" class="headerlink" title="3. 使用示例："></a>3. 使用示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="string">"""learn.py</span></div><div class="line">Description: Learn to use pyplot</div><div class="line">Date: 2017-05-08</div><div class="line">Author: MonkandMonkey</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> matplotlib.mlab <span class="keyword">as</span> mlab</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a simple pic</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic1</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># evenly sampled time at 200ms intervals</span></div><div class="line">    y = np.arange(<span class="number">0.</span>, <span class="number">10.</span>, <span class="number">1.</span>)</div><div class="line"></div><div class="line">    <span class="comment"># red dashes, blue squares and green triangles</span></div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    <span class="comment"># x axis range, y axis range</span></div><div class="line">    plt.xlim([<span class="number">0</span>, <span class="number">10</span>])</div><div class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1000</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic1: a simple plot with three different markers and colors!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a pic with text</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic2</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.4</span>)</div><div class="line"></div><div class="line">    <span class="comment"># plot dot</span></div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    <span class="comment"># add labels</span></div><div class="line">    plt.xlabel(<span class="string">"no"</span>)</div><div class="line">    plt.ylabel(<span class="string">"num"</span>)</div><div class="line">    <span class="comment"># add legends</span></div><div class="line">    plt.legend([<span class="string">"legend1"</span>, <span class="string">"legend2"</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    <span class="comment"># add tilte</span></div><div class="line">    plt.title(<span class="string">"Pic2: work with text"</span>)</div><div class="line">    print(<span class="string">"Plot pic2: a simple plot with xlabel and ylabel!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># subplots</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic3</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</div><div class="line"></div><div class="line">    plt.figure()</div><div class="line">    <span class="comment"># m, n, no of axes</span></div><div class="line">    plt.subplot(<span class="number">121</span>)</div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    plt.title(<span class="string">"sub1"</span>)</div><div class="line"></div><div class="line">    plt.subplot(<span class="number">122</span>)</div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    plt.title(<span class="string">"sub2"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic3: subplots!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># boxplot</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic4</span><span class="params">()</span>:</span></div><div class="line">    data = [&#123;<span class="string">"a"</span>: <span class="string">"aaa"</span>, <span class="string">"b"</span>: <span class="number">22.3</span>, <span class="string">"c"</span>: <span class="number">20</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"bbb"</span>, <span class="string">"b"</span>: <span class="number">41.2</span>, <span class="string">"c"</span>: <span class="number">2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ccc"</span>, <span class="string">"b"</span>: <span class="number">52.22</span>, <span class="string">"c"</span>: <span class="number">5</span>&#125;,</div><div class="line">            &#123;<span class="string">"a"</span>: <span class="string">"dddd"</span>, <span class="string">"b"</span>: <span class="number">28.9</span>, <span class="string">"c"</span>: <span class="number">19.2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ee"</span>, <span class="string">"b"</span>: <span class="number">28.3</span>, <span class="string">"c"</span>: <span class="number">11</span>&#125;]</div><div class="line">    df = pd.DataFrame(data)</div><div class="line">    df.set_index([<span class="string">"a"</span>])</div><div class="line">    y = df[<span class="string">"b"</span>]</div><div class="line">    plt.boxplot(y)</div><div class="line"></div><div class="line">    <span class="comment"># config</span></div><div class="line">    plt.title(<span class="string">"pic4: box plot"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># histogram</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic5</span><span class="params">()</span>:</span></div><div class="line">    fig, ax = plt.subplots()</div><div class="line">    mu = <span class="number">50</span></div><div class="line">    sigma = <span class="number">2.5</span></div><div class="line">    <span class="comment"># normalization rand float 800*1 dim</span></div><div class="line">    y = mu + sigma * np.random.randn(<span class="number">800</span>)</div><div class="line"></div><div class="line">    n, bins, patches = plt.hist(y, <span class="number">100</span>, normed=<span class="number">1</span>)</div><div class="line">    <span class="comment"># add a 'best fit' line</span></div><div class="line">    y = mlab.normpdf(bins, mu, sigma)</div><div class="line">    ax.plot(bins, y, <span class="string">'--'</span>)</div><div class="line"></div><div class="line">    ax.set_xlabel(<span class="string">'Smarts'</span>)</div><div class="line">    ax.set_ylabel(<span class="string">'Probability density'</span>)</div><div class="line">    ax.set_title(<span class="string">r'Histogram of IQ: $\mu=100$, $\sigma=15$'</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Pic5: histogram!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pic5()</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> plot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 python argparse: 编写友好的命令行接口]]></title>
      <url>/2017/05/07/%E4%BD%BF%E7%94%A8python%20argparse%20%E7%BC%96%E5%86%99%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>Python 的 <em>args 和 kwargs 总是感觉对人不太友好，直到 <em>*argparse</em></em> 模块的出现解救了我！学习 <a href="https://docs.python.org/3/howto/argparse.html" target="_blank" rel="external">argparse Tutorial</a> 的时候又不小心发现了格式化字符串的函数<a href="https://pyformat.info/" target="_blank" rel="external">“str”.format</a>,瞬间，有了一种进城的感觉。<br><img src="http://img.boqiicdn.com/Data/Bbs/Users/132/13229/1322908/img90981381981050.gif" alt="dakang"></p>
<p>argparse模块使得编写用户友好的命令行接口非常容易。程序只需定义好它要求的参数，然后argparse将负责如何从sys.argv中解析出这些参数。argparse模块还会自动生成帮助和使用信息并且当用户赋给程序非法的参数时产生错误信息。</p>
<p>首先准备一下基础知识：<br>arguments即：参数，函数被调用时，必须要知道的一些信息。有时函数需要接收不止一个参数，这么多参数，它如何一一对上号呢？这个对号入座的策略就是Python的参数传递机制。 </p>
<h3 id="策略1-positional-arguments-位置参数"><a href="#策略1-positional-arguments-位置参数" class="headerlink" title="策略1 - positional arguments: 位置参数"></a>策略1 - positional arguments: 位置参数</h3><p>位置参数即：函数和大家声明好了，传给我的第一个参数是梨，第二个参数是枣，第三个参数是西瓜，你们调用我的时候必须按照这个顺序来，出错了我可不负责哦！😝<br>优点：输入简洁，方便<br>缺点：参数多时，准确记住顺序困难，输入量也很大。   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a-b</div><div class="line"><span class="comment"># 调用</span></div><div class="line">subtract(<span class="number">3</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="策略2-keyword-arguments-关键字参数"><a href="#策略2-keyword-arguments-关键字参数" class="headerlink" title="策略2 - keyword arguments: 关键字参数"></a>策略2 - keyword arguments: 关键字参数</h3><p>如果你实在记不住参数的顺序，但你可以记得你参数的名字，那么你可以使用keyword arguments,常常见到Github上别人家的代码充斥着 <em>*args</em> , <em>kwargs</em> 这些天书一般的符号，看得都晕了，但其实，它们虽然写起来比较复杂，但是对于调用者来说却十分方便。使用时，不必记住每个参数的顺序，只需告诉函数我这个参数的名字和值，函数就知道如何对应。如果你觉得输入名字太麻烦，按顺序给参数也可以，兼容位置参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">	<span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<h3 id="策略3-optional-arguments-可选参数"><a href="#策略3-optional-arguments-可选参数" class="headerlink" title="策略3 - optional arguments: 可选参数"></a>策略3 - optional arguments: 可选参数</h3><p>实际上，我们常常只会用到函数的一部分参数，如果想要你的函数对别人友好一些，那就得辛苦一下在代码里多写几行了。如果调用者制定了参数的值，那就使用这个值，如果没有，那就使用默认值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">    <span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_start=<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>) <span class="comment"># 3-2=?</span></div></pre></td></tr></table></figure>
<h3 id="argeparse-使用"><a href="#argeparse-使用" class="headerlink" title="argeparse 使用"></a>argeparse 使用</h3><p>需要注意的一点： argparse 用于编写<strong>用户</strong>交互命令行接口，前面我们说的是函数调用的接口，这一点要清楚。argparse能让你的程序更加友好，更加鲁棒，用户的肆意输入也不会让它崩溃，同时还能提供提示信息，告诉用户如何正确地使用你的程序。<br>下面我们通过栗子来看看，argparse到底有多方便：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" Command-line arg parsing library</span></div><div class="line">    Example Usage:</div><div class="line">    - python learn_argparse.py -h</div><div class="line">    - python learn_argparse.py "hello"</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f -t clean</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="comment"># CPython argparse Example</span></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    parser = argparse.ArgumentParser()</div><div class="line">    <span class="comment"># add arguments</span></div><div class="line">    parser.add_argument(<span class="string">"echo"</span>, help=<span class="string">"echo the string you use here"</span>)</div><div class="line">    parser.add_argument(<span class="string">"-d"</span>, <span class="string">"--double"</span>, help=<span class="string">"double the number you input here"</span>, type=float)</div><div class="line">    parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--format"</span>, help=<span class="string">"format the output"</span>, action=<span class="string">'store_true'</span>)</div><div class="line">    parser.add_argument(<span class="string">"-t"</span>, <span class="string">"--type"</span>, help=<span class="string">"output format type"</span>, choices=[<span class="string">"clean"</span>, <span class="string">"math"</span>, <span class="string">"string"</span>], default=<span class="string">"math"</span>)</div><div class="line">    <span class="comment"># parse arguments</span></div><div class="line">    args = parser.parse_args()</div><div class="line">    print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The string is"</span>, args.echo))</div><div class="line">    <span class="keyword">if</span> args.double:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.format:</div><div class="line">            print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> args.type == <span class="string">"clean"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">elif</span> args.type == <span class="string">"string"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The double of &#123;:&gt;8&#125; is &#123;:&gt;8&#125;"</span>, args.double, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125; * &#123;&#125; = &#123;&#125;"</span>.format(<span class="string">"The exp is"</span>, args.double, args.double, <span class="number">2</span> * args.double))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure></p>
<p>例子中涉及了4种参数的使用方法:</p>
<pre><code>1. echo: 位置参数，必须
2. -d: 加&apos;-&apos;表示可选参数，type限定输入类型
3. -f: 标记参数，action=store_true, 输入代表True,不输入代表False，后面不跟其他值
4. -t: 限定参数的选择范围：[&quot;clean&quot;, &quot;math&quot;, &quot;string&quot;]只能是三者之一； 缺省默认值default=&quot;math&quot;。  
</code></pre><p>实例：<br><img src="/images/python/argparse_rst1.PNG" alt="input"><br><img src="/images/python/argparse_rst2.PNG" alt="output"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> arg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xpath那些事儿]]></title>
      <url>/2017/05/03/xpath%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p>今天让我们来聊聊Xpath！Xpath在web爬虫中使用的非常频繁，它能够帮助我们方便地定位到网页中的某个（些）具体元素。<br>本文的主要目的是记录一些xpath的常用知识，捋一捋学习的的思路。   </p>
<p><strong>提纲:</strong><br><a href="#intro">1.何为Xpath?</a><br><a href="#examples">2.通过例子学习：</a><br><a href="#selenium">3.selenium中使用find_element_by_xpath()定位元素：</a></p>
<p></p><h3 id="intro">1. 何为Xpath?</h3><br>Xpath，从它的姓，我们可以知道它和XML有些关系。XML指可扩展标记语言（EXtensible Markup Language）<br>直观地感受一下XML语言表示出的文档的样子：<br><img src="/images/spider/XML_eg.PNG" alt="XML例子"><br><em><p align="left">图1-XML 示例</p> </em>   <p></p>
<p>可以发现：XML文档层级清晰，父节点包着子节点。当我们要定位到其中的某一个节点时，可以从某个祖先节点开始，沿途经过某些节点到达目标节点，这就构成了一条路径，许许多多这样的路径生发出来，看起来就像一棵倒置的大树，根节点在上，叶子节点在下。</p>
<p>Xpath就是这类路径的表示方法(路径表达式)。Xpath不仅适用于XML文档，html文档它也搞得定！   </p>
<p></p><h3 id="examples">2. 通过例子学习： </h3>  <p></p>
<ul>
<li>Xpath的教程和参考手册：<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="external">W3C school–XPATH</a>里面包含了详细的语法知识和例子。   </li>
<li>推荐Chrome的Xpath Helper扩展，会随当前网页自动加载，输入xpath会自动显示出定位的元素。</li>
<li>如果想知道某个元素的xpath,可以使用chrome debugger的copy xpath功能，那里的xpath表达式简洁易懂。   </li>
</ul>
<p>下面展示了一些有用的例子，以后可能会用到。</p>
<ol>
<li><p>选取 class = ‘u ‘的 div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 table 元素的某个部分, 索引下标从1开始:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/table/tbody/tr/td[2]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 id = ‘login ‘的 div：id是唯一的；//表示可以不从根节点开始搜索，只要满足表达式即可；/表示从根结点开始搜索</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//div[@id=&apos;login&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 id = ‘login ‘的 元素,由于id是唯一的，所以也可以不指明div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//*[@id=&apos;login&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>当满足条件的元素有多个时，只选择最后一个:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/div/span[last()]</div></pre></td></tr></table></figure>
</li>
<li><p>复合谓词 and：选取具有某个子元素的父节点div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and ./div/span[@class=&apos;uu&apos;]]</div></pre></td></tr></table></figure>
</li>
<li><p>函数 not：排除具有某个子元素的父节点div, 轴：following-sibling，可以定义相对于当前结点的节点集合；./：以当前结点为根搜索</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and not(./div/span[@class=&apos;uu&apos;]) and following-sibling::div[@class=&apos;mm&apos;]]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 文本内容包含”hello”的 span:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[contains(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 文本内容以”hello”开头的 span:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[starts-with(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure>
</li>
</ol>
<p></p><h3 id="selenium">3. selenium中使用find_element_by_xpath()定位元素：</h3>  <p></p>
<ol>
<li><p>基本用法：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取div元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/html/body/div[@class='ut']"</span>)</div><div class="line"><span class="comment"># 获取div中的文本</span></div><div class="line">div_content = div_ele.text</div></pre></td></tr></table></figure>
</li>
<li><p>text()函数无法使用   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 试图获取某text()元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/text()[2]"</span>)</div><div class="line"><span class="comment"># 注意！这样会报错，因为find_element_by_xpath()返回的必须是element类型，而不是str!</span></div></pre></td></tr></table></figure>
</li>
<li><p>只能选择class属性为一个的情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/div[@class='u']"</span>)</div></pre></td></tr></table></figure>
<p> 选择具有多个class属性的元素，可以用css selector:</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'ok good nice'</span>&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element(By.CSS_SELECTOR, <span class="string">'li.ok.good.nice'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> xpath </tag>
            
            <tag> spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++单例模式singleton实现]]></title>
      <url>/2017/04/30/c++%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8Fsingleton%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-singleton-单例模式："><a href="#1-singleton-单例模式：" class="headerlink" title="1.singleton 单例模式："></a>1.singleton 单例模式：</h3><p>设计一个类，我们只能生成该类的一个实例。eg. <strong>地球</strong>就是一个singleton，据我们所知，宇宙中目前只有一个<strong>地球</strong>。</p>
<h3 id="2-实现思路："><a href="#2-实现思路：" class="headerlink" title="2.实现思路："></a>2.实现思路：</h3><p>设一个static private变量：instance。每次要生成该类实例时都检查一下这个instance是否为nullptr：是的话就新建一个实例赋给该instance，否的话就直接返回这个实例。</p>
<p><em>为什么instance需要是static的呢？</em></p>
<p>因为instance应该是一个类变量，它需要被整个class共享，static关键字在上一篇<em>笔记</em>中讲过：它可以限制变量的作用域，static变量在类中就会变成类变量，整个类的实例都能访问。如果是实例变量的话，那么每个实例都将拥有分别拥有各自的instance，就无从判断该类是不是已经有一个实例了。<br>eg. 宇宙在创造地球的时候，为了让人类珍惜赖以生存的家园，它决定整个宇宙中只能有一个地球，但是它要创造的星球很多，常常忘记已经创造了哪个，还没创造哪个。所以为了保证只有一个地球，它把<strong>地球</strong>类设计成了单例模式，并且给了这个类一张白纸。有一天它决定要创造地球了，于是就先让地球出示了那张纸，它发现：那张纸是空白的，这说明地球还没有被创造过，所以它就选好了一个位置（内存），并把这个位置记在了白纸上，然后它在这个位置上创造了地球。一个月后，忙碌的宇宙又想起了创造地球这件事，但是它不确定自己是否已经创造过地球了，于是它找到<em>地球</em>类，让它出示那张纸，发现那张纸上已经有一个地址了！地球类对宇宙说：“我已经有一个实例了，它就在这个纸上写的位置上，不信你去瞧瞧！”宇宙按照地址找到了地球，发现它就在那里，于是宇宙就决定进行下一步：改善地球环境。这当然都是后话了。   </p>
<p><em>为什么instance需要是private的呢？</em></p>
<p>因为如果instance是public的，那么任意一个该类的实例都可以修改它的值，比如：创建完一个实例之后，编程人员不小心把instance又置为了nullptr,那么下次就还能够创建新的实例，这是不符合单例模式宗旨的。</p>
<h3 id="3-实现代码："><a href="#3-实现代码：" class="headerlink" title="3.实现代码："></a>3.实现代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* instance;</div><div class="line">    <span class="keyword">int</span> no=<span class="number">0</span>;</div><div class="line">    Singleton()&#123;no++; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Construct!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">    ~Singleton()&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Delete!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="literal">nullptr</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;no&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 初始化instance</span></div><div class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Singleton* single1 = Singleton::getInstance();</div><div class="line">    Singleton* single2 = Singleton::getInstance();</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single1 addr:"</span>&lt;&lt;single1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single2 addr:"</span>&lt;&lt;single2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span>(single1 == single2)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"same"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    single1-&gt;Print();</div><div class="line">    single2-&gt;Print();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果图：<br><img src="/images/cpp/singleton_rst.PNG" alt="运行结果图"><br>我说说我有疑问的的几点：   </p>
<ol>
<li>instance变量为什么是Singleton*类型，不能是Singleton或者Singleton&amp;类型？<br>答：如果是Singleton类型：那就是递归结构了，自身包含自身，没法做到只有一个实例；<br> 如果是Singleton&amp;引用类型，对于引用类型的成员, 只能通过初始化表达式进行初始化。Singleton(Singleton &amp;s):instance(s) { },这还是递归结构嘛，先有鸡还是先有蛋的问题。</li>
<li>instance变量如何初始化呢？<br>答：在类的外面，初始化为nullptr。不能在里面初始化，否则zongshinullptr，总能创建新的实例。</li>
<li>构造函数和析构函数为什么是private的？<br> 答：构造函数是private：构造函数就是生成实例的，如果public则其他实例可以被任意生成；<br>析构函数在实例被销毁时自动调用，析构函数只能有一个, 不能被重载。析构函数可以被显式的调用, 以释放对象中动态申请的内存。如果析构函数是public,则实例将能够被随意销毁，instance变量如果没有了，下次就不能够再生成了。</li>
<li>为什么~Singleton()析构函数没有被调用，而构造函数被调用了？<br> 答：因为new Singleton()所以构造函数被调用了，以instance地址为起点，开辟了一块空间，给instance变量进行了初始化；<br>因为该实例存在于静态存储区，static的变量要程序关闭才会释放。</li>
<li>如何验证这个类真的只有一个实例？<br>答：在本例中，==用来判断两个指针是否相同，即判断两个实例是否在同一个地址。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何安装Mongodb？]]></title>
      <url>/2017/04/30/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Mongodb%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>本文记录了在我的PC上安装Mongodb的过程，以备忘。<br>参考：<a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="external">菜鸟教程-Mongodb</a></p>
<h3 id="1-下载：Mongodb-community-选择适合自己操作系统的版本。"><a href="#1-下载：Mongodb-community-选择适合自己操作系统的版本。" class="headerlink" title="1. 下载：Mongodb community 选择适合自己操作系统的版本。"></a>1. 下载：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">Mongodb community</a> 选择适合自己操作系统的版本。</h3><h3 id="2-安装Mongodb："><a href="#2-安装Mongodb：" class="headerlink" title="2. 安装Mongodb："></a>2. 安装Mongodb：</h3><ol>
<li>安装Mongodb的安装文件，可以选择complete默认安装，也可选择custom自己指定安装的路径和功能。  </li>
<li><p>创建数据目录：我要把数据库的数据目录放在D:盘</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; d:</div><div class="line">&gt; <span class="built_in">cd</span> \your-path-to\Mongodb</div><div class="line">&gt; mkdir db <span class="comment"># 新建一个db文件夹</span></div><div class="line">&gt; mkdir <span class="built_in">log</span> <span class="comment"># 新建一个log文件夹</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加环境变量：在Path环境变量中添加Mongodb安装好的bin路径，就能从命令行直接启动Mongodb而无需切换到安装目录下了。</p>
</li>
<li>设置安全认证登陆：<br>Mongodb默认没有密码，但是为了保证数据的安全性，我们给数据库开启安全性认证。大致流程是这样的：   <ul>
<li>以无认证方式启动mongodb server</li>
<li>client连接上去，创建一个usr-admin(管理用户的用户)</li>
<li>以认证方式启动mongodb server</li>
<li>client以usr-admin身份登陆，再创建一个普通用户amy(只对test数据库有操作权限)</li>
<li>使用amy登陆，向test数据库中插入数据。   </li>
</ul>
</li>
<li><p>创建用户：<br> 以管理员权限打开cmd。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; mongod --dbpath <span class="string">"\your-path-to\Mongodb\db"</span> --logpath    </div><div class="line"><span class="string">"\your-path-to\Mongodb\log\Mongodb.log"</span>   </div><div class="line"><span class="comment"># 以不认证方式启动Mongodb服务，log写在log文件夹下的Mogodb.log文件里，这样控制台窗    </span></div><div class="line"><span class="comment"># 口就不会输出一大堆信息，整个世界都清静了。</span></div></pre></td></tr></table></figure>
<p> <em>创建用户:</em><br> 设置了认证，需要有用户才可以登陆。我们这一步创建两个用户：usr-admin和amy。<br> usr-admin是管理员，amy是普通用户。<br><strong>5.1 创建usr-admin用户：</strong><br> 打开一个新的cmd窗口：       </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动一个client，会连接上刚才启动的server服务。  </span></div><div class="line">&gt; mongo</div></pre></td></tr></table></figure>
<p> <img src="/images/Mongodb/1-connected.PNG" alt="连接成功！" title="client链接server"><br> Mongodb 3.0以后把addUser()函数改成了<a href="https://docs.mongodb.com/manual/reference/method/db.createUser/#create-administrative-user-with-roles" target="_blank" rel="external">createUser()</a>   </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; use admin</div><div class="line">&gt; db.createUser(&#123;</div><div class="line">	user:<span class="string">"usr-admin"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [&#123;</div><div class="line">		role:<span class="string">"userAdminAnyDatabase"</span>,</div><div class="line">		db: <span class="string">"admin"</span></div><div class="line">	&#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p> role（角色）就是权限的集合。在这里，我们赋予了usr-admin用户对于admin数据库 “userAdminAnyDatabase”的权限。<br><strong>5.2 创建普通用户：</strong> </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以认证方式启动mongdb server:</span></div><div class="line">&gt; mongod --dbpath <span class="string">"D:\0-softwares\coding\Mongodb\db"</span> --logpath <span class="string">"D:\0-softwares\coding\Mongodb\log\Mongodb.log"</span> --auth</div><div class="line"><span class="comment"># 新开一个cmd启动client</span></div><div class="line">&gt; use admin <span class="comment"># 切换到admin数据库下</span></div><div class="line">&gt; db.auth(<span class="string">'usr-admin'</span>,<span class="string">'password'</span>) <span class="comment"># 以usr-admin身份登陆</span></div><div class="line"><span class="comment"># 从test数据库创建用户amy</span></div><div class="line">&gt; use <span class="built_in">test</span></div><div class="line">&gt; db.createUser(&#123; </div><div class="line">	user:<span class="string">"amy"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [</div><div class="line">		&#123;role:<span class="string">"readWrite"</span>,db: <span class="string">"test"</span>&#125;,</div><div class="line">		&#123;role:<span class="string">"dbOwner"</span>,db:<span class="string">"test"</span>&#125;</div><div class="line">	]</div><div class="line">&#125;)</div><div class="line">&gt; show users</div><div class="line">&gt; db.auth(<span class="string">'amy'</span>,<span class="string">'password'</span>)</div><div class="line">&gt; db.test.insert(&#123;<span class="string">'hello'</span>:<span class="string">'amy'</span>&#125;)</div><div class="line">&gt; db.tets.find()</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h3><ul>
<li>建议使用认证登陆，这样能够保证数据库的安全；</li>
<li>用户登陆应当从创建该用户的数据库开始：use the-database；</li>
<li>usr-admin用户可以创建其他用户；</li>
<li>可以删除用户：db.dropUser(‘usrname’)</li>
<li>删除数据库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; use dbname   </div><div class="line">&gt; db.dropDatabase()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codeblocks 16.01 中使用C++的nullptr]]></title>
      <url>/2017/04/25/codeblocks%E4%B8%ADnullptr%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-nullptr头文件"><a href="#1-nullptr头文件" class="headerlink" title="1.  nullptr头文件:"></a>1.  nullptr头文件:</h2><p>std::nullptr_t定义在标准头文件<span style="color:lightblue"><cstddef></cstddef></span>中。但实际上在源程序中不包含该头文件仍可以正常使用nullptr_t类型与nullptr对象。 </p>
<h2 id="2-nullptr的简介："><a href="#2-nullptr的简介：" class="headerlink" title="2.  nullptr的简介："></a>2.  nullptr的简介：</h2><h4 id="转自wikipedia"><a href="#转自wikipedia" class="headerlink" title="[转自wikipedia]"></a>[转自wikipedia]</h4><p>nullptr是c++11语言标准用来表示<span style="color:green">空指针</span>的常量值。<br>在C语言中，空指针的值表示为#define NULL (void <em>)0。<br>在C++语言中，由于对语法的类型检查更为严格，因而空指针的值就不能表示为(void </em>)0;。例如，空指针的值表示为FILE <em>fp=(void </em>)0;编译报错。所以至少自C++98开始#define NULL 0，但这会在函数重载时遇到新的困难。eg.   </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">void</span> *p)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    foo(<span class="string">'x'</span>,<span class="literal">NULL</span>);<span class="comment">//匹配哪个版本的foo()？</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>C++11开始，定义了空指针的常值为nullptr，解决了上述函数重载问题。<br>在没有C++11的nullptr时，可以自己实现一个：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">class</span> <span class="title">nullptr_t</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span>*() <span class="title">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; </div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span> <span class="title">C</span>::*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</div><div class="line">&#125; </div><div class="line"><span class="literal">nullptr</span> = &#123;&#125;;</div></pre></td></tr></table></figure>
<h2 id="3-设置codeblocks支持nullptr"><a href="#3-设置codeblocks支持nullptr" class="headerlink" title="3.  设置codeblocks支持nullptr:"></a>3.  设置codeblocks支持nullptr:</h2><p>如果程序中包含nullptr，且编译时报错<br><span style="color:red">error: ‘nullptr’ was not declared in this scope<br></span><br>那么，你的编译器可能使用的还是较早版本的c++语言标准。要让它支持nullptr,可以进行如下设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Settings</div><div class="line">  -Compiler</div><div class="line">    -Compiler Settings</div><div class="line">    -Compiler Flags</div><div class="line">        -General:</div><div class="line">          勾上：Have g++ follow the c++11 ISO c++ language standard</div><div class="line">          ok</div></pre></td></tr></table></figure></p>
<p>注意：我的codeblocks版本是：16.01</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[static变量在c++中的使用]]></title>
      <url>/2017/04/24/static%E5%8F%98%E9%87%8F%E5%9C%A8c-%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>今天学习c++ singleton（单例模式）的实现时，发现static关键字扮演者至关重要的角色，趁此机会总结一下：<br><a href="#intro">1.static简介</a><br><a href="#func">2.static作用</a><br><a href="#diff">3.static局部变量和static全局变量的区别</a><br><a href="#example">4.示例</a> </p>
<h3 id="intro">1. static 简介</h3> 

<p><strong>变量其实只不过是程序可操作的存储区的名称。</strong> C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。<br>变量的存储区分类：   </p>
<ol>
<li>栈：临时变量。由编译器决定何时分配，不需要的时候自动清除的内存。</li>
<li>堆：由 new 分配的内存块。由编程人员指定何时分配，并要delete显式释放。堆可以动态地扩展和收缩。</li>
<li>常量存储区：里面存放的是常量，不允许修改。</li>
<li>静态存储区：全局变量，静态变量。</li>
</ol>
<h3 id="func">2. static 作用</h3>

<p><em>static</em>的作用主要有3点：</p>
<ol>
<li>隐藏：加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。</li>
<li>变量的持久化：静态数据区的变量会在程序刚开始运行时，就完成唯一一次初始化。</li>
<li>默认初始化为0：出生在静态存储区的变量（static,global）,会自动初始化为0x00。tips:将变量弄成全局的可以省去初始化为0的工序。</li>
</ol>
<h3 id="diff">3. static局部变量和static全局变量的区别</h3><br>主要区别在于“隐藏”这一点：<br>加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。<br>而未加static的全局变量可以在其他文件中访问到。<br><br><h3 id="example">4. static变量使用示例</h3>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">staticLocalVar</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_var = <span class="number">9</span>; <span class="comment">// 静态局部变量</span></div><div class="line">    local_var++;</div><div class="line">    <span class="keyword">return</span> local_var;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> global_var = <span class="number">0</span>;<span class="comment">// 静态全局变量</span></div><div class="line"><span class="keyword">int</span> iszero1; <span class="comment">// 静态存储区的变量会自动初始化为0</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> iszero2;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"global_var : local_var"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(; global_var&lt;<span class="number">10</span>; global_var++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;global_var&lt;&lt;<span class="string">" : "</span>&lt;&lt;staticLocalVar()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> iszero3; <span class="comment">// 非静态存储区的变量会初始化为一个未知的值！！！</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero1:"</span>&lt;&lt;iszero1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero2:"</span>&lt;&lt;iszero2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero3:"</span>&lt;&lt;iszero3&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/images/cpp/static_rst.jpg" alt="运行结果图"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 学习笔记]]></title>
      <url>/2017/04/23/Hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-说说你的故事"><a href="#1-说说你的故事" class="headerlink" title="1. 说说你的故事"></a>1. 说说你的故事</h2><h3 id="为你的hexo-blog添加”about”详情页"><a href="#为你的hexo-blog添加”about”详情页" class="headerlink" title="为你的hexo blog添加”about”详情页"></a>为你的hexo blog添加”about”详情页</h3><ul>
<li><p>新建一个 about 页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo new page <span class="string">"about"</span></div></pre></td></tr></table></figure>
</li>
<li><p>在blog的根目录下会自动生成一个about文件夹，把里面的about.md修改成你想写的信息。</p>
</li>
<li><p>简单修改配置文件: 在所用<strong>主题</strong>的_config.yml文件中，将nav中about前面的注释去掉。<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nav:</div><div class="line">    home: .</div><div class="line">    archive: archives</div><div class="line">    about: about</div></pre></td></tr></table></figure>
</li>
<li><p>刷新一下，即刻呈现！<br><img src="/images/hexo/hexo-about.jpg" alt="blog&#39;s about page"></p>
</li>
</ul>
<p><br><br><br></p>
<h2 id="2-把你本地的blog部署到github上"><a href="#2-把你本地的blog部署到github上" class="headerlink" title="2. 把你本地的blog部署到github上"></a>2. 把你本地的blog部署到github上</h2><ul>
<li>到github新建一个仓库，仓库名为：YourGithubUsername.github.io <strong>必须为这个名字</strong></li>
<li><p>配置root目录下的_config.yml文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:YourGithubUsername/YourGithubUsername.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>在cmd中执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo clean</div><div class="line">&gt; hexo generate</div><div class="line">&gt; hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>就会自动生成.deploy_git文件夹,并推送到github上。<br>也可以手动推送至github:</p>
<ul>
<li><p>在git中cd 进入这个.deploy_git文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 初次操作</div><div class="line">$ git remote add origin [your repo link] //http or ssh</div><div class="line">$ git push -u origin master </div><div class="line">// 之后推送</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器，访问：<a href="https://yourgithubusername.github.io/" target="_blank" rel="external">https://yourgithubusername.github.io/</a><br>就可以看到你的博客啦！</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Secret(秘密)]]></title>
      <url>/2017/04/22/I-love-u/</url>
      <content type="html"><![CDATA[<p>I love you, it’s a fact.<br>2017/04/22</p>
]]></content>
      
        
        <tags>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
