<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Attention Visualization in Text Classification]]></title>
      <url>/2019/04/25/Attention-Visualization-in-Text-Classification/</url>
      <content type="html"><![CDATA[<p>This post will give an brief introduction of <code>attention</code> mechanism in seq2seq model and then show you how does the attention work in text classification. Finally we visualize the <code>attention weights</code> in a RNN based <code>text classification</code> model. The model is implemented in <code>Keras</code>.</p>
<h2 id="1-About-attention"><a href="#1-About-attention" class="headerlink" title="1. About attention"></a>1. About attention</h2><p>Attention first comes from the way human beings observing things. Our brains use visual attention mechanism to process the visual information we received. When observing a picture, we first have an quick overview, and then our attention focus on several particular parts to gain the information we want further.<br>Except for the computer vision application, attention mechanism is useful in many NLP tasks too. Such as <code>machine translation</code> and <code>text classification</code>. You may be familiar with the model <a href="https://arxiv.org/pdf/1409.0473.pdf" target="_blank" rel="noopener">seq2seq + attention</a> which is wellknown in machine translation, which is shown below.<br><img src="/images/tensorflow/seq2seq-Attention.jpg" width="50%" height="50%"><br>The attention mechanism’s expression are as follows:<br><img src="/images/tensorflow/attn-function-1.jpg" width="50%" height="50%"><br><img src="/images/tensorflow/attn-function-2.jpg" width="25%" height="25%"></p>
<h2 id="2-Attention-in-Text-Classification"><a href="#2-Attention-in-Text-Classification" class="headerlink" title="2. Attention in Text Classification"></a>2. Attention in Text Classification</h2><p>$$ e_j = a(h_j) $$<br><img src="/images/tensorflow/attn-function-3.jpg" width="50%" height="50%"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> nlp </tag>
            
            <tag> keras </tag>
            
            <tag> attn </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow Template]]></title>
      <url>/2019/02/19/Tensorflow-template/</url>
      <content type="html"><![CDATA[<p>As we all know, working with tensorflow framework usually consists of 2 steps:</p>
<ol>
<li>Build the computational graph.</li>
<li>Execute the graph you built.</li>
</ol>
<p>This blog provides a general tensorflow code template. Including following features:</p>
<ol>
<li>Use low-level tensorflow APIs.</li>
<li>Use tensorflow’s Dataset.</li>
<li>Encapsulate the model into a class.</li>
<li>Put all model parameters together.</li>
<li>Support tensorboard visulization: graph and loss histogram.</li>
<li>Support save and restore params from checkpoints.</li>
</ol>
<p>Reference: Stanford <a href="https://web.stanford.edu/class/cs20si/" target="_blank" rel="noopener">CS20</a> lecture.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="string">""""</span></div><div class="line">File: cnn_mnist_class.py</div><div class="line">Date: 2019-01-31 11:30</div><div class="line">Author: Amy</div><div class="line"></div><div class="line">Use tensorflow to implement cnn.</div><div class="line">Dataset: minist (train/test)</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> utils</div><div class="line"></div><div class="line">os.environ[<span class="string">"TF_CPP_MIN_LOG_LEVEL"</span>] = <span class="string">"2"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConvNet</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.batch_size = <span class="number">4</span></div><div class="line">        self.learning_rate = <span class="number">0.001</span></div><div class="line">        self.n_epochs = <span class="number">5</span></div><div class="line">        self.n_train = <span class="number">55000</span></div><div class="line">        self.n_valid = <span class="number">5000</span></div><div class="line">        self.n_test = <span class="number">10000</span></div><div class="line"></div><div class="line">        self.train_init, self.valid_init, self.test_init = <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">        self.x, self.y_true, self.y_pred = <span class="keyword">None</span>, <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">        self.logits = <span class="keyword">None</span></div><div class="line">        self.n_correct = <span class="keyword">None</span></div><div class="line">        self.loss = <span class="keyword">None</span></div><div class="line">        self.opt = <span class="keyword">None</span></div><div class="line"></div><div class="line">        self.training = <span class="keyword">False</span></div><div class="line">        self.summary_loss, self.summary_acc = <span class="keyword">None</span>, <span class="keyword">None</span></div><div class="line">        self.global_step = tf.get_variable(<span class="string">"global_step"</span>, initializer=tf.constant(<span class="number">0</span>), trainable=<span class="keyword">False</span>)</div><div class="line"></div><div class="line">    <span class="string">""" Build the graph. """</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">conv_relu</span><span class="params">(inputs, n_filters, filter_size, stride, padding, scope_name)</span>:</span></div><div class="line">        <span class="string">""" Conv - Relu layer. """</span></div><div class="line">        <span class="keyword">with</span> tf.variable_scope(scope_name, reuse=tf.AUTO_REUSE) <span class="keyword">as</span> scope:</div><div class="line">            in_channels = inputs.shape[<span class="number">-1</span>]</div><div class="line">            filter_wgts = tf.get_variable(<span class="string">"filter_weight"</span>,</div><div class="line">                     shape=[filter_size, filter_size, in_channels, n_filters],</div><div class="line">                     initializer=tf.truncated_normal_initializer())</div><div class="line">            filter_biases = tf.get_variable(<span class="string">"filter_biases"</span>,</div><div class="line">                                             shape=[n_filters],</div><div class="line">                                             initializer=tf.random_normal_initializer())</div><div class="line">            conv = tf.nn.conv2d(inputs,</div><div class="line">                                filter_wgts,</div><div class="line">                                strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>],</div><div class="line">                                padding=padding)</div><div class="line">            <span class="keyword">return</span> tf.nn.relu(conv + filter_biases, name=scope.name)</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_pooling</span><span class="params">(inputs, pool_size, stride, padding=<span class="string">"VALID"</span>, scope_name=<span class="string">"pool"</span>)</span>:</span></div><div class="line">        <span class="string">""" Max Pooling layer. """</span></div><div class="line">        <span class="keyword">with</span> tf.variable_scope(scope_name, reuse=tf.AUTO_REUSE) <span class="keyword">as</span> scope:</div><div class="line">            pool = tf.nn.max_pool(inputs,</div><div class="line">                                  ksize=[<span class="number">1</span>, pool_size, pool_size, <span class="number">1</span>],</div><div class="line">                                  strides=[<span class="number">1</span>, stride, stride, <span class="number">1</span>],</div><div class="line">                                  padding=padding)</div><div class="line">        <span class="keyword">return</span> pool</div><div class="line"></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fully_connected</span><span class="params">(inputs, out_dim, scope_name=<span class="string">"fc"</span>)</span>:</span></div><div class="line">        <span class="string">""" Fully connected layer.</span></div><div class="line">        inputs is a streched out 1-d Tensor.</div><div class="line">        """</div><div class="line">        in_dim = inputs.shape[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">with</span> tf.variable_scope(scope_name, reuse=tf.AUTO_REUSE) <span class="keyword">as</span> scope:</div><div class="line">            wgts = tf.get_variable(<span class="string">"fc_weight"</span>,</div><div class="line">                                shape=[in_dim, out_dim],</div><div class="line">                                initializer=tf.random_normal_initializer())</div><div class="line">            biases = tf.get_variable(<span class="string">"fc_bais"</span>,</div><div class="line">                                  shape=[out_dim],</div><div class="line">                                  initializer=tf.zeros_initializer())</div><div class="line">            out = tf.matmul(inputs, wgts) + biases</div><div class="line">        <span class="keyword">return</span> out</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_import_data</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Prepare data. """</span></div><div class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"data_scope"</span>):</div><div class="line">            <span class="comment"># step 1.1: prepare data</span></div><div class="line">            mnist_folder = <span class="string">"data/mnist"</span></div><div class="line">            utils.download_mnist(mnist_folder)</div><div class="line">            train, valid, test = utils.read_mnist(mnist_folder, flatten=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">            <span class="comment"># step 1.2: build dataset and iterators</span></div><div class="line">            train_data = tf.data.Dataset.from_tensor_slices(train)</div><div class="line">            train_data = train_data.shuffle(buffer_size=<span class="number">10000</span>)</div><div class="line">            train_data = train_data.batch(self.batch_size)</div><div class="line"></div><div class="line">            valid_data = tf.data.Dataset.from_tensor_slices(valid)</div><div class="line">            valid_data = valid_data.batch(self.batch_size)</div><div class="line"></div><div class="line">            test_data = tf.data.Dataset.from_tensor_slices(test)</div><div class="line">            test_data = test_data.batch(self.batch_size)</div><div class="line"></div><div class="line">            iterator = tf.data.Iterator.from_structure(train_data.output_types, \</div><div class="line">                                                       train_data.output_shapes)</div><div class="line"></div><div class="line">            self.train_init = iterator.make_initializer(train_data)</div><div class="line">            self.valid_init = iterator.make_initializer(valid_data)</div><div class="line">            self.test_init = iterator.make_initializer(test_data)</div><div class="line"></div><div class="line">            <span class="comment"># step 2: create X, y</span></div><div class="line">            self.x, self.y_true = iterator.get_next()</div><div class="line">            self.x = tf.reshape(self.x, [<span class="number">-1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])</div><div class="line">            print(<span class="string">"x shape: &#123;&#125;, y shape: &#123;&#125;"</span>.format(self.x.shape, self.y_true.shape))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inference</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Model structure. """</span></div><div class="line">        <span class="comment"># step 3, 4: build model</span></div><div class="line">        conv1 = self.conv_relu(inputs=self.x,</div><div class="line">                          n_filters=<span class="number">32</span>,</div><div class="line">                          filter_size=<span class="number">5</span>,</div><div class="line">                          stride=<span class="number">1</span>,</div><div class="line">                          padding=<span class="string">"SAME"</span>,</div><div class="line">                          scope_name=<span class="string">"conv1"</span>)</div><div class="line">        pool1 = self.max_pooling(inputs=conv1,</div><div class="line">                            pool_size=<span class="number">2</span>,</div><div class="line">                            stride=<span class="number">2</span>,</div><div class="line">                            padding=<span class="string">"VALID"</span>,</div><div class="line">                            scope_name=<span class="string">"pool1"</span>)</div><div class="line"></div><div class="line">        conv2 = self.conv_relu(inputs=pool1,</div><div class="line">                          n_filters=<span class="number">64</span>,</div><div class="line">                          filter_size=<span class="number">5</span>,</div><div class="line">                          stride=<span class="number">1</span>,</div><div class="line">                          padding=<span class="string">"SAME"</span>,</div><div class="line">                          scope_name=<span class="string">"conv2"</span>)</div><div class="line">        pool2 = self.max_pooling(inputs=conv2,</div><div class="line">                            pool_size=<span class="number">2</span>,</div><div class="line">                            stride=<span class="number">2</span>,</div><div class="line">                            padding=<span class="string">"VALID"</span>,</div><div class="line">                            scope_name=<span class="string">"pool2"</span>)</div><div class="line"></div><div class="line">        in_dim = pool2.shape[<span class="number">1</span>] * pool2.shape[<span class="number">2</span>] * pool2.shape[<span class="number">3</span>]</div><div class="line">        pool2 = tf.reshape(pool2, [<span class="number">-1</span>, in_dim])</div><div class="line">        fc1 = self.fully_connected(inputs=pool2,</div><div class="line">                              out_dim=<span class="number">1024</span>,</div><div class="line">                              scope_name=<span class="string">"fc1"</span>)</div><div class="line"></div><div class="line">        <span class="comment"># use dropout in train stage</span></div><div class="line">        <span class="keyword">if</span> self.training:</div><div class="line">            dropout = tf.nn.dropout(tf.nn.relu(fc1),</div><div class="line">                                    keep_prob=<span class="number">0.75</span>,</div><div class="line">                                    name=<span class="string">"relu_dropout"</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            dropout = tf.nn.dropout(tf.nn.relu(fc1),</div><div class="line">                                    keep_prob=<span class="number">1.0</span>,</div><div class="line">                                    name=<span class="string">"relu_dropout"</span>)</div><div class="line"></div><div class="line"></div><div class="line">        self.logits = self.fully_connected(inputs=dropout,</div><div class="line">                                 out_dim=<span class="number">10</span>,</div><div class="line">                                 scope_name=<span class="string">"logits"</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_loss</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Define loss function. """</span></div><div class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"loss_scope"</span>):</div><div class="line">            entropy = tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.logits,</div><div class="line">                                                                 labels=self.y_true,</div><div class="line">                                                                 name=<span class="string">"entropy"</span>)</div><div class="line">            self.loss = tf.reduce_mean(entropy, name=<span class="string">"loss"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_optimize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Optimization. """</span></div><div class="line">        <span class="comment"># step 6: optimizer</span></div><div class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"optimizer_scope"</span>):</div><div class="line">            self.opt = tf.train.AdamOptimizer(learning_rate=self.learning_rate) \</div><div class="line">                                              .minimize(self.loss, global_step=self.global_step)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_eval</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Evaluation. """</span></div><div class="line">        <span class="comment"># step 7: evaluate</span></div><div class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"eval_scope"</span>):</div><div class="line">            self.y_pred = tf.nn.softmax(self.logits)</div><div class="line">            correct_preds = tf.equal(tf.argmax(self.y_pred, axis=<span class="number">1</span>), tf.argmax(self.y_true, axis=<span class="number">1</span>))</div><div class="line">            self.n_correct = tf.reduce_sum(tf.cast(correct_preds, tf.float32))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_summarize</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Add summary. """</span></div><div class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">"summary_scope"</span>):</div><div class="line">            self.summary_loss = tf.summary.scalar(<span class="string">"loss"</span>, self.loss)</div><div class="line">            self.summary_acc = tf.summary.scalar(<span class="string">"acc"</span>, self.n_correct / self.batch_size)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build_graph</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">""" Build computational graph. """</span></div><div class="line">        self._import_data()</div><div class="line">        self.inference()</div><div class="line">        self._loss()</div><div class="line">        self._optimize()</div><div class="line">        self._eval()</div><div class="line">        self._summarize()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eval_once</span><span class="params">(self, sess, init, n_eval)</span>:</span></div><div class="line">        <span class="string">""" Eval once. """</span></div><div class="line">        self.training = <span class="keyword">False</span></div><div class="line">        sess.run(init)</div><div class="line">        total_correct = <span class="number">0</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                n_c = sess.run(self.n_correct)</div><div class="line">                total_correct += n_c</div><div class="line">        <span class="keyword">except</span> tf.errors.OutOfRangeError:</div><div class="line">            <span class="keyword">pass</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> total_correct / (n_eval * <span class="number">1.0</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(self, sess)</span>:</span></div><div class="line">        <span class="string">""" Training. """</span></div><div class="line">        saver = tf.train.Saver()</div><div class="line">        initial_step = <span class="number">0</span></div><div class="line">        utils.safe_mkdir(<span class="string">"checkpointrs"</span>)</div><div class="line">        ckpt = tf.train.get_checkpoint_state(os.path.dirname(<span class="string">"checkpoints/checkpoint"</span>))</div><div class="line">        <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</div><div class="line">            print(<span class="string">"Restore from checkpoints!"</span>)</div><div class="line">            saver.restore(sess, ckpt.model_checkpoint_path)</div><div class="line"></div><div class="line">        writer = tf.summary.FileWriter(<span class="string">"./graphs/my_convnet/lr_&#123;&#125;batch_&#123;&#125;"</span>.\</div><div class="line">                                        format(self.learning_rate, self.batch_size), sess.graph)</div><div class="line">        initial_step = self.global_step.eval()</div><div class="line">        <span class="comment"># step 8.1: train model</span></div><div class="line">        step = initial_step</div><div class="line"></div><div class="line">        <span class="keyword">for</span> epo <span class="keyword">in</span> range(<span class="number">1</span>, self.n_epochs + <span class="number">1</span>):</div><div class="line">            self.training = <span class="keyword">True</span></div><div class="line">            sess.run(self.train_init)</div><div class="line">            total_loss = <span class="number">0.</span></div><div class="line">            total_batch = <span class="number">0</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">                    _, loss_val, summary_loss = sess.run([self.opt, self.loss, self.summary_loss])</div><div class="line">                    writer.add_summary(summary_loss, global_step=step)</div><div class="line">                    total_loss += loss_val</div><div class="line">                    total_batch += <span class="number">1</span></div><div class="line">                    <span class="keyword">if</span> (step + <span class="number">1</span>) % <span class="number">1000</span> == <span class="number">0</span>:</div><div class="line">                        print(<span class="string">"step [&#123;&#125;] loss: &#123;:.4f&#125;"</span>.format(step + <span class="number">1</span>, total_loss / (total_batch * <span class="number">1.0</span>)))</div><div class="line">                        saver.save(sess, <span class="string">"checkpoints/my_convnet"</span>, step)</div><div class="line">                    step += <span class="number">1</span></div><div class="line">            <span class="keyword">except</span> tf.errors.OutOfRangeError:</div><div class="line">                print(<span class="string">"Data out of range!"</span>)</div><div class="line">                sess.run(self.train_init)</div><div class="line">                <span class="keyword">pass</span></div><div class="line">            summary_acc = sess.run(self.summary_acc)</div><div class="line">            writer.add_summary(summary_acc, global_step=step)</div><div class="line">            <span class="keyword">if</span> epo % <span class="number">1</span> == <span class="number">0</span>:</div><div class="line">                <span class="comment"># step 8.2: validate model</span></div><div class="line">                acc = self.eval_once(sess, self.valid_init, self.n_valid)</div><div class="line">                print(<span class="string">"epoch: &#123;:2d&#125; valid acc: &#123;:.4f&#125;"</span>.format(epo, acc))</div><div class="line"></div><div class="line">        writer.close()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self, sess)</span>:</span></div><div class="line">        <span class="string">""" Testing. """</span></div><div class="line">        <span class="comment"># step 9. test model</span></div><div class="line">        acc = self.eval_once(sess, self.test_init, self.n_test)</div><div class="line">        print(<span class="string">"Test acc: &#123;:.4f&#125;"</span>.format(acc))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    model = ConvNet()</div><div class="line"></div><div class="line">    <span class="comment"># build graph</span></div><div class="line">    model.build_graph()</div><div class="line">    <span class="comment"># run graph</span></div><div class="line">    <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</div><div class="line">        sess.run(tf.global_variables_initializer())</div><div class="line">        <span class="comment"># train model</span></div><div class="line">        model.train(sess)</div><div class="line">        <span class="comment"># test model</span></div><div class="line">        model.test(sess)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> tensorflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3-Way Qucik Sort]]></title>
      <url>/2018/11/10/3-Way-Qucik-Sort/</url>
      <content type="html"><![CDATA[<p>In my last <a href="https://monkandmonkey.github.io/2018/08/07/A-Clean-Version-of-Quick-Sort/" target="_blank" rel="noopener">blog</a>, a <code>clean version of quick sort</code> was introduced.</p>
<h2 id="Time-Complexity-of-Quick-Sort"><a href="#Time-Complexity-of-Quick-Sort" class="headerlink" title="Time Complexity of Quick Sort"></a>Time Complexity of Quick Sort</h2><p>Quick sort’s <code>average</code> time complexity is $O(nlogn)$, <code>worst</code> time complexity is $O(n^2)$.</p>
<p>Average case: A list of random numbers. After each partition the array was splited into two subarrays which have similar lengths. Each partition costs $O(n)$ and we only need $logn$ such partitions. So the time complexity is $O(nlogn)$.</p>
<p>Worst case 1: A sorted list. Each partition can split the list into two subarrays: whose lengths varys a lot(e.g. len_part1 = 1, len_part2 = n - 2). So we need nearly n such partitions. So the time complexity is $O(n^2)$.</p>
<p>Under the worst cases, the quick sort algorithm become not that quick. One solution is choosing a pivot randomly instead of always choosing the first or last element as pivot.</p>
<p>Worst case 2: A list which contains many duplicates. My clean version of quick sort will move all nums which is smaller than pivot to its left and all nums which is larger than pivot to its right part. There is an example for illustration.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      *</div><div class="line">arr: [<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line">After <span class="number">1</span> partition:</div><div class="line">                     *</div><div class="line">par: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">*: pivot<span class="string">'s position</span></div></pre></td></tr></table></figure>
<p>In this example, there are many 3s. So that each partition will not always generate two similar lengths subarrays. Which may also causes trouble like worst case 1.</p>
<p>This blog will introduce a 3-way partition to solve improve worst case 2. The main idea is to split array into 3 parts: left part consists of nums &lt; pivot, middle part consists of nums == pivot and right part consists of nums &gt; pivot.</p>
<h2 id="Dutch-National-Flag-Problem"><a href="#Dutch-National-Flag-Problem" class="headerlink" title="Dutch National Flag Problem"></a>Dutch National Flag Problem</h2><p>The 3-way partition is actually the same problem with <a href="https://monkandmonkey.github.io/2018/08/07/A-Clean-Version-of-Quick-Sort" target="_blank" rel="noopener">Dutch National Flag Problem</a>,  This problem can be described as: given n intergers which are all in 0, 1, or 2. Sort them so that all 0s occur firstly, 1s occur secondly, and 2s occur lastly.</p>
<p>Note: If you want to practice, <a href="https://leetcode.com/problems/sort-colors/description/" target="_blank" rel="noopener">Leetcode link</a> is here. An simpler version of this problem is <a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="noopener">Move Zeros</a>, which contains only 2 colors.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">arr:</div><div class="line">[1, 0, 0, 1, 1, 2, 0, 2]</div><div class="line">After sort:</div><div class="line">[0, 0, 0, 1, 1, 1, 2, 2]</div></pre></td></tr></table></figure>
<p>If we move all 0s ahead, all 2s behind, then all 1s will automatically at mid. So the problem is solved.<br>Suppose we have two pointers: <em>low</em> and <em>high</em>, low points to current position that we can safely place a 0, high points to current position that we can safely place an 2. For each num, if it’s 0, we swap it with arr[low]; if it is 2, we swap it with arr[high]; if it is 1, nothing to do, we just move to the next num.</p>
<p>Below is the c++ code for this Dutch National Flag problem.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dutch National Flag Problem</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sortColors</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ln = nums.size();</div><div class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = ln - <span class="number">1</span>, mid = <span class="number">0</span>;</div><div class="line">    <span class="comment">// low: put next 0, high: put next 2</span></div><div class="line">    <span class="comment">// we don't need to handle 1</span></div><div class="line">    <span class="keyword">while</span> (mid &lt;= high) &#123;</div><div class="line">        <span class="keyword">if</span> (nums[mid] == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mid != low) &#123;</div><div class="line">                swap(nums[mid], nums[low]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mid++;</div><div class="line">            &#125;</div><div class="line">            low++;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mid != high) &#123;</div><div class="line">                swap(nums[mid], nums[high]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mid++;</div><div class="line">            &#125;</div><div class="line">            high--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mid++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Way-Quick-Sort"><a href="#3-Way-Quick-Sort" class="headerlink" title="3-Way Quick Sort"></a>3-Way Quick Sort</h2><p>Similar to Dutch National Flag problem, the 3-way partition takes nums &lt; piovt as 0s, nums &gt; pivot as 2s, and nums == pivot as 1s. Below is the quick sort using 3-way partition.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 3-Way Quick Sort</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> x : vec) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (s &gt;= e) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> low = s, high = e - <span class="number">1</span>, mid = s;</div><div class="line">    <span class="keyword">int</span> pivot = arr[s];</div><div class="line">    <span class="keyword">while</span> (mid &lt;= high) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[mid] &lt; pivot) &#123;</div><div class="line">            <span class="keyword">if</span> (mid != low) &#123;</div><div class="line">                swap(arr[mid], arr[low]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mid++;</div><div class="line">            &#125;</div><div class="line">            low++;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; pivot) &#123;</div><div class="line">            <span class="keyword">if</span> (mid != high) &#123;</div><div class="line">                swap(arr[mid], arr[high]);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                mid++;</div><div class="line">            &#125;</div><div class="line">            high--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            mid++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    quick_sort(arr, s, low);</div><div class="line">    quick_sort(arr, high + <span class="number">1</span>, e);</div><div class="line"></div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>,<span class="number">5</span>&#125;;</div><div class="line">    output(arr);</div><div class="line">    quick_sort(arr, <span class="number">0</span>, arr.size());</div><div class="line">    output(arr);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> cpp </tag>
            
            <tag> alg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A Clean Version of Quick Sort]]></title>
      <url>/2018/08/07/A-Clean-Version-of-Quick-Sort/</url>
      <content type="html"><![CDATA[<p>The core idea of quick sort is choosing a pivot first, then moving those smaller than pivot to its left part and those larger than pivot to its right (<strong>partition</strong>). Each time we put the pivot at the correct position, so we only need to repeat this procedure to pivot’s left part and right part. This is <code>divide and conquer</code>, which breaks up a larger problem into smaller ones.</p>
<p>My quick sort code before is very ugly and complex, because there are two while loops inside a while loop ! What’s more, I have to think it over and over again each time I use it, since I could’t memorize it. So I decided to make a cleaner version of it.  Here is my thinking sharing with you.</p>
<h2 id="Pseudo-code-for-quick-sort"><a href="#Pseudo-code-for-quick-sort" class="headerlink" title="Pseudo code for quick sort"></a>Pseudo code for quick sort</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Note: stop is not included</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr, start, stop)</span>:</span></div><div class="line">    <span class="keyword">if</span> there <span class="keyword">is</span> only <span class="number">1</span> element to sort:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        pivot = choose an element <span class="comment"># low or high or randomly</span></div><div class="line">        idx = partition()  <span class="comment"># [&lt; pivot | pivot | &gt;= pivot] partition into 3 parts</span></div><div class="line">        quick_sort(left part)  </div><div class="line">        quick_sort(right part)</div><div class="line">    <span class="keyword">return</span></div></pre></td></tr></table></figure>
<p>Let me explain it:</p>
<ol>
<li>If there is only 1 element to sort, nothing need to be done, just return the original arr.</li>
<li>If ther are more than 1 elements to sort, we need to repeat the procedure below:<br>Choose an element as pivot. <code>Pivot</code> is the element which split the to sort array into 3 parts. One is the left part: elements in this part are all &lt; pivot; one is the right part: elements in this part are all &gt;= pivot; the middle part only contains 1 element — the pivot.<br>We can assure that, the pivot is at its correct position after such a procedure.<br>Now the left part and right part are not sorted yet, so we quick_sort(left part) and right part respectively.</li>
</ol>
<h2 id="How-to-write-partition"><a href="#How-to-write-partition" class="headerlink" title="How to write partition ?"></a>How to write partition ?</h2><p>For me, the most confusing part of the above algorithm is the partition. Recursion is easy to understand. My old version partition part looks like:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># My old version of partition: Ugly and Hard to understand</span></div><div class="line">low, high = start, stop - <span class="number">1</span></div><div class="line">pivot = arr[low]</div><div class="line"><span class="keyword">while</span> low &lt;= high:</div><div class="line">    <span class="keyword">while</span> low &lt;= high <span class="keyword">and</span> arr[low] &lt; pivot:</div><div class="line">        low += <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> low &lt;= high <span class="keyword">and</span> arr[low] &gt; pivot:</div><div class="line">        arr[low], arr[high] = arr[high], arr[low]</div><div class="line">    <span class="keyword">while</span> high &gt;= low <span class="keyword">and</span> arr[high] &gt;= pivot:</div><div class="line">        high -= <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> low &lt;= high <span class="keyword">and</span> arr[high] &lt; pivot:</div><div class="line">        arr[low], arr[high] = arr[high], arr[low]</div></pre></td></tr></table></figure></p>
<p>So how do we make it easier to understand?<br>Let’s illustrate <strong>partition procedure</strong> through an example:<br><img src="/images/python/quick_sort-1.jpg" alt="Figure 1"><br><img src="/images/python/quick_sort-2.jpg" alt="Figure 2">  </p>
<p>We can find out 4 key points from the above procedure:</p>
<ol>
<li>All swaps only happen between <em>low</em> and <em>high</em>. And <em>pivot</em> must be one of <em>low</em> and <em>high</em>. So swap makes the pivot change its position (Either <code>from low to high</code> or <code>from high to low</code>).<br>Note: To remember where is pivot now, I used a variable named <code>pivot</code> to record whether it is at low or high.  Note that <code>pivot</code> only has two states: {“low”, “high”}, and swap() will trigger it to change state.</li>
<li>When should we make a swap？The answer is: <code>when the low and high are unordered(or in a reversed order)</code>.</li>
<li>So what if low and high are ordered? The answer is: <code>just move the non-pivot one step forward (low: --&gt;, high: &lt;--)</code>.</li>
<li>When to stop? The answer is: <code>when the low and high meet together (low == high)</code>.</li>
</ol>
<p>My clean version parition is shown below:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">LOW = <span class="keyword">True</span></div><div class="line">HIGH = <span class="keyword">False</span></div><div class="line"><span class="comment"># My new version of partition: Clean and Easy to understand</span></div><div class="line">low, high = start, stop - <span class="number">1</span></div><div class="line">pivot = LOW</div><div class="line"><span class="keyword">while</span> low &lt; high:</div><div class="line">    <span class="keyword">if</span> arr[low] &gt; arr[high]:  <span class="comment"># swap when unordered</span></div><div class="line">        arr[low], arr[high] = arr[high], arr[low]</div><div class="line">        pivot = <span class="keyword">not</span> pivot  <span class="comment"># change pivot state</span></div><div class="line">    <span class="keyword">elif</span> pivot == LOW: <span class="comment"># ordered; pivot is LOW</span></div><div class="line">        high -= <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>: <span class="comment"># ordered; pivot is HIGH</span></div><div class="line">        low += <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h2 id="Complete-Code"><a href="#Complete-Code" class="headerlink" title="Complete Code"></a>Complete Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">Quick Sort: Divide and Conquer</div><div class="line"></div><div class="line">choose a pivot;</div><div class="line">move all eles &lt; pivot into its left and eles &gt; pivvot into its right</div><div class="line"></div><div class="line">Time: Worst case: k == 0 O(N^2), Best &amp; Average case: O(NlogN)</div><div class="line">Type: in place, instable</div><div class="line">"""</div><div class="line"><span class="comment"># record the pivot is at low or high</span></div><div class="line">LOW = <span class="keyword">True</span></div><div class="line">HIGH = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr, start, stop)</span>:</span></div><div class="line">    <span class="keyword">if</span> stop - start &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> arr</div><div class="line">    low, high = start, stop - <span class="number">1</span></div><div class="line">    pivot = LOW</div><div class="line">    <span class="keyword">while</span> low &lt; high:</div><div class="line">        <span class="comment"># swap when unordered</span></div><div class="line">        <span class="keyword">if</span> arr[low] &gt; arr[high]:</div><div class="line">            arr[low], arr[high] = arr[high], arr[low]</div><div class="line">            pivot = <span class="keyword">not</span> pivot</div><div class="line">        <span class="keyword">elif</span> pivot == LOW:</div><div class="line">            high -= <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            low += <span class="number">1</span></div><div class="line"></div><div class="line">    quick_sort(arr, start, low)</div><div class="line">    quick_sort(arr, low + <span class="number">1</span>, stop)  <span class="comment"># pivot is already in correct pos, don't sort it!!!</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> arr</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>]</div><div class="line">    <span class="comment"># arr = [3, 7, 5, 6, 0, 8, 1, 4]</span></div><div class="line">    <span class="comment"># arr = [-1, -2, -3, 1.5, 2.99999, 0.1, 78]</span></div><div class="line">    <span class="comment"># arr = [7, 6, 5, 0, 0, 4, 3]</span></div><div class="line">    <span class="comment"># arr = [9.2, 8, 7, 5, 3, 20.3, -1, 3.3, 9, 0.3, 0, 2.1, 5, 4.6, 2, 1, 1, 0, 1]</span></div><div class="line">    <span class="comment"># arr = [0, 3, 1, 0, -2]</span></div><div class="line"></div><div class="line">    print(<span class="string">"[&#123;&#125;] arr: &#123;&#125;"</span>.format(<span class="number">0</span>, arr))</div><div class="line">    arr = quick_sort(arr, <span class="number">0</span>, len(arr))</div><div class="line">    print(<span class="string">"[&#123;&#125;] arr: &#123;&#125;"</span>.format(<span class="number">1</span>, arr))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># output</div><div class="line">[0] arr: [1, 2, 0, 0, 2, 1, -1, 0, 4, 3]</div><div class="line">[1] arr: [-1, 0, 0, 0, 1, 1, 2, 2, 3, 4]</div></pre></td></tr></table></figure>
<p>Note: this version’s quick can only make sure all smaller than pivot nums to its left and all larger nums to its right. It can’t make sure that all nums equal to pivot will lie in one side of pivot.</p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> alg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bloom Filter]]></title>
      <url>/2018/08/05/Bloom-Filter/</url>
      <content type="html"><![CDATA[<p>This article will show you what is Bloom Filter <em>(BF for short)</em> and when should we use it. And a python3 implementation of Bloom Filter is shown. Thanks for this <a href="https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/" target="_blank" rel="noopener">article</a> in geeksforgeeks.</p>
<h2 id="What-is-BF"><a href="#What-is-BF" class="headerlink" title="What is BF?"></a>What is BF?</h2><p>Bloom Filter is useful when you want to check whether an element exists in a set. It’s an <strong>space-efficient probabilistic data structure</strong>, which makes the check quick and only occupies little memory especially when your set is too large to load in memory.<br>For example, you’re registering a new username, and the server has to check whether your input username is occupied. Since the username set can be very large, so a linear finding algorithm is too slow. And a binary search is also not that efficient. But BF can do it in constant time complexity.</p>
<h2 id="How-to-build-a-BF"><a href="#How-to-build-a-BF" class="headerlink" title="How to build a BF?"></a>How to build a BF?</h2><p><img src="/images/python/bloom_filter.jpg" alt="Illustration of Bloom Filter">   </p>
<ol>
<li>Create BF:<br> create a bit array with size: N, and initialized with 0s.</li>
<li><p>Add an new element to BF:<br> there are k different hash functions: h1(·), h2(·), … hk(·)<br> bit_1 = h1(x) % N<br> bit_2 = h2(x) % N<br> …<br> bit_k = hk(x) % N<br> and set bit_1, bit_2, … bit_k to 1 in the bit array.</p>
</li>
<li><p>Check a element exists in BF:<br>  repeat step 2: compute bit_1, … bit_k and check whether these bits are all set to 1 in bit array, if Yes then return True.</p>
</li>
</ol>
<p>False Positive Error:<br>A collision may occur in BF. For example, “near” corresponds to [1,4,5] bits in BF, “going” corresponds to [2,3,5] bits in BF, when we want to check whethe “enjoy” is in BF. We compute the hashes and got [1, 2, 5], we check the BF and found these bits are all 1s, so we return True. But actually “enjoy” is not in our set. This is called <code>False Positive result</code>. e.g. A username is not in the set but BF said it is. And BF will never make False Negative error, that is, telling you an in-set username is not in the set.</p>
<h2 id="Key-points-to-BF"><a href="#Key-points-to-BF" class="headerlink" title="Key points to BF:"></a>Key points to BF:</h2><ol>
<li>You can lower False Positive rate by taking more space and computing more hash funcs.</li>
<li>The hash functions need to be independent and uniformly distributed so that the collision probability won’t be high.</li>
<li>Given the set element num $n$ and your expected FP error rate $p$, the Bloom Filter’s array size $m$ and hash functions’s num $k$ can be estimated.<br>$$m = -\frac{nlnp}{(ln2)^2}$$<br>$$k = \frac{m}{n}ln2$$</li>
<li>Given the bf size $m$ and hash function num $k$, the FP rate can be estimated.<br>$$p = [1 - (1 - \frac{1}{m})^{kn}]^k \approx (1 - e^{-kn/m})^k $$</li>
</ol>
<h2 id="Implementation-of-Bloom-Filter"><a href="#Implementation-of-Bloom-Filter" class="headerlink" title="Implementation of Bloom Filter:"></a>Implementation of Bloom Filter:</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">File: bloom_filter.py</div><div class="line">Date: 2018-08-05 18:06</div><div class="line">Author: amy</div><div class="line"></div><div class="line">Bloom filter provides a highly efficient way to check whether an item exists in a set.</div><div class="line">A False Positive rate is allowed.</div><div class="line"></div><div class="line">Ref: https://www.geeksforgeeks.org/bloom-filters-introduction-and-python-implementation/</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> bitarray <span class="keyword">import</span> bitarray</div><div class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil</div><div class="line"><span class="keyword">import</span> mmh3</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Implement bloom filter.</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n, fp_prob)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Create an empty bloom filter.</div><div class="line">        Args:</div><div class="line">            n: num of the items in set</div><div class="line">            fp_prob: false positive prob in tolerance</div><div class="line">        """</div><div class="line">        self.bit_ary_size = ceil(- n * np.log(fp_prob) / (np.log(<span class="number">2</span>) ** <span class="number">2</span>))</div><div class="line">        self.hash_func_num = ceil(self.bit_ary_size * <span class="number">1.0</span> / n * np.log(<span class="number">2</span>))</div><div class="line">        self.bit_ary = bitarray(self.bit_ary_size)</div><div class="line">        self.bit_ary.setall(<span class="number">0</span>)</div><div class="line">        print(<span class="string">"Bloom filter size: &#123;&#125;"</span>.format(self.bit_ary_size))</div><div class="line">        print(<span class="string">"Hash func num: &#123;&#125;"</span>.format(self.hash_func_num))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Add an item into set.</div><div class="line">        Args:</div><div class="line">            item: hashable object</div><div class="line">        """</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.hash_func_num):</div><div class="line">            set_bit = mmh3.hash(item, i) % self.bit_ary_size</div><div class="line">            self.bit_ary[set_bit] = <span class="number">1</span></div><div class="line">        print(<span class="string">"+ &#123;&#125;"</span>.format(item))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, item)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        Check whether item exists in set.</div><div class="line">        Args:</div><div class="line">            item: the item to check</div><div class="line"></div><div class="line">        Returns:</div><div class="line">            Boolean</div><div class="line">        """</div><div class="line">        found = <span class="keyword">True</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.hash_func_num):</div><div class="line">            set_bit = mmh3.hash(item, i) % self.bit_ary_size</div><div class="line">            <span class="keyword">if</span> self.bit_ary[set_bit] == <span class="number">0</span>:</div><div class="line">                found = <span class="keyword">False</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> found</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    L = [<span class="string">"hello"</span>, <span class="string">"amy"</span>, <span class="string">"world"</span>, <span class="string">"rainy"</span>, <span class="string">"lover"</span>, <span class="string">"join"</span>, <span class="string">"Go"</span>, <span class="string">"plenty"</span>]</div><div class="line">    D = [<span class="string">"amy"</span>, <span class="string">"go"</span>, <span class="string">"rainy"</span>, <span class="string">"rain"</span>, <span class="string">"love"</span>, <span class="string">"Go"</span>, <span class="string">"try"</span>, <span class="string">"mixed"</span>]</div><div class="line">    bf = BloomFilter(len(L), <span class="number">0.01</span>)</div><div class="line"></div><div class="line">    print(<span class="string">"\nBuilding ..."</span>)</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> L:</div><div class="line">        bf.add(e)</div><div class="line">    print(<span class="string">"\nChecking ..."</span>)</div><div class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> D:</div><div class="line">        <span class="keyword">if</span> bf.check(e):</div><div class="line">            print(<span class="string">"[&#123;&#125;] existed!"</span>.format(e))</div></pre></td></tr></table></figure>
<p>Output is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Bloom filter size: 77</div><div class="line">Hash func num: 7</div><div class="line"></div><div class="line">Building ...</div><div class="line">+ hello</div><div class="line">+ amy</div><div class="line">+ world</div><div class="line">+ rainy</div><div class="line">+ lover</div><div class="line">+ join</div><div class="line">+ Go</div><div class="line">+ plenty</div><div class="line"></div><div class="line">Checking ...</div><div class="line">[amy] existed!</div><div class="line">[rainy] existed!</div><div class="line">[Go] existed!</div><div class="line"></div><div class="line">## if you enlarge the fp rate, you will find some False Postive results.</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> alg </tag>
            
            <tag> ds </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Big or Little Endian]]></title>
      <url>/2018/08/05/Big-or-Little-Endian/</url>
      <content type="html"><![CDATA[<p>This article will show you what is <code>Big Endian</code> and <code>Little Endian</code> and how to check your cpu’s endian in Python3.</p>
<h2 id="What-is-endian"><a href="#What-is-endian" class="headerlink" title="What is endian?"></a>What is endian?</h2><p>Endian is the <strong>order</strong> how your CPU store data.<br>For an short int in a 32-bit computer, it needs 2 bytes to store. So the CPU have to store it in two continuous addresses. <code>Endian</code> decides which part should be writen to memory first!<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># data: 0x4e01</span></div><div class="line"><span class="comment"># 2 bytes are needed</span></div><div class="line"></div><div class="line"><span class="comment"># Big Endian (write Most Significant bit first)</span></div><div class="line">Addr           Memory</div><div class="line"><span class="number">0x0000</span>       <span class="number">0x4e</span></div><div class="line"><span class="number">0x0001</span>       <span class="number">0x01</span></div><div class="line"><span class="comment"># Little Endian (write Least Significant bit first)</span></div><div class="line">Addr           Memo01ry</div><div class="line"><span class="number">0x0000</span>       <span class="number">0x01</span></div><div class="line"><span class="number">0x0001</span>       <span class="number">0x4e</span></div></pre></td></tr></table></figure></p>
<p> Note:<br> Most significat bit(MSB) is the most left 1 in bit array, which has the highest weight. (It must be a 1.)<br> Least significat bit(LSB) is the most right bit in bit array, which has the lowest weight. (No matter it is a 0 or 1.)</p>
<h2 id="How-to-judge-your-cpu’s-endian"><a href="#How-to-judge-your-cpu’s-endian" class="headerlink" title="How to judge your cpu’s endian?"></a>How to judge your cpu’s endian?</h2><p> Little endian is more popular than Big endian. In python you can judge your endian in following ways.<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Way 1. use sys.byteorder</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.byteorder</div><div class="line"><span class="string">'little'</span></div></pre></td></tr></table></figure></p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Way 2. use struct.pack</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> struct</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pk = struct.pack(<span class="string">'i'</span>, <span class="number">0x12345678</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hex(pk[<span class="number">0</span>])  <span class="comment"># pack: pack python object to binary</span></div><div class="line"><span class="string">'0x78'</span>  </div><div class="line"><span class="comment"># the lowest bytes is 0x78 so it is little endian.</span></div><div class="line"><span class="comment"># if is 0x12, then it is big endian.</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> bit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Expected Value and Variance of Normal Distribution]]></title>
      <url>/2018/04/30/Expected-Value-and-Variance-of-Normal-Distribution/</url>
      <content type="html"><![CDATA[<p>This article will show you the definition and properties of <code>Expected Value</code>  $E(X)$ and <code>Variance</code> $Var(X)$. And we will show you why <code>Normal Distribution</code> $N \sim (0, 1)$  ‘s Expected Value  $ = \mu$ and its Variance $ = \sigma^2 $.</p>
<p>Reference: <a href="https://ocw.mit.edu/courses/mathematics/18-05-introduction-to-probability-and-statistics-spring-2014/readings/MIT18_05S14_Reading6a.pdf" target="_blank" rel="noopener">Proof</a></p>
<h2 id="1-Expected-Value"><a href="#1-Expected-Value" class="headerlink" title="1. Expected Value"></a>1. Expected Value</h2><p>Also called <code>mean</code> and <code>average</code>.</p>
<ul>
<li>Discrete Random Variable:<br>$$E(X) = \sum_{i=1}^{n}{x_ip(x_i)}$$</li>
<li>Continous Random Variable:<br>$$E(X) = \int_{-\infty}^{\infty}{x f(x)}dx$$<br>where $f(x)$ is the probability density function of $X$.</li>
<li>properties:<ol>
<li>$E(C) = C$</li>
<li>$X$ and $Y$ are random variables on a sample space $\Omega$, then<br>$E(X + Y) = E(X) + E(Y)$</li>
<li>If $X$ and $Y$ are independent random variables, then<br>$E(XY) = E(X)E(Y)$</li>
<li>For $Y = g(X)$, $E(Y)=E(g(x))=∫_{-∞}^{+∞}g(x)f(x)dx$</li>
</ol>
</li>
</ul>
<h2 id="2-Variance"><a href="#2-Variance" class="headerlink" title="2. Variance"></a>2. Variance</h2><p>Let $X$ be a continuous random variable with mean $\mu$. The variance of $X$ is<br>$$Var(X) = E((X - μ)^2)$$</p>
<ul>
<li>properties:<ol>
<li>$Var(X + Y) = Var(X) + Var(Y)$</li>
<li>$Var(aX + b) = a^2Var(X)$</li>
</ol>
</li>
</ul>
<h2 id="3-Normal-Distribution"><a href="#3-Normal-Distribution" class="headerlink" title="3. Normal Distribution"></a>3. Normal Distribution</h2><p>As it is named, Normal Distribution, also known as (Gaussian Distribution)  is a very <code>normal</code> distribution in our daily life. For example, the student’s grades, or many random variabls in natural science obeys <strong>normal distribution</strong>.</p>
<p><code>Central limit theorem</code> is a group of very important theorems in probability. Their core concept is:<br>The central limit theorem states that under certain (fairly common) conditions, the sum of many random variables will have an approximately normal distribution.</p>
<p>Definition: $X∼N(μ, σ)$, whose pdf is,<br>$$f(x) = \frac{1}{σ√2π}\exp{\frac{(x - \mu)^2}{2σ^2}}$$<br>where $μ$ is its mean, $σ$ is its standard derivation.</p>
<p>Proof 1. $E(X)=μ$<br>First let’s standardize $X$, that is, we made $Z = \frac{X - μ}{σ}$<br>$∴ X = σZ + μ$</p>
<p>$∴ E(X) = E(σZ + μ) = σE(Z) + μ $</p>
<p>$∵ E(Z) = ∫_{-∞}^{∞}z\frac{1}{\sqrt{2\pi}}e^{-\frac{z^2}{2}}dz$</p>
<p>$ = \frac{1}{\sqrt{2\pi}} \int_{-\infty}^{\infty}ze^{-\frac{z^2}{2}}dz$</p>
<p>$=  \frac{1}{\sqrt{2\pi}} e^{-\frac{z^2}{2}} \bigg|_{-\infty}^{+\infty}$</p>
<p>$∵ e^{-\frac{z^2}{2}}$  is an even function</p>
<p>$∴e^{-\frac{z^2}{2}} \bigg|_{-\infty}^{+\infty} = 0 $</p>
<p>$∴ E(Z) = 0$</p>
<p>$∴ E(X) = σ ⋅ 0 + μ = μ$</p>
<p>Proof 2. $Var(X)=σ^2$<br>Similarly, we standardize $X$, that is, we made $Z = \frac{X - μ}{σ}$<br>$∴ X = σZ + μ$</p>
<p>$∴ Var(X) = Var(σZ + μ) = σ^2Var(Z) = σ^2E((Z-0)^2) = σ^2E(Z^2)$</p>
<p>$∵ E(Z^2) = ∫_{-∞}^{+∞}z^2f(z)dz$</p>
<p>$  = ∫_{-∞}^{+∞}z^2 \frac{1}{√{2\pi}}e^{-\frac{z^2}{2}}dz$</p>
<p>here we use <code>integration by parts</code> to calculate the integral:</p>
<p>$\int uvdx = uv - \int u’vdx$</p>
<p>Let $u = z, v’ = z\frac{1}{√{2\pi}}e^{-\frac{z^2}{2}} $,</p>
<p>then $u’ = 1,  v = -e^{-\frac{z^2}{2}}$</p>
<p>$= \frac{1}{\sqrt{2\pi}} [z(-e^{-\frac{z^2}{2}}) \bigg|_{-∞}^{+∞} + ∫1 \cdot e ^ {-\frac{z^2}{2}}dz]$</p>
<p>$= -\frac{1}{\sqrt{2π}}z⋅e^{-\frac{z^2}{2}}\bigg|_{-\infty}^{+∞} + \frac{1}{\sqrt{2π}}∫ e^{-\frac{z^2}{2}}dz$</p>
<p>$= 0 + 1$</p>
<p>for the first part, exp(x) decreases much faster than linear x, so first part is 0; for the second part, it is the pdf of Z, so its sum should be 1. (Sum of probabilities is 1)</p>
<p>$∴ E(Z^2) = 1$</p>
<p>$∴ Var(X) = σ^2E(Z^2) = σ^2$</p>
]]></content>
      
        
        <tags>
            
            <tag> math </tag>
            
            <tag> statistics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Metrics used in Classification]]></title>
      <url>/2018/03/24/Metrics%20used%20in%20Classification/</url>
      <content type="html"><![CDATA[<p>We will introduce common metrics used in classification problems: <em>precision, recall, f1, macro_f1, micro_f1, precision-recall curve and ROC curve </em>. Our discussion is based on <strong>binary classification</strong> problems.</p>
<h2 id="Table-of-Prediction"><a href="#Table-of-Prediction" class="headerlink" title="Table of Prediction"></a>Table of Prediction</h2><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fq2uzp9bqgj30f3072gmz.jpg" alt="Table 1. Prediction table"></p>
<p>Based on this table, we will give the definition of precision, recall and f1, f1 is defined as the <em>harmonic mean</em> of precision and recall.</p>
<p>$ precision = \frac{TP}{TP + FP} $</p>
<p>$ recall = \frac{TP}{TP + FN} $</p>
<p>$ f1 = \frac{2}{\frac{1}{precision} \times \frac{1}{precision}} = 2 \times \frac{precision \times recall}{precision + recall}$</p>
<p><strong> precision </strong>: among the samples you predict, how many are correctly predict.</p>
<p><strong> recall </strong>: among all the postive samples, how many are found by your model.</p>
<p><strong> f1 </strong>: a tradeoff for precision and recall for <em>different threshold</em> (we got a probability when predict, if the prob is larger than threshold, we will predict it as postive and vice versa).</p>
<h2 id="Macro-and-Micro"><a href="#Macro-and-Micro" class="headerlink" title="Macro and Micro"></a>Macro and Micro</h2><p>Macro and micro are different average ways.<br>Macro f1 treated each class equally, i.e. it doesn’t take each class’ sample num into consideration. Whereas micro f1 take each class’ sample num into consideration, i.e. it computes the weighted average f1 for each class.<br>Suppose we have $n_0$ samples for class 0, $n_1$ samples for class 1, and $f1_0$ is f1 score for class 0, $f1_1$ is f1 score for class 1. Then</p>
<p>$ macrof1 = \frac{1}{2} \times (f1_0 + f1_1) $</p>
<p>$ microf1 = \frac{n_0 \times f1_0 + n_1 \times f1_1}{n_0 + n_1}$</p>
<h2 id="Confusion-Matrix"><a href="#Confusion-Matrix" class="headerlink" title="Confusion Matrix"></a>Confusion Matrix</h2><p>Confusion matrix is a matrix used to evaluate the accuracy for classification. Each element $C(i, j)$ is the number of samples known to be in group $i$ but predicted to be in group $j$. If $ i == j$ then $C(i, j)$ is the correctly predict num for class $i$. Usually confusion matrix is plotted using a heat map.<br><img src="/images/cls_metrics/cm_plot.png" alt="Confusion Matrix"></p>
<h2 id="Precision-Recall-Curve"><a href="#Precision-Recall-Curve" class="headerlink" title="Precision Recall Curve"></a>Precision Recall Curve</h2><p>Precision Recall Curve shows the relationship between recall(x) and precision(y).<br>It is plotted by adjusting $thereshold$ when predicting labels. Given a trained classifier, we use it to predict some new samples, then we get a list of probabilities, if the probability is larger than $threshold$, we assign it as postive label, else we assign it as negative label. So when we adjust the threshold value, we will get a group of (precision, recall) pairs. Precision Recall Curve is plotted using these pairs.<br><img src="/images/cls_metrics/PR_plot.png" alt="Precision Recall Curve"></p>
<h2 id="ROC-curve-and-AUC-of-ROC"><a href="#ROC-curve-and-AUC-of-ROC" class="headerlink" title="ROC curve and AUC of ROC"></a>ROC curve and AUC of ROC</h2><p>ROC Curve shows the relationship between TPR(x) and FPR(y).</p>
<p>$ TPR = \frac{TP}{TP + FN} $</p>
<p>$ FPR = \frac{FP}{FP + TN} $</p>
<p>Similar to Precision Recall Curve, ROC curve is also plotted by adjusting $thereshold$ when predicting labels.<br>AUC (area under curve) is the area under the ROC curve.<br><img src="/images/cls_metrics/ROC_plot.png" alt="ROC Curve"></p>
<h2 id="Trial"><a href="#Trial" class="headerlink" title="Trial"></a>Trial</h2><p>Finally, we use sklearn to train a binary classifier and evaluate this classifier using the above metrics.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="string">"""</span></div><div class="line">Binary classification.</div><div class="line">Try scikit learn's classifier with auto generated dataset.</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> itertools</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</div><div class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> f1_score, precision_recall_curve, average_precision_score, roc_auc_score, roc_curve, \</div><div class="line">    confusion_matrix</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> make_classification</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dataset</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># generate dataset for binary classification</span></div><div class="line">    X, y = make_classification(n_samples=<span class="number">500</span>, n_classes=<span class="number">2</span>, n_features=<span class="number">4</span>, n_informative=<span class="number">2</span>, flip_y=<span class="number">0.28</span>,</div><div class="line">                               weights=[<span class="number">0.4</span>, <span class="number">0.6</span>], random_state=<span class="number">101</span>)</div><div class="line">    <span class="comment"># plot dataset</span></div><div class="line">    plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], marker=<span class="string">"o"</span>, c=y, s=<span class="number">25</span>, edgecolor=<span class="string">"k"</span>)</div><div class="line">    plt.show()</div><div class="line">    <span class="comment"># split dataset</span></div><div class="line">    train_size = <span class="number">400</span></div><div class="line">    train_x, train_y = X[:train_size], y[:train_size]</div><div class="line">    test_x, test_y = X[train_size:], y[train_size:]</div><div class="line">    <span class="keyword">return</span> train_x, train_y, test_x, test_y</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_x, train_y)</span>:</span></div><div class="line">    clf = svm.SVC()</div><div class="line">    clf.fit(train_x, train_y)</div><div class="line">    <span class="keyword">return</span> clf</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(clf, test_x)</span>:</span></div><div class="line">    probs = clf.decision_function(test_x)</div><div class="line">    preds = clf.predict(test_x)</div><div class="line">    <span class="keyword">return</span> probs, preds</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">macro_average</span><span class="params">(arr)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.average(arr)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">micro_average</span><span class="params">(cls_sample_nums, arr)</span>:</span></div><div class="line">    <span class="keyword">return</span> np.dot(cls_sample_nums, arr) / np.sum(cls_sample_nums)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(probs, pred_y, true_y)</span>:</span></div><div class="line">    <span class="comment"># plot precision_recall curve</span></div><div class="line">    avg_precision = average_precision_score(true_y, probs)</div><div class="line">    precision, recall, _ = precision_recall_curve(true_y, probs)</div><div class="line">    print(<span class="string">"Average precision: &#123;:.04f&#125;"</span>.format(avg_precision))</div><div class="line"></div><div class="line">    plt.step(recall, precision, color=<span class="string">'b'</span>, alpha=<span class="number">0.2</span>, where=<span class="string">'post'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Recall'</span>)</div><div class="line">    plt.ylabel(<span class="string">'Precision'</span>)</div><div class="line">    plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>])</div><div class="line">    plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</div><div class="line">    plt.title(<span class="string">'2-class Precision-Recall curve: AP=&#123;0:0.2f&#125;'</span>.format(avg_precision))</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># plot roc curve and auc</span></div><div class="line">    fpr, tpr, _ = roc_curve(true_y, probs)</div><div class="line">    mAP = roc_auc_score(true_y, probs)</div><div class="line">    print(<span class="string">"Mean average precision: &#123;:.04f&#125;"</span>.format(mAP))</div><div class="line"></div><div class="line">    plt.plot(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.1</span>), np.arange(<span class="number">0</span>, <span class="number">1.1</span>, <span class="number">0.1</span>), <span class="string">"k--"</span>)</div><div class="line">    plt.step(fpr, tpr, color=<span class="string">'g'</span>, alpha=<span class="number">0.2</span>, where=<span class="string">'post'</span>)</div><div class="line">    plt.xlabel(<span class="string">'False Positive Rate'</span>)</div><div class="line">    plt.ylabel(<span class="string">'True Positive Rate'</span>)</div><div class="line">    plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>])</div><div class="line">    plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</div><div class="line">    plt.title(<span class="string">'2-class ROC curve: AUC=&#123;0:0.2f&#125;'</span>.format(mAP))</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># plot confusion matrix</span></div><div class="line">    cm = confusion_matrix(true_y, pred_y)</div><div class="line">    <span class="comment"># normalize cm as the sample num for each class varies</span></div><div class="line">    cm = cm.astype(<span class="string">'float'</span>) / cm.sum(axis=<span class="number">1</span>)[:, np.newaxis]</div><div class="line"></div><div class="line">    plt.imshow(cm, interpolation=<span class="string">'nearest'</span>, cmap=plt.cm.Blues)</div><div class="line">    plt.title(<span class="string">"Confusion matrix"</span>)</div><div class="line">    plt.colorbar()</div><div class="line">    class_names = [<span class="string">"0"</span>, <span class="string">"1"</span>]</div><div class="line">    tick_marks = np.arange(len(class_names))</div><div class="line">    plt.xticks(tick_marks, class_names)</div><div class="line">    plt.yticks(tick_marks, class_names)</div><div class="line"></div><div class="line">    fmt = <span class="string">'.2f'</span></div><div class="line">    thresh = cm.max() / <span class="number">2.</span></div><div class="line">    <span class="keyword">for</span> i, j <span class="keyword">in</span> itertools.product(range(cm.shape[<span class="number">0</span>]), range(cm.shape[<span class="number">1</span>])):</div><div class="line">        plt.text(j, i, format(cm[i, j], fmt),</div><div class="line">                 horizontalalignment=<span class="string">"center"</span>,</div><div class="line">                 color=<span class="string">"white"</span> <span class="keyword">if</span> cm[i, j] &gt; thresh <span class="keyword">else</span> <span class="string">"black"</span>)</div><div class="line"></div><div class="line">    plt.tight_layout()</div><div class="line">    plt.ylabel(<span class="string">'True label'</span>)</div><div class="line">    plt.xlabel(<span class="string">'Predicted label'</span>)</div><div class="line">    plt.show()</div><div class="line"></div><div class="line">    <span class="comment"># micro_f1 and macro_f1</span></div><div class="line">    f1_cls0 = f1_score(test_y, pred_y, average=<span class="string">"binary"</span>, pos_label=<span class="number">0</span>)</div><div class="line">    f1_cls1 = f1_score(test_y, pred_y, average=<span class="string">"binary"</span>, pos_label=<span class="number">1</span>)</div><div class="line">    print(<span class="string">"f1 for class 0: &#123;:.4f&#125;"</span>.format(f1_cls0))</div><div class="line">    print(<span class="string">"f1 for class 1: &#123;:.4f&#125;"</span>.format(f1_cls1))</div><div class="line">    cls_sample_nums = np.bincount(test_y)</div><div class="line">    <span class="comment"># micro_f1 = f1_score(test_y, pred_y, average="micro")</span></div><div class="line">    <span class="comment"># macro_f1 = f1_score(test_y, pred_y, average="macro")</span></div><div class="line">    micro_f1 = micro_average(cls_sample_nums, [f1_cls0, f1_cls1])</div><div class="line">    macro_f1 = macro_average([f1_cls0, f1_cls1])</div><div class="line">    print(<span class="string">"Micro f1: &#123;:.4f&#125;"</span>.format(micro_f1))</div><div class="line">    print(<span class="string">"Macro f1: &#123;:.4f&#125;"</span>.format(macro_f1))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    train_x, train_y, test_x, test_y = make_dataset()</div><div class="line">    clf = train(train_x, train_y)</div><div class="line">    pred_probs, pred_y = predict(clf, test_x)</div><div class="line">    evaluate(pred_probs, pred_y, test_y)</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" console outputs: """</span></div><div class="line">Average precision: <span class="number">0.8917</span></div><div class="line">Mean average precision: <span class="number">0.8506</span></div><div class="line">f1 <span class="keyword">for</span> <span class="class"><span class="keyword">class</span> 0:</span> <span class="number">0.7561</span></div><div class="line">f1 <span class="keyword">for</span> <span class="class"><span class="keyword">class</span> 1:</span> <span class="number">0.8305</span></div><div class="line">Micro f1: <span class="number">0.7993</span></div><div class="line">Macro f1: <span class="number">0.7933</span></div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><ol>
<li><a href="http://scikit-learn.org/stable/modules/model_evaluation.html#roc-metrics" target="_blank" rel="noopener">Scikit Learn</a></li>
<li><a href="https://www.clips.uantwerpen.be/~vincent/pdf/microaverage.pdf" target="_blank" rel="noopener">Macro- and micro-averaged evaluation measures</a></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> classification </tag>
            
            <tag> metrics </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Excel Sheet Column]]></title>
      <url>/2018/03/17/Excel-Sheet-Column/</url>
      <content type="html"><![CDATA[<p>In this tutorial, we will introduce how to solve the <em>conversion between excel sheet column name and decimal numbers</em> problems. Leetcode [#168. Excel Sheet Column Title and #171. Excel Sheet Column Number]. These problems are easy to solve, but for such a long time, I can’t totally understand why it should be solved like the discussion page said, which makes me crazy and confused. Finally, I realized that they are actually games between different <a href="https://en.wikipedia.org/wiki/Numeral_system" target="_blank" rel="noopener"><strong>numeral systems</strong></a>. In the following, we will analysis the two problems in detail.</p>
<h2 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h2><p>#171. Given a column title, return its corresponding positive integer.</p>
<p>#168. Given a positive integer, return its corresponding column title as appear in an Excel sheet.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1 &lt;-&gt; A</div><div class="line">2 &lt;-&gt; B</div><div class="line">3 &lt;-&gt; C</div><div class="line">...</div><div class="line">26 &lt;-&gt; Z</div><div class="line">27 &lt;-&gt; AA</div><div class="line">28 &lt;-&gt; AB</div><div class="line">...</div><div class="line">702 &lt;-&gt; ZZ</div></pre></td></tr></table></figure></p>
<h2 id="Analysis-of-171"><a href="#Analysis-of-171" class="headerlink" title="Analysis of #171."></a>Analysis of #171.</h2><p>#171 is easier than #168 because you can easily find the rules through several examples. We only need to multiply each digit’s number and its corresponding significance value and sum them up.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AC = A * 26 + C = 1 * 26 + 3 = 29</div><div class="line">BCZ = B * 26^2 + C * 26 + Z = 2 * 26^2 + 3 * 26 + 26 * 1</div><div class="line">NBAD = N * 26^3 + B * 26^2 + A * 26 + D * 1 = 14 * 26^3 + 2 * 26^2 + 1 * 26 + 4 * 1 = 247446</div></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">n1_to_n3</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="string">"""Convert N1 to N3."""</span></div><div class="line">    n, base = <span class="number">0</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> s[::<span class="number">-1</span>]:</div><div class="line">        n += (ord(ch) - ord(<span class="string">"A"</span>) + <span class="number">1</span>) * base</div><div class="line">        base *= <span class="number">26</span></div><div class="line">    <span class="keyword">return</span> n</div></pre></td></tr></table></figure>
<h2 id="Analysis-of-168"><a href="#Analysis-of-168" class="headerlink" title="Analysis of #168."></a>Analysis of #168.</h2><p>We can assume that this is a new kind of numeral system <strong>N1</strong>. Listing some examples, we can find that there are 2 differences between it and our familiar <strong>decimal system</strong>.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">N1</div><div class="line">1. In this new system, there is no 0, which starts from 1.</div><div class="line">2. Its base is 26. (A~Z)</div></pre></td></tr></table></figure></p>
<p>For simplicity, let’s see another similar numeral system <strong>N2</strong>, which is defined like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">N2</div><div class="line">1. There is no 0, which starts from 1.</div><div class="line">2. Its base is 10. (1~9, we represent 10 as &apos;x&apos;)</div><div class="line">3. In decimal system, when one digit reaches 10, a carry digit will be added in front of it. Whereas in this system, when one digit reaches larger than 10, a carry digit will be added.</div></pre></td></tr></table></figure></p>
<p>So the numbers in system N2 look likes this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">N2</div><div class="line"> 1,  2,  3,  4,  5,  6,  7,  8,  9,  x,</div><div class="line">11, 12, 13, 14, 15, 16, 17, 18, 19, 1x,</div><div class="line">21, 22, 23, 24, 25, 26, 27, 28, 29, 2x,</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>And the numbers in normal decimal system <strong>N3</strong> look like this:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">N3</div><div class="line">0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10,</div><div class="line">   11, 12, 13, 14, 15, 16, 17, 18, 19, 20,</div><div class="line">   21, 22, 23, 24, 25, 26, 27, 28, 29, 30,</div><div class="line">   ...</div></pre></td></tr></table></figure></p>
<p>Compare N2 with N3, we can find out that, the only difference is in the last column, other columns are the same. And in the N2’s last column, ‘x’ represents ‘10’, ‘1x’ represents ‘1*10 + 10’, ‘2x’ represents ‘2*10 + 10’. The rule of converting N3’s ‘30’ to N2’s ‘2x’ is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">base = 10</div><div class="line">1. we minus a 10 from 30, and represent [bit2] as &apos;x&apos; .</div><div class="line">2. the left part is 20, and [bit1] is 20 // base.</div></pre></td></tr></table></figure></p>
<p>For other numbers which is not multiple of 10, their representations are same in N2 and N3. So we can convert N3 to N2 using the following algorithm:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">n3_to_n2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""Convert N2's number to N3's number."""</span></div><div class="line">    s = <span class="string">""</span></div><div class="line">    base = <span class="number">10</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">if</span> n % base == <span class="number">0</span>:  <span class="comment"># multiple of 10</span></div><div class="line">            s += <span class="string">"x"</span></div><div class="line">            n -= base</div><div class="line">        <span class="keyword">else</span>: <span class="comment"># not multiple of 10</span></div><div class="line">            s += chr(n % base - <span class="number">1</span> + ord(<span class="string">"1"</span>))</div><div class="line">        n //= base</div><div class="line">    <span class="keyword">return</span> s[::<span class="number">-1</span>]</div></pre></td></tr></table></figure></p>
<p>We know that N1 has the similar rule with N2, the only difference is that N1 uses base 26, wheras N2 uses base 10. So we can convert N3 to N1 using similar idea.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">n3_to_n2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="string">"""Convert N2's number to N3's number."""</span></div><div class="line">    s = <span class="string">""</span></div><div class="line">    base = <span class="number">26</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">if</span> n % base == <span class="number">0</span>:  <span class="comment"># multiple of 26</span></div><div class="line">            s += <span class="string">"Z"</span></div><div class="line">            n -= base</div><div class="line">        <span class="keyword">else</span>: <span class="comment"># not multiple of 26</span></div><div class="line">            s += chr(n % base - <span class="number">1</span> + ord(<span class="string">"A"</span>))</div><div class="line">        n //= base</div><div class="line">    <span class="keyword">return</span> s[::<span class="number">-1</span>]</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> alg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bitwise Ops]]></title>
      <url>/2018/03/09/Bitwise-Ops/</url>
      <content type="html"><![CDATA[<h2 id="Basic-Knowledge"><a href="#Basic-Knowledge" class="headerlink" title="Basic Knowledge"></a>Basic Knowledge</h2><p>Twos-complement binary: 补码二进制， 计算机以补码的形式存储数字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">正数: 原，反，补码 即其二进制表示，最高位符号位0</div><div class="line">负数: [原]对应正数的符号位变1，[反]原码除了符号位都取反，[补]反码+1</div><div class="line"></div><div class="line">+1: 0000 0001, 0000 0001, 0000 0001</div><div class="line">-1: 1000 0001, 1111 1110, 1111 1111</div><div class="line">已知负数补码求原码：补码-1，最高位不变，其余位取反。</div></pre></td></tr></table></figure></p>
<p>Bitwise operators in python:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a &lt;&lt; k <span class="comment"># left shift k bits: 右端补0 (a * (2^k))</span></div><div class="line">a &gt;&gt; k <span class="comment"># right shift k bits: 左端补0 (a // (2^k))</span></div><div class="line">a &amp; b  <span class="comment"># and</span></div><div class="line">a | b  <span class="comment"># or</span></div><div class="line">~ a    <span class="comment"># a的补码取反: -a - 1</span></div><div class="line">a ^ b  <span class="comment"># xor</span></div></pre></td></tr></table></figure></p>
<p>XOR quality:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a ^ a = 0</div><div class="line">a ^ b = b ^ a</div><div class="line">a ^ b ^ c = a ^ (b ^ c)</div></pre></td></tr></table></figure></p>
<h2 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a>Problems</h2><h3 id="XOR’s-quality"><a href="#XOR’s-quality" class="headerlink" title="XOR’s quality"></a>XOR’s quality</h3><ol>
<li><p>#156 Given an array of integers, every element appears twice except for one. Find that single one.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(nums)</span>:</span></div><div class="line">    ret = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">        ret ^= x</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure>
</li>
<li><p>#168 Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">missingNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    ret, n = <span class="number">0</span>, len(nums)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">        ret = ret ^ i ^ nums[i]</div><div class="line">    ret = ret ^ n</div><div class="line">    <span class="keyword">return</span> ret</div></pre></td></tr></table></figure>
</li>
<li><p>#389 Given two strings s and t which consist of only lowercase letters.<br>String t is generated by random shuffling string s and then add one more letter at a random position.<br>Find the letter that was added in t.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findTheDifference</span><span class="params">(self, s, t)</span>:</span></div><div class="line">    ret, ls = <span class="number">0</span>, len(s)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(ls):</div><div class="line">        ret ^= ord(s[i]) ^ ord(t[i])</div><div class="line">    ret ^= ord(t[ls])</div><div class="line">    <span class="keyword">return</span> chr(ret)</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="XOR-and-Truth-Table"><a href="#XOR-and-Truth-Table" class="headerlink" title="XOR and Truth Table"></a>XOR and Truth Table</h3><p>List the truth table first and then change it into boolean algebra.</p>
<ol>
<li><p>#137 Given an array of integers, every element appears three times except for one, which appears exactly once. Find that single one.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    bit1, bit2 = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">        last_bit1 = bit1</div><div class="line">        bit1 = (~bit1 &amp; bit2 &amp; x) | (bit1 &amp; ~bit2 &amp; ~x)</div><div class="line">        bit2 = ~last_bit1 &amp; (bit2 ^ x)    </div><div class="line">    <span class="keyword">return</span> bit2</div></pre></td></tr></table></figure>
</li>
<li><p>#variant Given an array of integers, every element appears once except for one, which appears exactly three times. Find that single one.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">single_number</span><span class="params">(nums)</span>:</span></div><div class="line">    bit1, bit2 = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">        last_bit1 = bit1</div><div class="line">        bit1 = ~bit2 &amp; (last_bit1 ^ x)</div><div class="line">        bit2 = (~bit1 &amp; bit2 &amp; ~x) | (bit1 &amp; ~bit2 &amp; x)</div><div class="line">    <span class="keyword">return</span> bit1</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="XOR-and-Divide-Groups"><a href="#XOR-and-Divide-Groups" class="headerlink" title="XOR and Divide Groups"></a>XOR and Divide Groups</h3><ol>
<li>#260 Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    rst = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">        rst ^= x</div><div class="line">    mask = <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> (mask &amp; rst):</div><div class="line">        mask &lt;&lt;= <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># divide into 2 groups by set bit</span></div><div class="line">    rst1, rst2 = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> nums:</div><div class="line">        <span class="keyword">if</span> x &amp; mask:</div><div class="line">            rst1 ^= x</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            rst2 ^= x</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [rst1, rst2]</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> python </tag>
            
            <tag> alg </tag>
            
            <tag> bit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[KMP Algorithm Why and How?]]></title>
      <url>/2018/03/07/KMP-Algorithm/</url>
      <content type="html"><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>This blog is inspired by <a href="https://www.ics.uci.edu/~eppstein/161/960227.html" title="ics161 KMP algorithm" target="_blank" rel="noopener">ICS161</a> which is a good source for understand and analysis KMP, and <a href="https://www.geeksforgeeks.org/searching-for-patterns-set-2-kmp-algorithm/" title="searching for patterns: KMP algorithm" target="_blank" rel="noopener">geeksforgeeks</a> which provides concise and well explained code for C++, Python and Java.</p>
<p>There are different implemented versions of KMP, which may confuse you a lot, but you will understand all of them once you master KMP’s core idea.</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Knuth–Morris–Pratt algorithm which is also known as KMP algorithm, is an effective pattern search algorithm. It is used for solving the kind of problem: given a text string and a pattern string, determine whether the pattern appears somewhere in the text or not. In the following, we will give a force and naive solution for this problem, and then we speed it up by introduce the KMP solution.</p>
<h2 id="Solution-1-Naive-search"><a href="#Solution-1-Naive-search" class="headerlink" title="Solution 1. Naive search"></a>Solution 1. Naive search</h2><p>The naive solution is straight and easy to understand. It mainly consists of 2 loops, one outer loop indexed by $i$, one inner loop indexed by $j$. $i$ moves along the text str $s$, $j$ moves along the pattern str $p$.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">naive_search</span><span class="params">(s, p)</span>:</span></div><div class="line">    <span class="comment"># s: text, p: pattern</span></div><div class="line">    ls, lp, ret = len(s), len(p), <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> lp == <span class="number">0</span>:</div><div class="line">        ret = <span class="number">0</span></div><div class="line">    i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> i &lt; ls:</div><div class="line">        j = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i + j &lt; ls <span class="keyword">and</span> j &lt; lp <span class="keyword">and</span> s[i + j] == p[j]:</div><div class="line">            j = j + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> j == lp:</div><div class="line">            ret = i</div><div class="line">            print(<span class="string">"Find pattern in: &#123;&#125;"</span>.format(i))</div><div class="line">        i = i + <span class="number">1</span></div></pre></td></tr></table></figure>
<p>Let’s look at a worst case first:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># a worst case: O(ls*lp)</span></div><div class="line">s = <span class="string">"aaaaaaaaaaaaa...aaaaaaaaaaaaaaa"</span></div><div class="line">p = <span class="string">"aaaab"</span></div><div class="line"></div><div class="line"><span class="comment"># illustration: x means mismatch at this position</span></div><div class="line">    <span class="number">0123456789012.</span>..    </div><div class="line">s[] aaaaaaaaaaaaa...aaaaaaaaaaaaaaa</div><div class="line">i=<span class="number">0</span>:aaaax</div><div class="line">i=<span class="number">1</span>: aaaax</div><div class="line">i=<span class="number">2</span>:  aaaax</div><div class="line">...</div><div class="line">i=ls:                             a  <span class="comment"># meet text's end</span></div></pre></td></tr></table></figure>
<p><strong>Analysis of worst case</strong> $O(ls \times lp)$: we start from the 1st “a” in s, we need to compare $lp$ times till we know it is a mismatch, since the character “b” is at the end of the pattern str. But we are not sure that whether there exists a pattern in the following chars, to avoid skipping any matches, we start from 2nd “a” in s , and repeat the above search again, this time we still find out that it is a mismatch using $lp$ comparisions. Oops, we need to compare $ls <em> lp$ times to know that there is no such pattern in the text. So the </em>naive search* algorithm’s comparisions complexity is $O(ls \times lp)$.</p>
<p>Howerver, don’t be too frustrated. In practice you seldom meet the worst case. Under most circumstances, the mismatch doesn’t always happens at the end, so you will meet it earlier, thus you break the inner loop earlier. Well, the naive solution works not too bad in average.</p>
<h2 id="Solution-2-KMP-search-Skip-redundant-comparisions"><a href="#Solution-2-KMP-search-Skip-redundant-comparisions" class="headerlink" title="Solution 2. KMP search: Skip redundant comparisions"></a>Solution 2. KMP search: Skip redundant comparisions</h2><p>The core idea of KMP is that we can <em>skip</em> non-essential comparisions in the naive search. So we need to figure out that which part of comparisions is essential and which part can be skipped. In fact, there are 2 parts can be skipped, one part is in the outer loop (skip some postions of $i$), the other is in the inner loop (skip some postions of $j$).</p>
<h3 id="First-part-skip-some-i-s-the-outer-loop"><a href="#First-part-skip-some-i-s-the-outer-loop" class="headerlink" title="First part: skip some $i$s, the outer loop"></a>First part: skip some $i$s, the outer loop</h3><p>In this section, we will show you why and how the outer loop can be skipped. First, let’s make a small pattern search challenge, and you can do it intuitively with the naked eye. (Forget about the algorithms!)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># case 1:</span></div><div class="line">s = <span class="string">"ababaacbaabcdefab"</span></div><div class="line">p = <span class="string">"abcdef"</span></div><div class="line"><span class="comment"># intuitive procedure</span></div><div class="line">     <span class="number">01234567890123456</span>    </div><div class="line">s[]: abcdababcdecabcdef</div><div class="line">i=<span class="number">0</span>: abcdx</div><div class="line">i=<span class="number">1</span>:     abx</div><div class="line">i=<span class="number">2</span>:       abcdex</div><div class="line">i=<span class="number">3</span>:            x</div><div class="line">i=<span class="number">4</span>:             abcdef</div></pre></td></tr></table></figure></p>
<p>Suppose the text $s$ is a fixed sequence, and the pattern is a box on trail, you can push it along the trail, but the text str is fixed there. In my intuitive procedure, you can see that from i=0 to i=1, I pushed my pattern box 4 steps at one time. I can do this because I know that pos 1, 2, 3 is “bcd” and no “a” exists there, so I omitted “bcd”. How did I know this information? Will this make a help?</p>
<p>The answer is “Yes”. It is the pattern who told me this info. Once you matched part of the pattern, you know what matched part is in the text str. This is the idea of KMP.</p>
<p>The above pattern is special without any repeated chars, let’s see another case with repeated chars.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># case 2:</span></div><div class="line">s = <span class="string">"ababaaabaabaababab"</span></div><div class="line">p = <span class="string">"aababaa"</span></div><div class="line"><span class="comment"># naive procedure</span></div><div class="line">     <span class="number">01234567890123456</span>    </div><div class="line">T[]: aabaaababaabababa</div><div class="line">i=<span class="number">0</span>: aabax</div><div class="line">i=<span class="number">1</span>:    aax</div><div class="line">i=<span class="number">2</span>:     aababaa</div><div class="line">i=<span class="number">3</span>:          aababax</div><div class="line">i=<span class="number">4</span>:               ax</div><div class="line">i=<span class="number">5</span>:                x</div><div class="line">i=<span class="number">6</span>:                 a</div></pre></td></tr></table></figure>
<p>Let’s look at i=0 and i=1 iters, after i=0, we only pushed ahead our pattern box 3 steps. We can’t push it directly to the mismatched pos 4, because we know that the already matched part after i=0 is “aaba”, if we pushed 4 steps, the 3rd “a” might be omitted, we just know the pos 4 is <strong>not</strong> “b”, but we don’t know whether it is an “a” or not. If we skip pos 3, we might lose a perfect match. To avoid this, we must be careful and only push 3 steps. It seems that, we the number of steps we can push depends on the pattern str’s structure. If there exists <em>header-like</em> substr inside the pattern’s body, we must be careful. If there doesn’t exist such header-like substrs, we can push our pattern box boldly. (what is “header-like”: e.g. for pattern: “aababaa”, the idx={1} (“a”), idx={3} (“a”) and idx={5,6} (“aa”) are all similar to header: “a” or “aa”, they are header-like substrs.)</p>
<p>Such header-like substrs are named as <em>overlap</em> or <em>longest prefix suffix</em> (lps) for short, that is, longest proper prefix which is also suffix. A proper prefix is prefix with whole string not allowed (can’t be equal to the origin str). For example, in str “aababaa”, the lps is “aa” (len = 2); in “aababa”, the lps is “a” (len = 1); in “aabab”, the lps is “” (len = 0). A lps table for “aababaa” are shown below, each lps[i] indicates the longest prefix suffix for str p[0…i] (i is included).<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lps table for pattern "aababaa"</span></div><div class="line">p[] a a b a b a a</div><div class="line">idx <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div><div class="line">lps <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>Given this table, you’ll know where to stop when you push your pattern box ahead. For example, assume that a mismatch occurs at pos $i$ of the text str and at pos $j$ of pattern str, our push should stop at the next header-like pos. Loot at the lps table, we find out that lps[$j - 1$] = $l$, which means the longest header-like substr of already matched part(note $j - 1$)’s length = $l$. Then we should push our box $j - l$ steps. So the next $i$’s pos is $i + (j - l)$.</p>
<p><strong>How to generate the lps table will be explained below.</strong></p>
<h3 id="Second-part-skip-some-j-s-the-inner-loop"><a href="#Second-part-skip-some-j-s-the-inner-loop" class="headerlink" title="Second part: skip some $j$s, the inner loop"></a>Second part: skip some $j$s, the inner loop</h3><p>In this section, we will show you why and how the inner loop can be skipped. Again, we use <em>case 2</em> as an example. For iter=0, it mismatched at pos 4, which means that s[0…3] are matched with pattern p[0…3], that is, s[0…3] = “aaba”. And for iter=1, since we already knew that s[3]=”a”, we don’t have to compare s[3] with p[0] again. We can start our comparation from p[1] instead of compare from p[0]. Note that, here we skipped some $j$. Similar to last section’s formulation, we can know where to start our $j$ when comparing patterns using lps table. It is easy to find out that, we start $j$ at the end of the header-like substr, that is, $j = l$.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># case 2:</span></div><div class="line">s = <span class="string">"ababaaabaabaababab"</span></div><div class="line">p = <span class="string">"aababaa"</span></div><div class="line"><span class="comment"># naive procedure</span></div><div class="line">     <span class="number">01234567890123456</span>    </div><div class="line">T[]: aabaaababaabababa</div><div class="line">i=<span class="number">0</span>: aabax</div><div class="line">i=<span class="number">1</span>:    aax</div><div class="line">i=<span class="number">2</span>:     aababaa</div><div class="line">i=<span class="number">3</span>:          aababax</div><div class="line">i=<span class="number">4</span>:               ax</div><div class="line">i=<span class="number">5</span>:                x</div><div class="line">i=<span class="number">6</span>:                 a</div></pre></td></tr></table></figure>
<h2 id="Quick-Review"><a href="#Quick-Review" class="headerlink" title="Quick Review"></a>Quick Review</h2><p>Each time a mismatch occurs, we need to decide in the next iteration where $i$ should be and where $j$ should be. The computation of next $i$ and $j$’s positions is based on a pre-computed table <em>lps</em> table. The pseudo code of KMP algorithm is:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># input: text: s, pattern: p</span></div><div class="line">compute the lps table of p;</div><div class="line">i, j = <span class="number">0</span>, <span class="number">0</span></div><div class="line"><span class="keyword">while</span> i <span class="keyword">is</span> <span class="keyword">not</span> at the end of s:</div><div class="line">    match until a mismatch occurs <span class="keyword">or</span> matched the whole pattern.</div><div class="line">    <span class="keyword">if</span> matched the whole pattern:</div><div class="line">        <span class="keyword">print</span> the start idx</div><div class="line">    <span class="comment"># we need to find out all matched patterns, so we continue</span></div><div class="line">    update i</div><div class="line">    update j</div></pre></td></tr></table></figure></p>
<h2 id="Compute-lps-table"><a href="#Compute-lps-table" class="headerlink" title="Compute lps table"></a>Compute lps table</h2><p>In this section, we describe how to compute the lps table in detail.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># lps table for pattern "aababaa"</span></div><div class="line">p[] a a b a b a a</div><div class="line">idx <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div><div class="line">lps <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>To compute the above lps[j], suppose we knew lps[j - 1], we need to consider 2 situations:</p>
<ol>
<li>If p[j] == p[lps[j - 1]] then the longest prefix suffix of p[0…j] enlongates by 1 (lps[j] = lps[j - 1] + 1).</li>
<li>If p[j] != p[lps[j - 1]], does it mean that longest prefix suffix of p[0…j] is “” and lps[j] = 0 ？</li>
</ol>
<p>We explain situation 2 by 2 cases:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># situation 2.1:</span></div><div class="line">p = <span class="string">"aabaacb"</span></div><div class="line">p[] a a b a a c b</div><div class="line">idx <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div><div class="line">lps <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment"># situation 2.2:</span></div><div class="line">p = <span class="string">"aabaaaa"</span></div><div class="line">p[] a a b a a a a</div><div class="line">idx <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div><div class="line">lps <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>In case 2.1, p[5] != p[lps[4]] (“c” != “b”), lps[5] is 0. Wheras in case 2.2, p[5] != p[lps[4]] (“a” != “b”), lps[5] is 2. So what’s the difference between the 2 subsituations?</p>
<p>If you’re carefully enough, you’ll find out that: in situation 2.1, p[3,4] = “aa” is header-like, p[4,5] = “ac” is not because it contains “c”, which is not in the header. In situation 2.2, p[3,4] = “aa” is header-like, p[4,5] = “aa” is also header-like. So we need to fingure out whether the current p[j] can enlongate part of the previous lps and construct a new header-like substr. If it does, lps[j] is the new substr’s length, if doesn’t, we need to repeat the procedure till the green part is “”, cur_len = 0.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute_lps_table</span><span class="params">(p)</span>:</span></div><div class="line">    <span class="comment"># input: p</span></div><div class="line">    lp = len(p)</div><div class="line">    lps = [<span class="number">0</span>] * lp</div><div class="line">    i, cur_len = <span class="number">1</span>, <span class="number">0</span>  <span class="comment"># cur_len is current longest prefix suffix length</span></div><div class="line">    <span class="keyword">while</span> i &lt; lp:</div><div class="line">        <span class="keyword">if</span> p[i] == p[cur_len]:  <span class="comment"># situation 1: p[j] == p[lps[j - 1]]</span></div><div class="line">            cur_len += <span class="number">1</span></div><div class="line">            lps[i] = cur_len</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:  <span class="comment"># situation 2: p[j] != p[lps[j - 1]]</span></div><div class="line">            <span class="keyword">if</span> cur_len &gt; <span class="number">0</span>: <span class="comment"># situation 2.1</span></div><div class="line">                cur_len = lps[cur_len - <span class="number">1</span>]</div><div class="line">            <span class="keyword">else</span>:  <span class="comment"># situation 2.2</span></div><div class="line">                lps[i] = <span class="number">0</span></div><div class="line">                i += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> lps</div></pre></td></tr></table></figure>
<p>In the above code, line <em># case 4</em> is a bit hard to understand. Now, we analysis this line of code in detail. The figure below explain what we want to do. <img src="/images/kmp/lps.png" alt="lps explaination"></p>
<p>The blue part is what we knew: cur_len = lps[j-1] = 3, the orange part is what we want to find. If we want to find the orange part, we need to figure out the length of the green part. Here is the derivation process, based on <em>transitivity equation</em>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Proof</span></div><div class="line">∵ len(p[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]) == len(p[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]) = cur_len</div><div class="line">∴ len(p[<span class="number">1</span>,<span class="number">2</span>]) == len(p[<span class="number">5</span>,<span class="number">6</span>])</div><div class="line">∵ len(p[<span class="number">0</span>,<span class="number">1</span>]) == len(p[<span class="number">1</span>,<span class="number">2</span>]) = lps[cur_len - <span class="number">1</span>]</div><div class="line">∴ len(p[<span class="number">5</span>,<span class="number">6</span>]) = len(p[<span class="number">0</span>,<span class="number">1</span>]) = lps[cur_len - <span class="number">1</span>]</div></pre></td></tr></table></figure>
<p>So that we find the length of green part p[5,6]: lps[cur_len - 1]。 Once the green part is founded, we can judge that: if the green part + p[j] can be a lps, then lps[j] = len(green part) + 1, else we repeat the previous steps till we can make a decision (belongs to <strong>situation 1</strong> or <strong>situation 2.1</strong>). It’s a recursive procedure, so we use cur_len to save the green part’s length.</p>
<h2 id="KMP-Algorithm"><a href="#KMP-Algorithm" class="headerlink" title="KMP Algorithm"></a>KMP Algorithm</h2><p>In this section, we implement KMP algorithm in Python. Below is the code, explaination is thorough.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kmp_search</span><span class="params">(s, p, lps)</span>:</span></div><div class="line">    <span class="comment"># input: text:s, pattern:p, lps table: tbl</span></div><div class="line">    <span class="comment"># idx = -1 if not found</span></div><div class="line">    i, j, ls, lp, idx = <span class="number">0</span>, <span class="number">0</span>, len(s), len(p), <span class="number">-1</span></div><div class="line">    <span class="keyword">while</span> i &lt; ls:</div><div class="line">        <span class="comment"># match till a mismatch occurs or match whole pattern</span></div><div class="line">        <span class="keyword">while</span> i + j &lt; ls <span class="keyword">and</span> j &lt; lp <span class="keyword">and</span> s[i + j] == p[j]:</div><div class="line">            j = j + <span class="number">1</span></div><div class="line">        <span class="comment"># perfect match!</span></div><div class="line">        <span class="keyword">if</span> j == lp:  </div><div class="line">            idx = i</div><div class="line">            print(<span class="string">"Found pattern at: &#123;&#125;"</span>.format(idx))</div><div class="line">        <span class="comment"># update i</span></div><div class="line">        i = i + max(<span class="number">1</span>, j - lps[j - <span class="number">1</span>])<span class="comment"># update j</span></div><div class="line">        <span class="comment"># update j</span></div><div class="line">        <span class="comment"># when j != 0, note that in python lps[-1] means the last element in lps</span></div><div class="line">        <span class="comment"># when j == 0: a mismatch occurs at the first character, j should keep its value: 0</span></div><div class="line">        <span class="keyword">if</span> j != <span class="number">0</span>:</div><div class="line">            j = lps[j - <span class="number">1</span>]</div><div class="line">    <span class="keyword">return</span> idx</div></pre></td></tr></table></figure>
<h2 id="Postscript"><a href="#Postscript" class="headerlink" title="Postscript"></a>Postscript</h2><p>KMP algorithm is a classic pattern searching algorithm, hope this article will help you understand it better. I spent several days to figure this out, so if you meet some knots, you may need to think it over and over till you fully master it. After that, you can compare its idea with other pattern search algorithms, you’ll find that they are all interesting.</p>
<p>If you find any issue, please contact me through the email.</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> alg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Bazel & gdb 基础]]></title>
      <url>/2017/07/31/Bazel%20&amp;%20gdb%20%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="学习使用bazel-和-gdb-调试程序"><a href="#学习使用bazel-和-gdb-调试程序" class="headerlink" title="学习使用bazel 和 gdb 调试程序"></a>学习使用bazel 和 gdb 调试程序</h2><ul>
<li><strong>bazel</strong>: Google推出的一个代码调试工具， 比makefile用起来更简洁、方便。  </li>
<li><strong>gdb</strong> : GNU Project Debugger, 支持多种语言的代码调试。<h2 id="1-Bazel-基本概念："><a href="#1-Bazel-基本概念：" class="headerlink" title="1. Bazel 基本概念："></a>1. Bazel 基本概念：</h2></li>
<li>bazel命令必须在一个包含WORKSPACE的路径下发生，如果没有可以新建一个空的WORKSPACE。</li>
<li>在这个路径下的任意子路径里执行bazel命令都可以。</li>
<li>BUILD 文件里定义了一些rules，每条rule告诉bazel编译某个.cc源文件需要依赖哪些文件:deps，编译生成的可执行文件是什么:name，诸如此类。<h2 id="2-Bazel-查看依赖Graph"><a href="#2-Bazel-查看依赖Graph" class="headerlink" title="2.Bazel 查看依赖Graph:"></a>2.Bazel 查看依赖Graph:</h2>当项目包含多个pakages时，可以查看不同文件夹下各个源文件之间的依赖关系，一目了然：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 栗子来源于Bazel官方教程：</span></div><div class="line">https://docs.bazel.build/versions/master/tutorial/cpp.html</div><div class="line"><span class="comment"># 生成依赖信息</span></div><div class="line">bazel query --nohost_deps --noimplicit_deps <span class="string">'deps(//main:hello-world)'</span> \</div><div class="line">  --output graph</div><div class="line"><span class="comment"># 把生成的内容（eg. 如下）复制到：http://www.webgraphviz.com/</span></div><div class="line">digraph mygraph &#123;</div><div class="line">  node [shape=box];</div><div class="line"><span class="string">"//main:hello-world"</span></div><div class="line"><span class="string">"//main:hello-world"</span> -&gt; <span class="string">"//main:hello-greet"</span></div><div class="line"><span class="string">"//main:hello-world"</span> -&gt; <span class="string">"//main:hello-world.cc"</span></div><div class="line"><span class="string">"//main:hello-world"</span> -&gt; <span class="string">"//lib:hello-time"</span></div><div class="line"><span class="string">"//main:hello-world.cc"</span></div><div class="line"><span class="string">"//main:hello-greet"</span></div><div class="line"><span class="string">"//main:hello-greet"</span> -&gt; <span class="string">"//main:hello-greet.cc\n//main:hello-greet.h"</span></div><div class="line"><span class="string">"//main:hello-greet.cc\n//main:hello-greet.h"</span></div><div class="line"><span class="string">"//lib:hello-time"</span></div><div class="line"><span class="string">"//lib:hello-time"</span> -&gt; <span class="string">"//lib:hello-time.cc\n//lib:hello-time.h"</span></div><div class="line"><span class="string">"//lib:hello-time.cc\n//lib:hello-time.h"</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># 即可看到文件之间的依赖关系图</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-build"><a href="#3-build" class="headerlink" title="3. build"></a>3. build</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 它所依赖的都文件会一起被build，所以一般build main函数所在的文件</span></div><div class="line">bazel build //main:hello-world  <span class="comment"># //path:name</span></div><div class="line"><span class="comment"># cd 到WORKSPACE所在目录下可以看到多了几个以bazel-打头的文件夹（其实是软链接，不在这个文件夹下的）</span></div><div class="line"><span class="comment"># bazel-bin 里是编译生成的可执行文件。</span></div></pre></td></tr></table></figure>
<h2 id="4-debug"><a href="#4-debug" class="headerlink" title="4. debug"></a>4. debug</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 要用gdb调试的话，需要在build时加参数: -c dbg 意思是：--config debug， 这样就会build时加上debug所需要的信息</span></div><div class="line">bazel build -c dbg //main:hello-world</div><div class="line"><span class="comment"># 进入调试模式</span></div><div class="line">gdb</div><div class="line"><span class="comment"># 载入可执行文件</span></div><div class="line">file bazel-bin/hello-world</div><div class="line"><span class="comment"># 添加断点</span></div><div class="line">b /lib/hello-time.cc : 6</div><div class="line">b /main/hello-world.cc : 10</div><div class="line"><span class="comment"># 查看断点</span></div><div class="line">info b</div><div class="line"><span class="comment"># 查看断点附近的代码</span></div><div class="line">list /main/hello-world.cc : 10</div><div class="line"><span class="comment"># 运行</span></div><div class="line">r</div><div class="line"><span class="comment"># 带参数运行</span></div><div class="line">r amy</div><div class="line"><span class="comment"># 直接运行到下一个断点</span></div><div class="line">c</div><div class="line"><span class="comment"># 打印变量</span></div><div class="line">p var_name</div><div class="line"><span class="comment"># 执行下一行</span></div><div class="line">n</div><div class="line"><span class="comment"># 执行下一行，step into 函数</span></div><div class="line">s</div><div class="line"><span class="comment"># 查看堆栈</span></div><div class="line">bt</div><div class="line"><span class="comment"># 结束调试</span></div><div class="line">q</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
            <tag> bazel </tag>
            
            <tag> gdb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#4.排列与组合]]></title>
      <url>/2017/07/30/4-%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<hr>
<p>排列组合是高中数学里我们学过的知识，不过那时候我们计算的是满足某一条件的排列组合的总数，也就是说，我们求的是一个数值。而今天的问题是：通过完成一个程序，列出某个排列组合的所有可能情况。   </p>
<p><strong>问题：</strong></p>
<ol>
<li>如何生成由$n$个数字组成的所有$k$位数?</li>
<li>如何生成$n$个数中选择$k$个数的所有排列$A_n^k$ ?</li>
<li>如何生成$n$个数中选择$k$个数的所有组合$C_n^k$ ?</li>
</ol>
<hr>
<p><strong>关键点：</strong></p>
<ol>
<li>填每一位时，把选择的数字存到一个结果数组中，填完所有位之后一起输出。</li>
<li>填完一位之后要选择下一种情况时，需要把当前元素从结果数组ary[]中弹出。</li>
<li>排列，组合不能重复使用元素，因此用过的要做个标记（-1）。</li>
<li>组合与顺序无关，默认采用递增的顺序。</li>
</ol>
<p><strong>代码：</strong><br>求$N_5^4, A_5^4$和$C_5^4$：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Created by Amy on 2017/7/29.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">/*Arrangement and Combination*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ary;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; eles = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line"><span class="keyword">int</span> n_ = eles.size(); <span class="comment">// numbers for chosen</span></div><div class="line"><span class="keyword">int</span> k_ = <span class="number">4</span>; <span class="comment">// bits num</span></div><div class="line"></div><div class="line"><span class="comment">/*List Number*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">N</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e : ary) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e : eles) &#123;</div><div class="line">            ary.push_back(e);</div><div class="line">            N(k - <span class="number">1</span>);</div><div class="line">            ary.pop_back();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*Arrangement*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e : ary) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (eles[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                ary.push_back(eles[i]);</div><div class="line">                <span class="keyword">int</span> temp = eles[i];</div><div class="line">                eles[i] = <span class="number">-1</span>;</div><div class="line">                A(k - <span class="number">1</span>);</div><div class="line">                eles[i] = temp;</div><div class="line">                ary.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*Combination*/</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> e : ary) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> last_used_idx = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (last_used_idx = n_ - <span class="number">1</span>; last_used_idx &gt;= <span class="number">0</span> &amp;&amp; eles[last_used_idx] &gt; <span class="number">0</span>; last_used_idx--);</div><div class="line">        <span class="keyword">if</span> (k == n_ - last_used_idx) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n_; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (eles[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">                    ary.push_back(eles[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = last_used_idx + <span class="number">1</span>; j &lt;= n_ - k; j++) &#123;</div><div class="line">                ary.push_back(eles[j]);</div><div class="line">                <span class="keyword">int</span> temp = eles[j];</div><div class="line">                eles[j] = <span class="number">-1</span>;</div><div class="line">                C(k - <span class="number">1</span>);</div><div class="line">                eles[j] = temp;</div><div class="line">                ary.pop_back();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The numbers are: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    N(k_);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The arrangement is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    A(k_);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"The combination is: "</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    C(k_);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>运行结果：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">The numbers are:</div><div class="line">1 1 1 1</div><div class="line">1 1 1 2</div><div class="line">1 1 1 3</div><div class="line">1 1 1 4</div><div class="line">1 1 1 5</div><div class="line">1 1 2 1</div><div class="line">... ...</div><div class="line">5 5 5 1</div><div class="line">5 5 5 2</div><div class="line">5 5 5 3</div><div class="line">5 5 5 4</div><div class="line">5 5 5 5</div><div class="line">The arrangement is:</div><div class="line">1 2 3 4</div><div class="line">1 2 3 5</div><div class="line">1 2 4 3</div><div class="line">1 2 4 5</div><div class="line">... ...</div><div class="line">5 4 2 1</div><div class="line">5 4 2 3</div><div class="line">5 4 3 1</div><div class="line">5 4 3 2</div><div class="line">The combination is:</div><div class="line">1 2 3 4</div><div class="line">1 2 3 5</div><div class="line">1 2 4 5</div><div class="line">1 3 4 5</div><div class="line">2 3 4 5</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unix时间戳转换date time格式]]></title>
      <url>/2017/07/29/Unix%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2date-time%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>unix 时间戳(unix timestamp) 也叫unix时间(unix time)，是unix系统，类unix系统的一种时间表示方式，指的是：<strong>从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。</strong><br>Note: 内核版本比较低的Linux系统由于将Unix时间戳存储为32位，它能被表示的最后时间是2038年1月19日03:14:07（UTC），因此会导致2038年问题。<br>Unix时间戳有10位（秒级），也有13位（毫秒级），也有19位（纳秒级）等。<br>eg.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">unix time: 1501292159   # 秒级：10位   </div><div class="line">可以转换成</div><div class="line">date time: 2017/7/29 9:35:59</div></pre></td></tr></table></figure></p>
<p>首先来看下我们下面要用到的两种数据类型的定义：<br>unix time: time_t<br>date time: struct tm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// time_t 定义</div><div class="line">typedef	__time32_t time_t;</div><div class="line">typedef __int32 __time32_t;</div><div class="line">// tm 结构定义</div><div class="line">struct tm &#123;</div><div class="line">        int tm_sec;     /* seconds after the minute - [0,59] */</div><div class="line">        int tm_min;     /* minutes after the hour - [0,59] */</div><div class="line">        int tm_hour;    /* hours since midnight - [0,23] */</div><div class="line">        int tm_mday;    /* day of the month - [1,31] */</div><div class="line">        int tm_mon;     /* months since January - [0,11] */</div><div class="line">        int tm_year;    /* years since 1900 */</div><div class="line">        int tm_wday;    /* days since Sunday - [0,6] */</div><div class="line">        int tm_yday;    /* days since January 1 - [0,365] */</div><div class="line">        int tm_isdst;   /* daylight savings time flag */</div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p>下面给出用c++实现的两种时间格式的相互转换：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Learn to transform unix time step to datetime</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt; </span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> weekdays[] = &#123;</div><div class="line">        <span class="string">"Sunday"</span>, <span class="string">"Monday"</span>,<span class="string">"Tuesday"</span>,<span class="string">"Wendsday"</span>,<span class="string">"Thursday"</span>,<span class="string">"Friday"</span>,<span class="string">"Saturday"</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function">tm <span class="title">unix_2_datetime</span><span class="params">(<span class="keyword">time_t</span> unix_time)</span> </span>&#123;</div><div class="line">    <span class="comment">// transform unxi time to date time</span></div><div class="line">    <span class="keyword">auto</span> tick = (<span class="keyword">time_t</span>) unix_time;  <span class="comment">// if your input is long long: change it to 'time_t' first</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tm_</span> = *<span class="title">localtime</span>(&amp;<span class="title">tick</span>);</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> tm_;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">time_t</span> datetime_2_unix(tm date_time) &#123;</div><div class="line">    <span class="comment">// tranform date time to unix time</span></div><div class="line">    <span class="keyword">time_t</span> unix_time = mktime(&amp;date_time);</div><div class="line">    <span class="keyword">return</span> unix_time;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">learn_struct_tm</span><span class="params">(<span class="keyword">const</span> tm date_time)</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"\n#: Some members of struct 'tm': "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt; weekday: "</span>&lt;&lt;weekdays[date_time.tm_wday]&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt; hour: "</span>&lt;&lt;date_time.tm_hour&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt; min: "</span>&lt;&lt;date_time.tm_min&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// get current unix time</span></div><div class="line">    <span class="keyword">time_t</span> unix_time;</div><div class="line">    time(&amp;unix_time);</div><div class="line">    <span class="comment">// transform between unix time and date time</span></div><div class="line">    tm date_time = unix_2_datetime(unix_time);</div><div class="line">    unix_time = datetime_2_unix(date_time);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"#: Time format transform: "</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt; date time is: "</span>&lt;&lt;asctime(&amp;date_time);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"&gt; unix time is: "</span>&lt;&lt;unix_time&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// more usage about struct tm</span></div><div class="line">    learn_struct_tm(date_time);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#: Time format transform:</div><div class="line">&gt; date time is: Sat Jul 29 10:22:44 2017</div><div class="line">&gt; unix time is: 1501294964</div><div class="line"></div><div class="line">#: Some members of struct &apos;tm&apos;:</div><div class="line">&gt; weekday: Saturday</div><div class="line">&gt; hour: 10</div><div class="line">&gt; min: 22</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[月光与晚霞]]></title>
      <url>/2017/06/09/%E6%9C%88%E5%85%89%E4%B8%8E%E6%99%9A%E9%9C%9E/</url>
      <content type="html"><![CDATA[<p><img src="/images/photo/moon.jpg" alt="夜空中纯粹的月亮">   </p>
<p align="center">夜空中纯粹的月亮</p><br><img src="/images/photo/cloud1.jpg" alt="风卷残云"><br><p align="center">风卷残云</p><br><img src="/images/photo/cloud2.jpg" alt="残云"><br><p align="center">残云</p><br><img src="/images/photo/cloud3.jpg" alt="残云"><br><p align="center">残云</p><br><img src="/images/photo/lake.jpg" alt="黄昏之湖"><br><p align="center">黄昏之湖</p><br><img src="/images/photo/wanxia.jpg" alt="晚霞"><br><p align="center">晚霞</p>]]></content>
      
        
        <tags>
            
            <tag> living </tag>
            
            <tag> photo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#3.二叉查找树]]></title>
      <url>/2017/06/09/3-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>给定一个（无序）数组，创建一棵基本的二叉查找树。 </p>
<hr>
<p><strong>考虑：</strong>  </p>
<p>1 . 什么是<em>二叉查找树</em><br>2 . 空数组  </p>
<hr>
<p><strong>知识点：</strong>  </p>
<p>1 . <strong>二叉查找树：</strong>  在数值上： 左孩子&lt;根&lt;右孩子。<br>2 . <strong>中序遍历：</strong> 先访问左子树，再访问根节点，最后访问右子树。对于每棵子树，也采用此顺序访问。中序遍历一棵二叉查找树，就能得到一个<em>非递减</em>的数列。</p>
<hr>
<p><strong>思路：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// add node to a binary tree with root</span></div><div class="line">add_node(root)&#123;</div><div class="line"><span class="keyword">for</span> each element in ary:   </div><div class="line">    <span class="keyword">if</span> root is null:</div><div class="line">        make it the root node</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> ele's val &gt; root:</div><div class="line">            add_node(root-&gt;right)</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ele's val &lt; root:</div><div class="line">            add_node(root-&gt;left)</div><div class="line">        <span class="keyword">else</span>: <span class="comment">// not create a new node</span></div><div class="line">            root's num ++</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: Construct a binary seach tree</div><div class="line">* Idea: left &lt; root &lt; right, mid order traverse.</div><div class="line">* Time: O(nlogn)</div><div class="line">* Space:O(n)</div><div class="line">* Mistakes: The tree's root is nullptr, so the output is null.</div><div class="line">* 2017-06-06</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BinaryTreeNode</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> value;  <span class="comment">// node value</span></div><div class="line">    <span class="keyword">int</span> num;    <span class="comment">// num of nodes with the same value</span></div><div class="line">    BinaryTreeNode *right;</div><div class="line">    BinaryTreeNode *left;</div><div class="line">&#125;BTNode;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Ancestor</span>&#123;</span></div><div class="line">    BTNode *node;</div><div class="line">    BTNode *parent;</div><div class="line">    <span class="keyword">bool</span> is_left_child;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Ancestor *des_node = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="comment">// add a node to binary tree</span></div><div class="line"><span class="function">BTNode* <span class="title">add_node</span><span class="params">(BTNode *root, <span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">    BTNode *ptr = root;</div><div class="line">    <span class="keyword">if</span>(!ptr)&#123; <span class="comment">// ptr is null</span></div><div class="line">        ptr = <span class="keyword">new</span> BTNode;</div><div class="line">        ptr-&gt;value = val;</div><div class="line">        ptr-&gt;num = <span class="number">1</span>;</div><div class="line">        ptr-&gt;left = ptr-&gt;right = <span class="literal">nullptr</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(val &gt; ptr-&gt;value)&#123;</div><div class="line">            ptr-&gt;right = add_node(ptr-&gt;right, val);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val &lt; ptr-&gt;value)&#123;</div><div class="line">            ptr-&gt;left = add_node(ptr-&gt;left, val);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            ptr-&gt;num += <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// build a binary tree</span></div><div class="line"><span class="function">BTNode* <span class="title">build_binary_tree</span><span class="params">(<span class="keyword">int</span>* ary, <span class="keyword">int</span> node_num)</span></span>&#123;</div><div class="line">    BTNode *root = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">if</span>(node_num&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line">    root = add_node(root, ary[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;node_num; i++)&#123;</div><div class="line">        add_node(root, ary[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// print binary tree</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_binary_tree</span><span class="params">(BTNode *root)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!root) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    BTNode* ptr = root;</div><div class="line">    <span class="keyword">if</span>(ptr-&gt;left)&#123;</div><div class="line">        output_binary_tree(ptr-&gt;left);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;ptr-&gt;value&lt;&lt;<span class="string">":"</span>&lt;&lt;ptr-&gt;num&lt;&lt;<span class="string">"  "</span>;</div><div class="line">    <span class="keyword">if</span>(ptr-&gt;right)&#123;</div><div class="line">        output_binary_tree(ptr-&gt;right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// main func</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> ary[] = &#123;<span class="number">90</span>,<span class="number">12</span>,<span class="number">33</span>,<span class="number">-100</span>,<span class="number">20</span>, <span class="number">23</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">22</span>,<span class="number">78</span>, <span class="number">-1</span>,<span class="number">88</span>,<span class="number">27</span>,<span class="number">9</span>,<span class="number">8</span>, <span class="number">90</span>,<span class="number">90</span>,<span class="number">33</span>,<span class="number">10</span>,<span class="number">24</span>, <span class="number">67</span>,<span class="number">54</span>,<span class="number">24</span>,<span class="number">89</span>,<span class="number">120</span>, <span class="number">44</span>,<span class="number">55</span>,<span class="number">34</span>,<span class="number">100</span>,<span class="number">1</span>&#125;;</div><div class="line">    <span class="keyword">int</span> node_num = <span class="keyword">sizeof</span>(ary)/<span class="keyword">sizeof</span>(ary[<span class="number">0</span>]);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Node num:"</span>&lt;&lt;node_num&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="comment">// build tree</span></div><div class="line">    BTNode *root = build_binary_tree(ary, node_num);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\nThe Binary Tree is:"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    output_binary_tree(root);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
            <tag> BTree </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#2.链表的倒数第k个节点]]></title>
      <url>/2017/06/06/2-%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>找到一个单向链表的倒数第k个节点。 </p>
<hr>
<p><strong>考虑：</strong>  </p>
<p>1 . 空链表<br>2 . k的输入是否合法   </p>
<hr>
<p><strong>知识点：</strong>  </p>
<p>1 . <strong>创建链表：</strong>可以拆解为不断在当前链表后追加一个节点的操作。<br>链表尾节点：NODE *ptr;<br>创建1个节点：NODE *new_node = new NODE; new_node-&gt;data = val;<br>把该节点接到尾节点之后：ptr-&gt;next = new_node;<br>2 . <strong>倒数第k个节点：</strong>由于是单向链表，所以没办法倒着遍历。<br>策略1：第一轮遍历所有节点，得出链表长度n；第二轮向前走n-k+1步，到达倒数第k个节点。（共走了: n+n-k+1步）<br>策略2：可以采用以前一后相隔（k-1）个节点的两个指针，同时向前推进，当走在前面的指针到达链表尾部时，后面的指针刚好到达倒数第k个节点。（两个指针也共走了:n+n-k+1步）<br>两种策略需要访问的节点数量是一样的，但是为什么第二种策略看起来更聪明呢？<br>因为策略1是顺序执行的，先走n步，然后再走n-k+1步。O(2n)<br>策略二可以并行执行：先走k-1步，然后两个指针再一起走n-k+1步。O(n)  </p>
<hr>
<p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: 打印链表的倒数第k个节点</div><div class="line">* Idea: 考虑各种情况：空链表，k不合法，创建链表，释放链表。</div><div class="line">* Time: O(n)</div><div class="line">* Space:O(n)</div><div class="line">* Mistakes: 创建链表，指针应当先判断为空。ptr=nullptr时，访问ptr-&gt;next会报错。</div><div class="line">* 2017-06-04</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></div><div class="line">&#125;NODE;</div><div class="line"></div><div class="line"><span class="comment">// add a node after the pre_ptr</span></div><div class="line"><span class="function">NODE* <span class="title">add_node</span><span class="params">(NODE* pre_ptr, <span class="keyword">int</span> data)</span></span>&#123;</div><div class="line">    NODE* nd = <span class="keyword">new</span> NODE;</div><div class="line">    nd-&gt;n = data;</div><div class="line">    nd-&gt;next = <span class="literal">nullptr</span>;</div><div class="line">    pre_ptr-&gt;next = nd;</div><div class="line">    <span class="keyword">return</span> nd;</div><div class="line">&#125;</div><div class="line"><span class="comment">// create a link list</span></div><div class="line"><span class="function">NODE* <span class="title">create_linklist</span><span class="params">(NODE*head, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">    NODE *ptr;</div><div class="line">    ptr = <span class="keyword">new</span> NODE;</div><div class="line">    head = ptr;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=length; i++)&#123;</div><div class="line">        ptr = add_node(ptr, i);</div><div class="line">    &#125;</div><div class="line">    ptr-&gt;next = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div><div class="line"><span class="comment">// release the link list</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">release_linklist</span><span class="params">(NODE*head)</span></span>&#123;</div><div class="line">    NODE *ptr=head, *q;</div><div class="line">    <span class="keyword">while</span>(ptr!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        q = ptr;</div><div class="line">        <span class="keyword">delete</span> ptr;</div><div class="line">        ptr = q-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// output the link list</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_linklist</span><span class="params">(NODE* head)</span></span>&#123;</div><div class="line">    NODE* ptr = head-&gt;next;</div><div class="line">    <span class="keyword">while</span>(ptr != <span class="literal">nullptr</span>)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;ptr-&gt;n&lt;&lt;<span class="string">'\t'</span>;</div><div class="line">        ptr = ptr-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// output the</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">back_k_node</span><span class="params">(NODE* head, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">    <span class="comment">// null</span></div><div class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Link list is null!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="comment">// k &lt; 1</span></div><div class="line">    <span class="keyword">if</span>(k &lt;= <span class="number">0</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"k should be greater than 0!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line"></div><div class="line">    NODE *ptr1, *ptr2;</div><div class="line">    ptr1 = ptr2 = head-&gt;next;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k<span class="number">-1</span>; i++)&#123;</div><div class="line">        <span class="comment">// k &gt; num</span></div><div class="line">        <span class="keyword">if</span>(ptr1 == <span class="literal">nullptr</span>) &#123;<span class="keyword">break</span>;&#125;</div><div class="line">        ptr1 = ptr1-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(ptr1 == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">" is larger than the linklist size!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">while</span>(ptr1-&gt;next != <span class="literal">nullptr</span>)&#123;</div><div class="line">        ptr1 = ptr1-&gt;next;</div><div class="line">        ptr2 = ptr2-&gt;next;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="string">"th ele is: "</span>&lt;&lt;ptr2-&gt;n&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main func</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    NODE* head = <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">int</span> num = <span class="number">19</span>;</div><div class="line">    <span class="keyword">int</span> test_units[<span class="number">10</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-20</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">100</span>&#125;;</div><div class="line">    head = create_linklist(head, num);</div><div class="line">    print_linklist(head);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        back_k_node(head, test_units[i]);</div><div class="line">    release_linklist(head);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[#1.字符串转整数]]></title>
      <url>/2017/05/31/1-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[<hr>
<p><strong>要求：</strong></p>
<p>把一个字符串转变成整数： eg. “19088” -&gt; 19088, “-123” -&gt; -123 </p>
<hr>
<p><strong>考虑：</strong></p>
<ol>
<li>空指针</li>
<li>符号的正负</li>
<li>是包含非法字符：-, 0~9之外的。</li>
<li>结果是否溢出</li>
</ol>
<hr>
<p><strong>知识点：</strong></p>
<ol>
<li><p>字符串指针：  </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span>* strs[<span class="number">10</span>] = &#123;<span class="string">"aaa"</span>, <span class="string">"bb"</span>, <span class="literal">nullptr</span>, ..., <span class="string">"123"</span>&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>字符串指针操作: </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>* s; </div><div class="line">s++; <span class="comment">// 指针后移一位</span></div><div class="line"><span class="keyword">while</span>(*s != <span class="number">0</span>)&#123;&#125; <span class="comment">// 是否到字符串尾部'\0'</span></div></pre></td></tr></table></figure>
</li>
<li><p>有符号整数（int）的范围：[-2^31, 0), [0, 2^31 - 1)<br>2147483647     -2147483648<br>+0, -0 占了两个名额，所以2^31-1</p>
</li>
<li><p>判断 a + x 是否会溢出：   </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a + x &gt; INT_MAX</span></div><div class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"><span class="comment">// a + x &lt; INT_MIN</span></div><div class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>判断 a * x 是否会溢出：   </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// a * x &gt; INT_MAX</span></div><div class="line"><span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"><span class="comment">// a * x &lt; INT_MIN</span></div><div class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p><strong>代码：</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* Prob: 字符串转nt</div><div class="line">* Idea: overflow, null, illegal char, negtative.</div><div class="line">* Time: O(len(s))</div><div class="line">* Space: O(len(s))</div><div class="line">* Mistakes: 指针++，而不是*s++;</div><div class="line">* 2017-05-31</div><div class="line">*/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">will_overflow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> x, <span class="keyword">const</span> <span class="keyword">char</span>* type)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(type, <span class="string">"add"</span>))&#123;</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN - x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">if</span>(x &gt; <span class="number">0</span> &amp;&amp; (a &gt; INT_MAX / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> &amp;&amp; (a &lt; INT_MIN / x)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">str2int</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* s)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(s == <span class="literal">nullptr</span>) &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"null!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">    <span class="keyword">bool</span> neg = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span>(*s == <span class="string">'-'</span>) neg = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">int</span> number = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(*s != <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(*s == <span class="string">'-'</span>) &#123;s++;<span class="keyword">continue</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(*s &gt; <span class="string">'9'</span> || *s &lt;<span class="string">'0'</span>)&#123; <span class="built_in">cout</span>&lt;&lt;<span class="string">"illegal str!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        <span class="keyword">if</span>(!will_overflow(number, <span class="number">10</span>, <span class="string">"mul"</span>))&#123;</div><div class="line">            number = number * <span class="number">10</span>;</div><div class="line">            <span class="keyword">int</span> d = *s - <span class="string">'0'</span>;</div><div class="line">            <span class="keyword">if</span>(!will_overflow(number, d, <span class="string">"add"</span>)) &#123;number += d;&#125;</div><div class="line">            <span class="keyword">else</span> &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"overflow!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"overflow!"</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</div><div class="line">        s++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(neg) number = -number;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* strs[<span class="number">10</span>] = &#123;<span class="string">"-0"</span>, <span class="string">"0"</span>, <span class="literal">nullptr</span>,  <span class="string">"-18997"</span>, <span class="string">"-018997"</span>, <span class="string">"1232"</span>, <span class="string">"0018997"</span>, <span class="string">"9.34"</span>, <span class="string">"78dd90"</span>, <span class="string">"122139142182951451345134"</span>&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">':'</span>&lt;&lt;str2int(strs[i])&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tensorflow Get Started]]></title>
      <url>/2017/05/19/Tensorflow-Get-Started/</url>
      <content type="html"><![CDATA[<p>这篇博客的主要内容来自于<strong>Tensorflow的英文官方教程</strong>：<br><a href="https://www.tensorflow.org/get_started/get_started" target="_blank" rel="noopener">Getting started with tensorflow!</a>，同时加入了个人的理解和知识点的扩充。<br><strong>感谢上面那篇文章的作者，很棒的入门的教程！</strong></p>
<p>Tensorflow——An open-source software library for Machine Intelligence<br>–致力于深度学习的Python开源库。   </p>
<ul>
<li>Lowlevel API：较为底层的API，适合高级使用者:比较care模型性能的研究人员，和对底层代码很感兴趣的人员。   </li>
<li>Highlevel API: 高层一点的API，较lowlevel API好学，易用。能够帮助你方便地管理datasets，模型，完成训练和预测的工作。</li>
<li>请注意那些名字里有<em>contrib</em>的API: 这些API仍在developing阶段，tensorflow的代码是开源的，这意味着那些API可能处于变化中。如果感兴趣，你也可以加入到tensorflow的coding队伍中，变成一个为其他开发人员设计工具的开发人员。  </li>
</ul>
<p>我的寄语：<br>Dear friend,<br>建议你在学习tensorflow之前，  </p>
<ul>
<li>丰富自己的<strong>想象力</strong>， 因为你的脑海中需要构建出一幅<strong>data flow graph</strong>，这幅图能让你的代码思路更加清晰，这很重要，尤其是当你的模型越来越复杂，需要使用的tensorflow功能越来越多时。</li>
<li>不要着急去看Github上别人写的代码，先花些时间弄懂tensorflow 设计的抽象概念，这在之后能够帮助你快速理解别人的代码，并且自己也能够写出更棒的代码！</li>
<li>Tensorflow官网的documents很多，如果你是一个完完全全的新手，建议你从<a href="https://www.tensorflow.org/get_started/get_started" target="_blank" rel="noopener">Getting Started With TensorFlow</a>开始学习。  </li>
<li>学习资料比较长，请多一点耐心读完，并且随时动手敲代码！  </li>
</ul>
<h2 id="1-必须理解的概念："><a href="#1-必须理解的概念：" class="headerlink" title="1. 必须理解的概念："></a>1. 必须理解的概念：</h2><ol>
<li><p>Tensors: (数据)<br>任意维数的array，tensor的rank指的是array的维度:<br>eg.      </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># tensor examples</span></div><div class="line"><span class="number">3</span> <span class="comment"># rank:0, 1-d array, shape:[]</span></div><div class="line">[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>] <span class="comment"># rank:1, 1-d array, shape:[3]</span></div><div class="line">[[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>], [<span class="number">2.</span>,<span class="number">1.</span>,<span class="number">3.</span>]] <span class="comment"># rank:2, 2-d array or matrix, shape:[2, 3]</span></div><div class="line">[[[<span class="number">1.</span>,<span class="number">2.</span>,<span class="number">3.</span>], [<span class="number">2.</span>,<span class="number">1.</span>,<span class="number">3.</span>]]] <span class="comment"># rank:3, 3-d array or matrix, shape:[1, 2, 3]</span></div></pre></td></tr></table></figure>
<p> tensorflow把封装成一个Python类，使用类中的方法，可以方便地对array进行管理和操作。  </p>
</li>
<li><p>Computational Graph: (计算图)<br>数据量越大，计算过程越复杂，越需要一个清晰的思路整理数据处理的流程。Tensorflow通过data flow graph来记录对每部分数据要分别进行什么操作。<br><img src="/images/tensorflow/Computational-graph.jpg" alt="Computational graph"><br>Tensorflow把对数据的操作化作directed graph中的节点，数据（tensor）就是节点直接相连的边，可以想象数据在图上有向地流动，每次流进节点就会进行某种指定的操作，然后流出的是操作之后的数据。Tensorflow这个名字很明确地表达了自己的本质呢。<br>简单说来，tensorflow做的事情主要分为两步：</p>
<ol>
<li>生成computational graph;</li>
<li><p>执行computational graph;  </p>
<p>Computational graph的node，接受0个或任意多个tensor作为input，然后output一个tensor作为输出。是的，node可以没有输入，例如node本身就是一个constant，它不接受任何输入，执行的动作是：把存储在自己内部的数值输出。下面我们创建两个constant node试试看：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const_node_1 = tf.constant(<span class="number">3.0</span>, tf.float32)</div><div class="line">const_node_2 = tf.constant(<span class="number">4.0</span>) <span class="comment"># float默认就是tf.float32，可以不必显式指明</span></div><div class="line">const_node_3 = tf.constant(<span class="number">5</span>)   <span class="comment"># int 类型</span></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_1</div><div class="line">&lt;tf.Tensor <span class="string">'Const_11:0'</span> shape=() dtype=float32&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_2</div><div class="line">&lt;tf.Tensor <span class="string">'Const_10:0'</span> shape=() dtype=float32&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>const_node_3</div><div class="line">&lt;tf.Tensor <span class="string">'Const_9:0'</span> shape=() dtype=int32&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<p>Â<br>    这里并没有显示每个constant内部存储的值，但是别担心，在它们真正参与计算时，3.0,4.0和5都会乖乖出现的。这里我们只是生成了一个包含三个constant nodes的computational graph，它现在是静态的，并没有进行任何实质上的操作，下一步我们通过run这个graph，让数据真正地flow起来!</p>
<ol>
<li><p>Session：(会话)<br>Computational graph的运行必需要处在一个叫做：session的环境中才可以进行，session像一个厉害的大管家，为我们隔离了许多复杂的控制和状态，让我们不必为这些琐碎的问题操心。下面我们就来创建一个session，期待看到数据流动起来的样子：  </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess = tf.Session()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess</div><div class="line">&lt;tensorflow.python.client.session.Session object at <span class="number">0x7f5fddfaab38</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess.run([const_node_1, const_node_2])</div><div class="line">[<span class="number">3.0</span>, <span class="number">4.0</span>] <span class="comment"># 3.0 and 4.0 as we expected</span></div></pre></td></tr></table></figure>
<p> 来点更复杂一些的操作：比如让上面两个节点的值相加：3.0 + 4.0</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add_node_1 = tf.add(const_node_1, const_node_2)</div><div class="line">print(sess.run(add_node_1))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">7.0</span></div></pre></td></tr></table></figure>
</li>
<li><p>Placeholder: (data)<br> 可能你还是觉得太简单了，两个常数相加挺无聊的，我想自己指定两个加数的值：  </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = tf.placeholder(tf.float32)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = tf.placeholder(tf.float32)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_node_2 = tf.add(a, b) <span class="comment"># 等价于：add_node_2 = a + b</span></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess.run(add_node_2, &#123;a:<span class="number">1</span>, b:<span class="number">5</span>&#125;)<span class="comment"># 虽然是int, 仍然当成tf.float32</span></div><div class="line"><span class="number">6.0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess.run(add_node_2, &#123;a:[<span class="number">1</span>,<span class="number">3</span>], b:[<span class="number">2.2</span>,<span class="number">3.4</span>]&#125;)</div><div class="line">[ <span class="number">3.20000005</span>  <span class="number">6.4000001</span> ]</div></pre></td></tr></table></figure>
<p> 这里我们用到了<em>Placeholder</em>：它相当于函数在定义时的形参，在使用的时候就会被赋予具体的值；同时我们可以指定传入参数的类型：例如 tf.float32。Placeholder 在定义时不能初始化，它的赋值必须在run时进行。<br> 注：观察到上面1 + 2.2 和3+3.4的结果比真实值稍稍大了一点点，通过尝试tf.float16, tf.float64的    placeholder(), 可以发现，小数的精度越高这个误差越小。<br> 下面我们更进一步实现(a + b) * c 的计算过程：  </p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用两个node实现</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = tf.placeholder(tf.float32)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_mult_node_1 = add_node_2 * c</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess.run(add_mult_node_1, &#123;a:<span class="number">1.1</span>, b:<span class="number">2.2</span>, c:<span class="number">3.</span>&#125;)</div><div class="line"><span class="number">9.9</span></div><div class="line"><span class="comment"># 使用一个node实现</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>add_mult_node_2 = (a + b) * c</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sess.run(add_mult_node_2, &#123;a:<span class="number">1.1</span>, b:<span class="number">2.2</span>, c:<span class="number">3.</span>&#125;)</div><div class="line"><span class="number">9.9</span></div></pre></td></tr></table></figure>
<p> 在这个过程中，我们需要在心里绘制出一幅computational graph， 如果操作很多也可以直接画在纸上。<br> <strong>Important</strong>: Placeholder如果在定义时被赋值，将会报错! Its value must be fed using the feed_dict     optional argument to Session.run(), Tensor.eval(), or Operation.run().</p>
</li>
<li><p>Variables：(params)<br>在Tensorflow中，我们使用Variables来存储和更新parameters。 Variables 是存储在内存中的 tensors. 它们必须在launch graph之前显式初始化，还可以training过程中和training结束之后存储到你的磁盘上，以便下次直接使用该模型。</p>
<p> 我们需要明确Placeholder和Variable的使用：</p>
<ul>
<li>Input data 通常声明为Placeholder</li>
<li>Model 的参数通常声明为Variable</li>
<li>Placeholder 为feed data而生，定义时不能赋值，其内容为空，执行时通过 run()，eval() 等方法赋予实际值</li>
<li><p>Variable 为模型参数而生，定义时必须提供初值，数据类型可以是任意type、shape 的 Tensor 。   </p>
<p>下面我们通过一个简单的Linear Model看看如何使用Variable定义模型参数：lm = W * x + b</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">W = tf.Variable([<span class="number">.3</span>], tf.float32)</div><div class="line">b = tf.Variable([<span class="number">-.3</span>], tf.float32)</div><div class="line">x = tf.placeholder(tf.float32)</div><div class="line">linear_model = W * x + b</div></pre></td></tr></table></figure>
<p>初始化Variables:  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">init = tf.global_variables_initializer()</div><div class="line">sess.run(init)</div></pre></td></tr></table></figure>
<p>run init会初始化整个graph中的所有全局Variables；TensorFlow是lazy执行的，在run之前，所有的Variables都没有被赋予实际的值。<br>下一步我们feed一组input样本x给我们可爱的linear model，看它会有什么输出：  </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">print(sess.run(linear_model, &#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line">[ <span class="number">0.</span>          <span class="number">0.30000001</span>  <span class="number">0.60000002</span>  <span class="number">0.90000004</span>]</div></pre></td></tr></table></figure>
<p>现在我们需要知道这个linear_model的预测效果如何，接下来我们将给出样本的真实值<em>y</em>, 通过_loss<em>function</em>对比模型的输出_y<em>m</em>和真实值y之间的差异。loss function的类型很多，这里选择简单的平方误差函数：loss = (y_m - y)^2</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">y = tf.placeholder(tf.float32)</div><div class="line">squared_deltas = tf.square(linear_model - y) <span class="comment"># 单个样本预测误差</span></div><div class="line">loss = tf.reduce_sum(squared_deltas) 		 <span class="comment"># 整体样本预测误差</span></div><div class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y: [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">23.66</span></div></pre></td></tr></table></figure>
<p><img src="/images/tensorflow/origin_lm.png" alt="Origin Linear Model"><br>哎呀，这个模型的误差足足有<em>23.66</em>，效果不够理想！我们需要对它进行改进，通常训练模型的过程会通过最小化误差函数自动调整模型参数，从而使模型达到最优，这里我们为了方便，就直接给出最优模型。best_linear_model = -1.0 * x + 1.0， 这一步我们更新模型参数W,b的值为-1.0， 1.0。<br>更新Variable的值，可以通过tf.assign()方法实现：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># assign best val for W and b</span></div><div class="line">fix_W = tf.assign(W, [<span class="number">-1.</span>])</div><div class="line">fix_b = tf.assign(b, [<span class="number">1.</span>])</div><div class="line"><span class="comment"># do the operation acturally</span></div><div class="line">sess.run([fix_W, fix_b])</div><div class="line">print(sess.run(loss, &#123;x: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y: [<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;))</div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="number">0.0</span></div></pre></td></tr></table></figure>
<p>现在model的loss是0，效果有了很大的提升！</p>
</li>
</ul>
</li>
<li><p>自动调参：<br>既然是<em>machine learning</em>，不能每次都手动更新参数吧，别着急，这一步我们学习如何自动更新模型参数，从而提升预测效果。<br>Tensorflow提供了许多类型的optimizer，在train阶段，这些optimizer能够自动优化你指定的<strong>目标函数</strong>，通常是让损失函数达到最小。tf.train.GradientDescentOptimizer是最简单的optimizer。<br>其原理是：梯度下降法。把要优化的目标函数想象成一座座连绵的山，我们从山中的任意一点开始下山，目标是尽快到达山下的<em>最低点</em>，梯度下降法的策略是：求当前位置的梯度g（最陡的方向下山最快），然后沿着梯度的负方向走一步，这一步应该迈的距离是learning<em>rate，也叫</em>步长_。步长的太大可能会导致错过最低点，太小又可能导致收敛的太慢，因此需要小心地选择一个合适的步长。<br>备注: GradientDescent算法不能保证每次都收敛到全局最优解，有时候你很可能得到的只是一个局部最优解。<br>当然，optimizer使用起来十分easy，因为它就是个黑盒子，我们只需要告诉它要优化的目标函数，它就会自动帮我们找到最优解。</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># choose an optimizer</span></div><div class="line">optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</div><div class="line"><span class="comment"># tell it what to do next</span></div><div class="line">train = optimizer.minimize(loss)</div><div class="line"><span class="comment"># init W, b with</span></div><div class="line">sess.run(init)  </div><div class="line"><span class="comment"># train loop</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">  sess.run(train, &#123;x:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], y:[<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>]&#125;)</div><div class="line">print(sess.run([W, b]))</div><div class="line"><span class="comment"># output</span></div><div class="line">[array([<span class="number">-0.9999969</span>], dtype=float32), array([ <span class="number">0.99999082</span>],</div><div class="line"> dtype=float32)]</div></pre></td></tr></table></figure>
<p> 经过1000次迭代之后，W,b 已经十分接近标准答案-1.0,1.0了，我们完成了就是自动学习参数的过程！</p>
</li>
</ol>
<h2 id="2-完整的模型训练过程："><a href="#2-完整的模型训练过程：" class="headerlink" title="2. 完整的模型训练过程："></a>2. 完整的模型训练过程：</h2><p>上一步我们直接给出了模型的最优参数，接下来我们进行一次真正意义上的<em>Machine Learning</em>，让模型自己学习出最优的W,b。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="string">"""complete_example_tf.py</span></div><div class="line">Description: a complete example for tensorflow tutorial.</div><div class="line">Date: 2017-05-19</div><div class="line">Author: MonkandMonkey</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># A complete tensorflow example</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complete_try</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># max iteration times</span></div><div class="line">    max_iter = <span class="number">1000</span></div><div class="line">    <span class="string">'''Construct the computational graph'''</span></div><div class="line">    <span class="comment"># model parameters</span></div><div class="line">    W = tf.Variable([<span class="number">.3</span>], tf.float32)</div><div class="line">    b = tf.Variable([<span class="number">-.3</span>], tf.float32)</div><div class="line">    <span class="comment"># model input and output</span></div><div class="line">    x = tf.placeholder(tf.float32)</div><div class="line">    liner_model = W * x + b  <span class="comment"># predict y</span></div><div class="line">    y = tf.placeholder(tf.float32)  <span class="comment"># true y</span></div><div class="line">    <span class="comment"># define loss function</span></div><div class="line">    suqared_deltas = tf.square(liner_model - y)</div><div class="line">    loss = tf.reduce_sum(suqared_deltas)</div><div class="line">    <span class="comment"># choose an optimizer</span></div><div class="line">    optimizer = tf.train.GradientDescentOptimizer(learning_rate=<span class="number">0.01</span>)</div><div class="line">    <span class="comment"># set the train object</span></div><div class="line">    train = optimizer.minimize(loss)</div><div class="line"></div><div class="line">    <span class="string">'''Prepare training data'''</span></div><div class="line">    x_train = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">    y_train = [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, - <span class="number">3</span>]</div><div class="line"></div><div class="line">    <span class="string">'''Run the graph'''</span></div><div class="line">    sess = tf.Session()</div><div class="line">    init = tf.global_variables_initializer()</div><div class="line">    sess.run(init)  <span class="comment"># initialize params: W, b</span></div><div class="line">    <span class="comment"># training loop</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</div><div class="line">        <span class="keyword">if</span> i % <span class="number">50</span> == <span class="number">0</span>:</div><div class="line">            curr_W, curr_b, curr_loss = sess.run([W, b, loss], feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line">            print(<span class="string">"[&#123;:0&gt;3&#125;] - W: &#123;:&lt;5.4f&#125;, b: &#123;:&lt;6.4f&#125;, loss: &#123;:&lt;6.4f&#125;"</span>.format(i, curr_W[<span class="number">0</span>], curr_b[<span class="number">0</span>], curr_loss))</div><div class="line">        sess.run(train, feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line"></div><div class="line">    <span class="comment"># evaluate the accuracy</span></div><div class="line">    trained_W, trained_b, trained_loss = sess.run([W, b, loss], feed_dict=&#123;x: x_train, y: y_train&#125;)</div><div class="line">    print(<span class="string">"Training result:"</span>)</div><div class="line">    print(<span class="string">"  W: &#123;:&lt;5.4f&#125;, b: &#123;:&lt;6.4f&#125;, loss: &#123;:&lt;6.4f&#125;"</span>.format(trained_W[<span class="number">0</span>], trained_b[<span class="number">0</span>], trained_loss))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> trained_W[<span class="number">0</span>], trained_b[<span class="number">0</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Pic for tensorflow tutorial</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic_tensorflow</span><span class="params">(W, b)</span>:</span></div><div class="line">    y = np.array([<span class="number">0</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>])</div><div class="line">    x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">    y_m = W * x + b</div><div class="line"></div><div class="line">    plt.plot(x, y, <span class="string">'b.'</span>, x, y_m, <span class="string">'r-'</span>)</div><div class="line"></div><div class="line">    <span class="comment"># add labels</span></div><div class="line">    plt.xlabel(<span class="string">"x"</span>)</div><div class="line">    plt.ylabel(<span class="string">"y"</span>)</div><div class="line">    <span class="comment"># add legends</span></div><div class="line">    plt.legend([<span class="string">"y-truth"</span>, <span class="string">"y-predict"</span>])</div><div class="line">    <span class="comment"># add title</span></div><div class="line">    plt.title(<span class="string">"Best linear_model: W=&#123;:.2f&#125;, b=&#123;:.2f&#125;"</span>.format(W, b))</div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic_tensorflow: a simple plot for tensorflow get started!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(<span class="string">"Start running!"</span>)</div><div class="line">    W, b = complete_try()<span class="comment"># train the model</span></div><div class="line">    pic_tensorflow(W, b) <span class="comment"># plot the model</span></div></pre></td></tr></table></figure></p>
<p>这里借用tensroflow的computational graph:<br><img src="https://www.tensorflow.org/images/getting_started_final.png" alt="Graph for this linear model"><br>这幅图远比我们想象得要复杂一些，不过很多细节都是tensorflow帮我们补充上的，我们只需要确保那些关键细节正确。</p>
<h2 id="3-还能更简单？"><a href="#3-还能更简单？" class="headerlink" title="3. 还能更简单？"></a>3. 还能更简单？</h2><p><em>tf.contrib.learn</em> 让 Machine learning 的过程进一步地简化，属于更加high level的API，让整个machine learning的过程看起来越来越像你草稿纸上的几行简单的“算法思路”。<br>仍以Linear Model为例，我们看看使用<em>tf.contrib.learn</em>如何完成相同的事情：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="comment"># NumPy 包通常用于处理数据</span></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># input data：only 1 feature - x</span></div><div class="line">features = [tf.contrib.layers.real_valued_column(<span class="string">"x"</span>, dimension=<span class="number">1</span>)]</div><div class="line"></div><div class="line"><span class="comment"># estimator: provide the handler for model's fitting and evaluation</span></div><div class="line"><span class="comment"># 更多类型的estimator可以查阅API</span></div><div class="line">estimator = tf.contrib.learn.LinearRegressor(feature_columns=features)</div><div class="line"></div><div class="line"><span class="comment"># read and set up data sets.</span></div><div class="line"><span class="comment"># numpy_input_fn: 读入、划分数据集为一个个batch</span></div><div class="line"><span class="comment"># 1 epoch: 使用一遍data set</span></div><div class="line">x = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</div><div class="line">y = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</div><div class="line">input_fn = tf.contrib.learn.io.numpy_input_fn(&#123;<span class="string">"x"</span>: x&#125;, y, batch_size=<span class="number">4</span>,</div><div class="line">                                                  num_epochs=<span class="number">1000</span>)</div><div class="line"><span class="comment"># 训练迭代1000次</span></div><div class="line">estimator.fit(input_fn=input_fn, steps=<span class="number">1000</span>)</div><div class="line"></div><div class="line"><span class="comment"># 检验模型的效果（实际使用应当在test set进行）</span></div><div class="line">print(estimator.evaluate(input_fn=input_fn))</div></pre></td></tr></table></figure></p>
<p>tf.contrib提供了许多常用的model,例如：linear regression,logistic regression, linear classification, logistic classification, and many neural network classifiers and regressors。当然，如果你想自己定制model,也是可以的，下面就是一个自己定制的Linear Model例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># featiures: [x], labels: true y, mode:</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">model</span><span class="params">(features, labels, mode)</span>:</span></div><div class="line">    <span class="comment"># Build a linear model and predict values</span></div><div class="line">    W = tf.get_variable(<span class="string">"W"</span>, [<span class="number">1</span>], dtype=tf.float64)</div><div class="line">    b = tf.get_variable(<span class="string">"b"</span>, [<span class="number">1</span>], dtype=tf.float64)</div><div class="line">    y = W * features[<span class="string">'x'</span>] + b</div><div class="line">    <span class="comment"># Loss sub-graph</span></div><div class="line">    loss = tf.reduce_sum(tf.square(y - labels))</div><div class="line">    <span class="comment"># Training sub-graph</span></div><div class="line">    global_step = tf.train.get_global_step()</div><div class="line">    optimizer = tf.train.GradientDescentOptimizer(<span class="number">0.01</span>)</div><div class="line">    train = tf.group(optimizer.minimize(loss),</div><div class="line">                     tf.assign_add(global_step, <span class="number">1</span>))</div><div class="line">    <span class="comment"># ModelFnOps connects subgraphs we built to the</span></div><div class="line">    <span class="comment"># appropriate functionality.</span></div><div class="line">    <span class="keyword">return</span> tf.contrib.learn.ModelFnOps(</div><div class="line">        mode=mode, predictions=y,</div><div class="line">        loss=loss,</div><div class="line">        train_op=train)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    estimator = tf.contrib.learn.Estimator(model_fn=model)</div><div class="line">    <span class="comment"># define our data set</span></div><div class="line">    x = np.array([<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>])</div><div class="line">    y = np.array([<span class="number">0.</span>, <span class="number">-1.</span>, <span class="number">-2.</span>, <span class="number">-3.</span>])</div><div class="line">    input_fn = tf.contrib.learn.io.numpy_input_fn(&#123;<span class="string">"x"</span>: x&#125;, y, <span class="number">4</span>, num_epochs=<span class="number">1000</span>)</div><div class="line">    <span class="comment"># train</span></div><div class="line">    estimator.fit(input_fn=input_fn, steps=<span class="number">1000</span>)</div><div class="line">    <span class="comment"># evaluate our model</span></div><div class="line">    print(estimator.evaluate(input_fn=input_fn, steps=<span class="number">10</span>))</div></pre></td></tr></table></figure></p>
<p>上一部分中的tf.contrib.learn.LinearRegressor，是tf.contrib.learn.Estimator的一个sub-class, 如果我们要定义自己的model, 也需要继承Estimator类。可以通过定义<em>model_fn</em>函数，来描述是一个怎样的model。<em>model_fn</em>中需要指明:fit, loss, evaluate，整个流程看起来非常像我们第二部分中使用low level API实现的例子： 定义parameters, 定义model， 定义loss, optimizer。就好像我们分别设计个几个sub-graphs，然后使用<em>ModelFnOps</em>把各个子图连接起来。</p>
<hr>
<p>读到这里，你应该已经了解了tensorflow的基本套路，面对长长的示例代码也不怕了, 写起代码来也更得心应手。<br>希望本文对你的理解有所帮助！(<em>^_^</em>)</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> tensorflow </tag>
            
            <tag> machine learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python中_的疑惑]]></title>
      <url>/2017/05/17/Python%E4%B8%AD-%E7%9A%84%E7%96%91%E6%83%91/</url>
      <content type="html"><![CDATA[<p>在Tensorflow tutorial：RNN教程的示例代码中，发现了”_”的使用：   </p>
<p><img src="/images/python/useof_1.PNG" alt="tensorflow example which uses &#39;_&#39;"></p>
<p>经过查阅，将其身世简单记录如下：<br>在Python中，变量的命名规则是：变量名必须是大小写英文、数字和<em>的组合，且不能用数字开头，所以a single </em> 是可以作为变量名的，虽然看起来怪怪的。<br><em>的一个常见用途是：充当一个占位符，有时候，某个位置必须要写一个变量，但是这个变量后面又不会用到，这时候会使用\</em>当变量名，又叫throwaway variable。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">n = <span class="number">0</span></div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> tbh.bag.atom_set():</div><div class="line">	n += <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>又如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">label, has_label, _ = text.partition(<span class="string">':'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows下mysql安装]]></title>
      <url>/2017/05/10/windows%E4%B8%8Bmysql%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<ol>
<li>下载 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL Server 5.17.16 Community</a>版:<br> 选择os version (x64)<br> 下载下面的第一个ZIP文件</li>
<li>解压到指定目录（无需安装，解压就行）  </li>
<li>bin路径添加到<strong>Path</strong>环境变量</li>
<li><p>在解压的根目录下，新建配置文件：my.ini   </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[mysql]</div><div class="line"><span class="comment"># 设置mysql客户端默认字符集</span></div><div class="line">default-character-set=utf8</div><div class="line"> </div><div class="line">[mysqld]</div><div class="line"><span class="comment"># 设置3306端口</span></div><div class="line">port = 3306</div><div class="line"><span class="comment"># 设置mysql的安装目录</span></div><div class="line">basedir=path-to\MySQL\install</div><div class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></div><div class="line">datadir=path-to\MySQL\install\sqldata</div><div class="line"><span class="comment"># 允许最大连接数</span></div><div class="line">max_connections=50</div><div class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></div><div class="line">character-set-server=utf8</div><div class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></div><div class="line">default-storage-engine=INNODB</div></pre></td></tr></table></figure>
</li>
<li><p>管理员打开cmd，cd 到MySQL的bin目录下：  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; mysqld install</div></pre></td></tr></table></figure>
<p> 安装mysql服务成功！</p>
</li>
<li><p>启动mysqld服务:  </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div><div class="line">``` </div><div class="line">发现失败：需要手动初始化data目录：</div><div class="line">```bash</div><div class="line">&gt; mysqld --initialize-insecure</div></pre></td></tr></table></figure>
<p> 再次运行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; net start mysql</div></pre></td></tr></table></figure>
<p> 成功！</p>
</li>
<li><p>创建用户，设置密码:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; mysql -u root <span class="comment"># root 登陆</span></div><div class="line"><span class="comment"># 创建用户amy，设置密码，授权</span></div><div class="line">&gt; create user <span class="string">'amy'</span>@<span class="string">'localhost'</span> identified by <span class="string">'pwd'</span>;</div><div class="line">&gt; grant all privileges on *.* to amy@<span class="string">'localhost'</span>;</div><div class="line">&gt; <span class="built_in">exit</span> <span class="comment"># 退出当前登陆</span></div><div class="line">&gt; mysql -u amy -p</div><div class="line">&gt; your_pwd <span class="comment"># 输入刚刚为用户amy设置的密码</span></div></pre></td></tr></table></figure>
</li>
<li><p>执行sql语句:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; show databases;</div></pre></td></tr></table></figure>
<p> 可以看到系统默认的数据库。</p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[matplotlib绘图笔记]]></title>
      <url>/2017/05/09/matplotlib%E7%BB%98%E5%9B%BE%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>本篇记录使用matplotlib进行简单的数据可视化。</p>
<h3 id="1-matplotlib-与-pyplot"><a href="#1-matplotlib-与-pyplot" class="headerlink" title="1. matplotlib 与 pyplot"></a>1. matplotlib 与 pyplot</h3><p>按照官网的说明：pyplot是matplotlib 的一个module。通常，我们也只是使用这一个module。但是dir(matplotlib)并没有查看到其中包含pyplot，这就让人很好奇了。<br>matplotlib是一个python <em>libary</em>， pyplot 是一个 <em>module</em>。那么，libary和module, 还有package到底是什么呢？   </p>
<ul>
<li>module: a module in python is a .py file that defines one or more function/classes which you intend to reuse in different codes of your program.<br>模块：简单的说就是.py文件，我们会把想要重复使用的代码放到module里。使用时直接import。</li>
<li>package: a directory of Python module(s).<br>包：通常我们把一些相关的module文件组织在一起。dir查看一个package，它一定具有<strong>path</strong>变量，module则没有。</li>
<li>libary: When used in Python, a library is used loosely to describe a collection of the core modules.<br>库：libary这种叫法在Python里并不常见，matplotlib其实是一个package,我们在python 的PyPI - the Python Package Index里可以查到它哦。<br>现在，我们知道了：matplotlib是一个package，而面向用户的功能主要由其中的<em>pyplot</em> modulet提供，因此我们使用时常常这样写：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure>
<h3 id="2-matplotlib-的基本概念"><a href="#2-matplotlib-的基本概念" class="headerlink" title="2. matplotlib 的基本概念"></a>2. matplotlib 的基本概念</h3><ul>
<li>figure: 可以理解成画板上的画布，是最最基础的。</li>
<li>axes:   画布通常可以划分成多个小的区域，我们在不同区域作画，这些小的区域叫做axes。如果不划分，那么整个画布就是一个绘图区域。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 一幅图</span></div><div class="line">fig = plt.figure()</div><div class="line"><span class="comment"># 多幅图:分成m*n块子图</span></div><div class="line">fig, axes = plt.subplots(m, n)</div><div class="line">axes[<span class="number">0</span>].plot(x, y)</div><div class="line"><span class="comment"># 划分，并切换到第一个子图</span></div><div class="line">plt.subplot(<span class="number">121</span>)</div><div class="line">plt.plot(x, y)</div></pre></td></tr></table></figure>
<h3 id="3-使用示例："><a href="#3-使用示例：" class="headerlink" title="3. 使用示例："></a>3. 使用示例：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># -*-coding:utf-8-*-</span></div><div class="line"></div><div class="line"><span class="string">"""learn.py</span></div><div class="line">Description: Learn to use pyplot</div><div class="line">Date: 2017-05-08</div><div class="line">Author: MonkandMonkey</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div><div class="line"><span class="keyword">import</span> matplotlib.mlab <span class="keyword">as</span> mlab</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a simple pic</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic1</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># evenly sampled time at 200ms intervals</span></div><div class="line">    y = np.arange(<span class="number">0.</span>, <span class="number">10.</span>, <span class="number">1.</span>)</div><div class="line"></div><div class="line">    <span class="comment"># red dashes, blue squares and green triangles</span></div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    <span class="comment"># x axis range, y axis range</span></div><div class="line">    plt.xlim([<span class="number">0</span>, <span class="number">10</span>])</div><div class="line">    plt.ylim([<span class="number">0</span>, <span class="number">1000</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic1: a simple plot with three different markers and colors!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># Draw a pic with text</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic2</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.4</span>)</div><div class="line"></div><div class="line">    <span class="comment"># plot dot</span></div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    <span class="comment"># add labels</span></div><div class="line">    plt.xlabel(<span class="string">"no"</span>)</div><div class="line">    plt.ylabel(<span class="string">"num"</span>)</div><div class="line">    <span class="comment"># add legends</span></div><div class="line">    plt.legend([<span class="string">"legend1"</span>, <span class="string">"legend2"</span>])</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    <span class="comment"># add tilte</span></div><div class="line">    plt.title(<span class="string">"Pic2: work with text"</span>)</div><div class="line">    print(<span class="string">"Plot pic2: a simple plot with xlabel and ylabel!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># subplots</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic3</span><span class="params">()</span>:</span></div><div class="line">    y = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0.5</span>)</div><div class="line"></div><div class="line">    plt.figure()</div><div class="line">    <span class="comment"># m, n, no of axes</span></div><div class="line">    plt.subplot(<span class="number">121</span>)</div><div class="line">    plt.plot(y, y, <span class="string">'r--'</span>, y, y ** <span class="number">2</span>, <span class="string">'bs'</span>, y, y ** <span class="number">3</span>, <span class="string">'g^'</span>)</div><div class="line">    plt.title(<span class="string">"sub1"</span>)</div><div class="line"></div><div class="line">    plt.subplot(<span class="number">122</span>)</div><div class="line">    plt.plot(y, <span class="number">2</span> * y, <span class="string">"r--"</span>, y, y ** <span class="number">2</span>, <span class="string">"bs"</span>)</div><div class="line">    plt.title(<span class="string">"sub2"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Plot pic3: subplots!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># boxplot</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic4</span><span class="params">()</span>:</span></div><div class="line">    data = [&#123;<span class="string">"a"</span>: <span class="string">"aaa"</span>, <span class="string">"b"</span>: <span class="number">22.3</span>, <span class="string">"c"</span>: <span class="number">20</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"bbb"</span>, <span class="string">"b"</span>: <span class="number">41.2</span>, <span class="string">"c"</span>: <span class="number">2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ccc"</span>, <span class="string">"b"</span>: <span class="number">52.22</span>, <span class="string">"c"</span>: <span class="number">5</span>&#125;,</div><div class="line">            &#123;<span class="string">"a"</span>: <span class="string">"dddd"</span>, <span class="string">"b"</span>: <span class="number">28.9</span>, <span class="string">"c"</span>: <span class="number">19.2</span>&#125;, &#123;<span class="string">"a"</span>: <span class="string">"ee"</span>, <span class="string">"b"</span>: <span class="number">28.3</span>, <span class="string">"c"</span>: <span class="number">11</span>&#125;]</div><div class="line">    df = pd.DataFrame(data)</div><div class="line">    df.set_index([<span class="string">"a"</span>])</div><div class="line">    y = df[<span class="string">"b"</span>]</div><div class="line">    plt.boxplot(y)</div><div class="line"></div><div class="line">    <span class="comment"># config</span></div><div class="line">    plt.title(<span class="string">"pic4: box plot"</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="comment"># histogram</span></div><div class="line"><span class="comment"># ============================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">pic5</span><span class="params">()</span>:</span></div><div class="line">    fig, ax = plt.subplots()</div><div class="line">    mu = <span class="number">50</span></div><div class="line">    sigma = <span class="number">2.5</span></div><div class="line">    <span class="comment"># normalization rand float 800*1 dim</span></div><div class="line">    y = mu + sigma * np.random.randn(<span class="number">800</span>)</div><div class="line"></div><div class="line">    n, bins, patches = plt.hist(y, <span class="number">100</span>, normed=<span class="number">1</span>)</div><div class="line">    <span class="comment"># add a 'best fit' line</span></div><div class="line">    y = mlab.normpdf(bins, mu, sigma)</div><div class="line">    ax.plot(bins, y, <span class="string">'--'</span>)</div><div class="line"></div><div class="line">    ax.set_xlabel(<span class="string">'Smarts'</span>)</div><div class="line">    ax.set_ylabel(<span class="string">'Probability density'</span>)</div><div class="line">    ax.set_title(<span class="string">r'Histogram of IQ: $\mu=100$, $\sigma=15$'</span>)</div><div class="line"></div><div class="line">    plt.show()</div><div class="line">    print(<span class="string">"Pic5: histogram!"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    pic5()</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> plot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 python argparse: 编写友好的命令行接口]]></title>
      <url>/2017/05/07/%E4%BD%BF%E7%94%A8python%20argparse%20%E7%BC%96%E5%86%99%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8E%A5%E5%8F%A3/</url>
      <content type="html"><![CDATA[<p>Python 的 <em>args 和 kwargs 总是感觉对人不太友好，直到 <em>*argparse</em></em> 模块的出现解救了我！学习 <a href="https://docs.python.org/3/howto/argparse.html" target="_blank" rel="noopener">argparse Tutorial</a> 的时候又不小心发现了格式化字符串的函数<a href="https://pyformat.info/" target="_blank" rel="noopener">“str”.format</a>,瞬间，有了一种进城的感觉。<br><img src="http://img.boqiicdn.com/Data/Bbs/Users/132/13229/1322908/img90981381981050.gif" alt="dakang"></p>
<p>argparse模块使得编写用户友好的命令行接口非常容易。程序只需定义好它要求的参数，然后argparse将负责如何从sys.argv中解析出这些参数。argparse模块还会自动生成帮助和使用信息并且当用户赋给程序非法的参数时产生错误信息。</p>
<p>首先准备一下基础知识：<br>arguments即：参数，函数被调用时，必须要知道的一些信息。有时函数需要接收不止一个参数，这么多参数，它如何一一对上号呢？这个对号入座的策略就是Python的参数传递机制。 </p>
<h3 id="策略1-positional-arguments-位置参数"><a href="#策略1-positional-arguments-位置参数" class="headerlink" title="策略1 - positional arguments: 位置参数"></a>策略1 - positional arguments: 位置参数</h3><p>位置参数即：函数和大家声明好了，传给我的第一个参数是梨，第二个参数是枣，第三个参数是西瓜，你们调用我的时候必须按照这个顺序来，出错了我可不负责哦！😝<br>优点：输入简洁，方便<br>缺点：参数多时，准确记住顺序困难，输入量也很大。   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a, b)</span>:</span></div><div class="line">	<span class="keyword">return</span> a-b</div><div class="line"><span class="comment"># 调用</span></div><div class="line">subtract(<span class="number">3</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="策略2-keyword-arguments-关键字参数"><a href="#策略2-keyword-arguments-关键字参数" class="headerlink" title="策略2 - keyword arguments: 关键字参数"></a>策略2 - keyword arguments: 关键字参数</h3><p>如果你实在记不住参数的顺序，但你可以记得你参数的名字，那么你可以使用keyword arguments,常常见到Github上别人家的代码充斥着 <em>*args</em> , <em>kwargs</em> 这些天书一般的符号，看得都晕了，但其实，它们虽然写起来比较复杂，但是对于调用者来说却十分方便。使用时，不必记住每个参数的顺序，只需告诉函数我这个参数的名字和值，函数就知道如何对应。如果你觉得输入名字太麻烦，按顺序给参数也可以，兼容位置参数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">	<span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>, <span class="number">2</span>)</div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>)</div></pre></td></tr></table></figure></p>
<h3 id="策略3-optional-arguments-可选参数"><a href="#策略3-optional-arguments-可选参数" class="headerlink" title="策略3 - optional arguments: 可选参数"></a>策略3 - optional arguments: 可选参数</h3><p>实际上，我们常常只会用到函数的一部分参数，如果想要你的函数对别人友好一些，那就得辛苦一下在代码里多写几行了。如果调用者制定了参数的值，那就使用这个值，如果没有，那就使用默认值。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(substract_start, substract_end)</span>:</span></div><div class="line">    <span class="keyword">return</span> substract_start-substract_end</div><div class="line"><span class="comment"># 调用: 3-2=?</span></div><div class="line">subtract(<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_start=<span class="number">3</span>) <span class="comment"># 3-1=?</span></div><div class="line">subtract(substract_end=<span class="number">2</span>, substract_start=<span class="number">3</span>) <span class="comment"># 3-2=?</span></div></pre></td></tr></table></figure>
<h3 id="argeparse-使用"><a href="#argeparse-使用" class="headerlink" title="argeparse 使用"></a>argeparse 使用</h3><p>需要注意的一点： argparse 用于编写<strong>用户</strong>交互命令行接口，前面我们说的是函数调用的接口，这一点要清楚。argparse能让你的程序更加友好，更加鲁棒，用户的肆意输入也不会让它崩溃，同时还能提供提示信息，告诉用户如何正确地使用你的程序。<br>下面我们通过栗子来看看，argparse到底有多方便：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="string">""" Command-line arg parsing library</span></div><div class="line">    Example Usage:</div><div class="line">    - python learn_argparse.py -h</div><div class="line">    - python learn_argparse.py "hello"</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f</div><div class="line">    - python learn_argparse.py "hello" -d 1.66 -f -t clean</div><div class="line">"""</div><div class="line"><span class="keyword">import</span> argparse</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="comment"># CPython argparse Example</span></div><div class="line"><span class="comment"># =========================</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    parser = argparse.ArgumentParser()</div><div class="line">    <span class="comment"># add arguments</span></div><div class="line">    parser.add_argument(<span class="string">"echo"</span>, help=<span class="string">"echo the string you use here"</span>)</div><div class="line">    parser.add_argument(<span class="string">"-d"</span>, <span class="string">"--double"</span>, help=<span class="string">"double the number you input here"</span>, type=float)</div><div class="line">    parser.add_argument(<span class="string">"-f"</span>, <span class="string">"--format"</span>, help=<span class="string">"format the output"</span>, action=<span class="string">'store_true'</span>)</div><div class="line">    parser.add_argument(<span class="string">"-t"</span>, <span class="string">"--type"</span>, help=<span class="string">"output format type"</span>, choices=[<span class="string">"clean"</span>, <span class="string">"math"</span>, <span class="string">"string"</span>], default=<span class="string">"math"</span>)</div><div class="line">    <span class="comment"># parse arguments</span></div><div class="line">    args = parser.parse_args()</div><div class="line">    print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The string is"</span>, args.echo))</div><div class="line">    <span class="keyword">if</span> args.double:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.format:</div><div class="line">            print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> args.type == <span class="string">"clean"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The rst is"</span>, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">elif</span> args.type == <span class="string">"string"</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125;"</span>.format(<span class="string">"The double of &#123;:&gt;8&#125; is &#123;:&gt;8&#125;"</span>, args.double, <span class="number">2</span> * args.double))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">" - &#123;:^15&#125;: &#123;&#125; * &#123;&#125; = &#123;&#125;"</span>.format(<span class="string">"The exp is"</span>, args.double, args.double, <span class="number">2</span> * args.double))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    test()</div></pre></td></tr></table></figure></p>
<p>例子中涉及了4种参数的使用方法:</p>
<pre><code>1. echo: 位置参数，必须
2. -d: 加&apos;-&apos;表示可选参数，type限定输入类型
3. -f: 标记参数，action=store_true, 输入代表True,不输入代表False，后面不跟其他值
4. -t: 限定参数的选择范围：[&quot;clean&quot;, &quot;math&quot;, &quot;string&quot;]只能是三者之一； 缺省默认值default=&quot;math&quot;。  
</code></pre><p>实例：<br><img src="/images/python/argparse_rst1.PNG" alt="input"><br><img src="/images/python/argparse_rst2.PNG" alt="output"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> python </tag>
            
            <tag> arg </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xpath那些事儿]]></title>
      <url>/2017/05/03/xpath%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<p>今天让我们来聊聊Xpath！Xpath在web爬虫中使用的非常频繁，它能够帮助我们方便地定位到网页中的某个（些）具体元素。<br>本文的主要目的是记录一些xpath的常用知识，捋一捋学习的的思路。   </p>
<p><strong>提纲:</strong><br><a href="#intro">1.何为Xpath?</a><br><a href="#examples">2.通过例子学习：</a><br><a href="#selenium">3.selenium中使用find_element_by_xpath()定位元素：</a></p>
<p></p><h3 id="intro">1. 何为Xpath?</h3><br>Xpath，从它的姓，我们可以知道它和XML有些关系。XML指可扩展标记语言（EXtensible Markup Language）<br>直观地感受一下XML语言表示出的文档的样子：<br><img src="/images/spider/XML_eg.PNG" alt="XML例子"><br><em><p align="left">图1-XML 示例</p> </em>   <p></p>
<p>可以发现：XML文档层级清晰，父节点包着子节点。当我们要定位到其中的某一个节点时，可以从某个祖先节点开始，沿途经过某些节点到达目标节点，这就构成了一条路径，许许多多这样的路径生发出来，看起来就像一棵倒置的大树，根节点在上，叶子节点在下。</p>
<p>Xpath就是这类路径的表示方法(路径表达式)。Xpath不仅适用于XML文档，html文档它也搞得定！   </p>
<p></p><h3 id="examples">2. 通过例子学习： </h3>  <p></p>
<ul>
<li>Xpath的教程和参考手册：<a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">W3C school–XPATH</a>里面包含了详细的语法知识和例子。   </li>
<li>推荐Chrome的Xpath Helper扩展，会随当前网页自动加载，输入xpath会自动显示出定位的元素。</li>
<li>如果想知道某个元素的xpath,可以使用chrome debugger的copy xpath功能，那里的xpath表达式简洁易懂。   </li>
</ul>
<p>下面展示了一些有用的例子，以后可能会用到。</p>
<ol>
<li><p>选取 class = ‘u ‘的 div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 table 元素的某个部分, 索引下标从1开始:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/table/tbody/tr/td[2]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 id = ‘login ‘的 div：id是唯一的；//表示可以不从根节点开始搜索，只要满足表达式即可；/表示从根结点开始搜索</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//div[@id=&apos;login&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 id = ‘login ‘的 元素,由于id是唯一的，所以也可以不指明div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">//*[@id=&apos;login&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>当满足条件的元素有多个时，只选择最后一个:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos;]/div/span[last()]</div></pre></td></tr></table></figure>
</li>
<li><p>复合谓词 and：选取具有某个子元素的父节点div:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and ./div/span[@class=&apos;uu&apos;]]</div></pre></td></tr></table></figure>
</li>
<li><p>函数 not：排除具有某个子元素的父节点div, 轴：following-sibling，可以定义相对于当前结点的节点集合；./：以当前结点为根搜索</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div[@class=&apos;ut&apos; and not(./div/span[@class=&apos;uu&apos;]) and following-sibling::div[@class=&apos;mm&apos;]]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 文本内容包含”hello”的 span:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[contains(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure>
</li>
<li><p>选取 文本内容以”hello”开头的 span:   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/html/body/div/span[starts-with(text(),&apos;hello&apos;)]</div></pre></td></tr></table></figure>
</li>
</ol>
<p></p><h3 id="selenium">3. selenium中使用find_element_by_xpath()定位元素：</h3>  <p></p>
<ol>
<li><p>基本用法：   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 获取div元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/html/body/div[@class='ut']"</span>)</div><div class="line"><span class="comment"># 获取div中的文本</span></div><div class="line">div_content = div_ele.text</div></pre></td></tr></table></figure>
</li>
<li><p>text()函数无法使用   </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 试图获取某text()元素</span></div><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/text()[2]"</span>)</div><div class="line"><span class="comment"># 注意！这样会报错，因为find_element_by_xpath()返回的必须是element类型，而不是str!</span></div></pre></td></tr></table></figure>
</li>
<li><p>只能选择class属性为一个的情况：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element_by_xpath(<span class="string">"/node/div[@class='u']"</span>)</div></pre></td></tr></table></figure>
<p> 选择具有多个class属性的元素，可以用css selector:</p>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">'ok good nice'</span>&gt;</span></div></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div_ele = driver.find_element(By.CSS_SELECTOR, <span class="string">'li.ok.good.nice'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> xpath </tag>
            
            <tag> spider </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c++单例模式singleton实现]]></title>
      <url>/2017/04/30/c++%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8Fsingleton%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h3 id="1-singleton-单例模式："><a href="#1-singleton-单例模式：" class="headerlink" title="1.singleton 单例模式："></a>1.singleton 单例模式：</h3><p>设计一个类，我们只能生成该类的一个实例。eg. <strong>地球</strong>就是一个singleton，据我们所知，宇宙中目前只有一个<strong>地球</strong>。</p>
<h3 id="2-实现思路："><a href="#2-实现思路：" class="headerlink" title="2.实现思路："></a>2.实现思路：</h3><p>设一个static private变量：instance。每次要生成该类实例时都检查一下这个instance是否为nullptr：是的话就新建一个实例赋给该instance，否的话就直接返回这个实例。</p>
<p><em>为什么instance需要是static的呢？</em></p>
<p>因为instance应该是一个类变量，它需要被整个class共享，static关键字在上一篇<em>笔记</em>中讲过：它可以限制变量的作用域，static变量在类中就会变成类变量，整个类的实例都能访问。如果是实例变量的话，那么每个实例都将拥有分别拥有各自的instance，就无从判断该类是不是已经有一个实例了。<br>eg. 宇宙在创造地球的时候，为了让人类珍惜赖以生存的家园，它决定整个宇宙中只能有一个地球，但是它要创造的星球很多，常常忘记已经创造了哪个，还没创造哪个。所以为了保证只有一个地球，它把<strong>地球</strong>类设计成了单例模式，并且给了这个类一张白纸。有一天它决定要创造地球了，于是就先让地球出示了那张纸，它发现：那张纸是空白的，这说明地球还没有被创造过，所以它就选好了一个位置（内存），并把这个位置记在了白纸上，然后它在这个位置上创造了地球。一个月后，忙碌的宇宙又想起了创造地球这件事，但是它不确定自己是否已经创造过地球了，于是它找到<em>地球</em>类，让它出示那张纸，发现那张纸上已经有一个地址了！地球类对宇宙说：“我已经有一个实例了，它就在这个纸上写的位置上，不信你去瞧瞧！”宇宙按照地址找到了地球，发现它就在那里，于是宇宙就决定进行下一步：改善地球环境。这当然都是后话了。   </p>
<p><em>为什么instance需要是private的呢？</em></p>
<p>因为如果instance是public的，那么任意一个该类的实例都可以修改它的值，比如：创建完一个实例之后，编程人员不小心把instance又置为了nullptr,那么下次就还能够创建新的实例，这是不符合单例模式宗旨的。</p>
<h3 id="3-实现代码："><a href="#3-实现代码：" class="headerlink" title="3.实现代码："></a>3.实现代码：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">static</span> Singleton* instance;</div><div class="line">    <span class="keyword">int</span> no=<span class="number">0</span>;</div><div class="line">    Singleton()&#123;no++; <span class="built_in">cout</span>&lt;&lt;<span class="string">"Construct!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">    ~Singleton()&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"Delete!"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">static</span> Singleton* <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(instance == <span class="literal">nullptr</span>)&#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;no&lt;&lt;<span class="built_in">endl</span>;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 初始化instance</span></div><div class="line">Singleton* Singleton::instance = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Singleton* single1 = Singleton::getInstance();</div><div class="line">    Singleton* single2 = Singleton::getInstance();</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single1 addr:"</span>&lt;&lt;single1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"single2 addr:"</span>&lt;&lt;single2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span>(single1 == single2)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"same"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    single1-&gt;Print();</div><div class="line">    single2-&gt;Print();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果图：<br><img src="/images/cpp/singleton_rst.PNG" alt="运行结果图"><br>我说说我有疑问的的几点：   </p>
<ol>
<li>instance变量为什么是Singleton*类型，不能是Singleton或者Singleton&amp;类型？<br>答：如果是Singleton类型：那就是递归结构了，自身包含自身，没法做到只有一个实例；<br> 如果是Singleton&amp;引用类型，对于引用类型的成员, 只能通过初始化表达式进行初始化。Singleton(Singleton &amp;s):instance(s) { },这还是递归结构嘛，先有鸡还是先有蛋的问题。</li>
<li>instance变量如何初始化呢？<br>答：在类的外面，初始化为nullptr。不能在里面初始化，否则zongshinullptr，总能创建新的实例。</li>
<li>构造函数和析构函数为什么是private的？<br> 答：构造函数是private：构造函数就是生成实例的，如果public则其他实例可以被任意生成；<br>析构函数在实例被销毁时自动调用，析构函数只能有一个, 不能被重载。析构函数可以被显式的调用, 以释放对象中动态申请的内存。如果析构函数是public,则实例将能够被随意销毁，instance变量如果没有了，下次就不能够再生成了。</li>
<li>为什么~Singleton()析构函数没有被调用，而构造函数被调用了？<br> 答：因为new Singleton()所以构造函数被调用了，以instance地址为起点，开辟了一块空间，给instance变量进行了初始化；<br>因为该实例存在于静态存储区，static的变量要程序关闭才会释放。</li>
<li>如何验证这个类真的只有一个实例？<br>答：在本例中，==用来判断两个指针是否相同，即判断两个实例是否在同一个地址。</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何安装Mongodb？]]></title>
      <url>/2017/04/30/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85Mongodb%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>本文记录了在我的PC上安装Mongodb的过程，以备忘。<br>参考：<a href="http://www.runoob.com/mongodb/mongodb-window-install.html" target="_blank" rel="noopener">菜鸟教程-Mongodb</a></p>
<h3 id="1-下载：Mongodb-community-选择适合自己操作系统的版本。"><a href="#1-下载：Mongodb-community-选择适合自己操作系统的版本。" class="headerlink" title="1. 下载：Mongodb community 选择适合自己操作系统的版本。"></a>1. 下载：<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="noopener">Mongodb community</a> 选择适合自己操作系统的版本。</h3><h3 id="2-安装Mongodb："><a href="#2-安装Mongodb：" class="headerlink" title="2. 安装Mongodb："></a>2. 安装Mongodb：</h3><ol>
<li>安装Mongodb的安装文件，可以选择complete默认安装，也可选择custom自己指定安装的路径和功能。  </li>
<li><p>创建数据目录：我要把数据库的数据目录放在D:盘</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; d:</div><div class="line">&gt; <span class="built_in">cd</span> \your-path-to\Mongodb</div><div class="line">&gt; mkdir db <span class="comment"># 新建一个db文件夹</span></div><div class="line">&gt; mkdir <span class="built_in">log</span> <span class="comment"># 新建一个log文件夹</span></div></pre></td></tr></table></figure>
</li>
<li><p>添加环境变量：在Path环境变量中添加Mongodb安装好的bin路径，就能从命令行直接启动Mongodb而无需切换到安装目录下了。</p>
</li>
<li>设置安全认证登陆：<br>Mongodb默认没有密码，但是为了保证数据的安全性，我们给数据库开启安全性认证。大致流程是这样的：   <ul>
<li>以无认证方式启动mongodb server</li>
<li>client连接上去，创建一个usr-admin(管理用户的用户)</li>
<li>以认证方式启动mongodb server</li>
<li>client以usr-admin身份登陆，再创建一个普通用户amy(只对test数据库有操作权限)</li>
<li>使用amy登陆，向test数据库中插入数据。   </li>
</ul>
</li>
<li><p>创建用户：<br> 以管理员权限打开cmd。</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; mongod --dbpath <span class="string">"\your-path-to\Mongodb\db"</span> --logpath    </div><div class="line"><span class="string">"\your-path-to\Mongodb\log\Mongodb.log"</span>   </div><div class="line"><span class="comment"># 以不认证方式启动Mongodb服务，log写在log文件夹下的Mogodb.log文件里，这样控制台窗    </span></div><div class="line"><span class="comment"># 口就不会输出一大堆信息，整个世界都清静了。</span></div></pre></td></tr></table></figure>
<p> <em>创建用户:</em><br> 设置了认证，需要有用户才可以登陆。我们这一步创建两个用户：usr-admin和amy。<br> usr-admin是管理员，amy是普通用户。<br><strong>5.1 创建usr-admin用户：</strong><br> 打开一个新的cmd窗口：       </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动一个client，会连接上刚才启动的server服务。  </span></div><div class="line">&gt; mongo</div></pre></td></tr></table></figure>
<p> <img src="/images/Mongodb/1-connected.PNG" alt="连接成功！" title="client链接server"><br> Mongodb 3.0以后把addUser()函数改成了<a href="https://docs.mongodb.com/manual/reference/method/db.createUser/#create-administrative-user-with-roles" target="_blank" rel="noopener">createUser()</a>   </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; use admin</div><div class="line">&gt; db.createUser(&#123;</div><div class="line">	user:<span class="string">"usr-admin"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [&#123;</div><div class="line">		role:<span class="string">"userAdminAnyDatabase"</span>,</div><div class="line">		db: <span class="string">"admin"</span></div><div class="line">	&#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p> role（角色）就是权限的集合。在这里，我们赋予了usr-admin用户对于admin数据库 “userAdminAnyDatabase”的权限。<br><strong>5.2 创建普通用户：</strong> </p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 以认证方式启动mongdb server:</span></div><div class="line">&gt; mongod --dbpath <span class="string">"D:\0-softwares\coding\Mongodb\db"</span> --logpath <span class="string">"D:\0-softwares\coding\Mongodb\log\Mongodb.log"</span> --auth</div><div class="line"><span class="comment"># 新开一个cmd启动client</span></div><div class="line">&gt; use admin <span class="comment"># 切换到admin数据库下</span></div><div class="line">&gt; db.auth(<span class="string">'usr-admin'</span>,<span class="string">'password'</span>) <span class="comment"># 以usr-admin身份登陆</span></div><div class="line"><span class="comment"># 从test数据库创建用户amy</span></div><div class="line">&gt; use <span class="built_in">test</span></div><div class="line">&gt; db.createUser(&#123; </div><div class="line">	user:<span class="string">"amy"</span>,</div><div class="line">	<span class="built_in">pwd</span>:<span class="string">"password"</span>,</div><div class="line">	roles: [</div><div class="line">		&#123;role:<span class="string">"readWrite"</span>,db: <span class="string">"test"</span>&#125;,</div><div class="line">		&#123;role:<span class="string">"dbOwner"</span>,db:<span class="string">"test"</span>&#125;</div><div class="line">	]</div><div class="line">&#125;)</div><div class="line">&gt; show users</div><div class="line">&gt; db.auth(<span class="string">'amy'</span>,<span class="string">'password'</span>)</div><div class="line">&gt; db.test.insert(&#123;<span class="string">'hello'</span>:<span class="string">'amy'</span>&#125;)</div><div class="line">&gt; db.tets.find()</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. 总结：</h3><ul>
<li>建议使用认证登陆，这样能够保证数据库的安全；</li>
<li>用户登陆应当从创建该用户的数据库开始：use the-database；</li>
<li>usr-admin用户可以创建其他用户；</li>
<li>可以删除用户：db.dropUser(‘usrname’)</li>
<li>删除数据库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; use dbname   </div><div class="line">&gt; db.dropDatabase()</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codeblocks 16.01 中使用C++的nullptr]]></title>
      <url>/2017/04/25/codeblocks%E4%B8%ADnullptr%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="1-nullptr头文件"><a href="#1-nullptr头文件" class="headerlink" title="1.  nullptr头文件:"></a>1.  nullptr头文件:</h2><p>std::nullptr_t定义在标准头文件<span style="color:lightblue"><cstddef></cstddef></span>中。但实际上在源程序中不包含该头文件仍可以正常使用nullptr_t类型与nullptr对象。 </p>
<h2 id="2-nullptr的简介："><a href="#2-nullptr的简介：" class="headerlink" title="2.  nullptr的简介："></a>2.  nullptr的简介：</h2><h4 id="转自wikipedia"><a href="#转自wikipedia" class="headerlink" title="[转自wikipedia]"></a>[转自wikipedia]</h4><p>nullptr是c++11语言标准用来表示<span style="color:green">空指针</span>的常量值。<br>在C语言中，空指针的值表示为#define NULL (void <em>)0。<br>在C++语言中，由于对语法的类型检查更为严格，因而空指针的值就不能表示为(void </em>)0;。例如，空指针的值表示为FILE <em>fp=(void </em>)0;编译报错。所以至少自C++98开始#define NULL 0，但这会在函数重载时遇到新的困难。eg.   </p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">void</span> *p)</span></span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> i)</span></span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    foo(<span class="string">'x'</span>,<span class="literal">NULL</span>);<span class="comment">//匹配哪个版本的foo()？</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>C++11开始，定义了空指针的常值为nullptr，解决了上述函数重载问题。<br>在没有C++11的nullptr时，可以自己实现一个：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="class"><span class="keyword">class</span> <span class="title">nullptr_t</span>&#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span>*() <span class="title">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; </div><div class="line">    <span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">C</span>, <span class="title">class</span> <span class="title">T</span>&gt;</span></div><div class="line">    <span class="title">inline</span> <span class="title">operator</span> <span class="title">T</span> <span class="title">C</span>::*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;</div><div class="line">&#125; </div><div class="line"><span class="literal">nullptr</span> = &#123;&#125;;</div></pre></td></tr></table></figure>
<h2 id="3-设置codeblocks支持nullptr"><a href="#3-设置codeblocks支持nullptr" class="headerlink" title="3.  设置codeblocks支持nullptr:"></a>3.  设置codeblocks支持nullptr:</h2><p>如果程序中包含nullptr，且编译时报错<br><span style="color:red">error: ‘nullptr’ was not declared in this scope<br></span><br>那么，你的编译器可能使用的还是较早版本的c++语言标准。要让它支持nullptr,可以进行如下设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Settings</div><div class="line">  -Compiler</div><div class="line">    -Compiler Settings</div><div class="line">    -Compiler Flags</div><div class="line">        -General:</div><div class="line">          勾上：Have g++ follow the c++11 ISO c++ language standard</div><div class="line">          ok</div></pre></td></tr></table></figure></p>
<p>注意：我的codeblocks版本是：16.01</p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[static变量在c++中的使用]]></title>
      <url>/2017/04/24/static%E5%8F%98%E9%87%8F%E5%9C%A8c-%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>今天学习c++ singleton（单例模式）的实现时，发现static关键字扮演者至关重要的角色，趁此机会总结一下：<br><a href="#intro">1.static简介</a><br><a href="#func">2.static作用</a><br><a href="#diff">3.static局部变量和static全局变量的区别</a><br><a href="#example">4.示例</a> </p>
<h3 id="intro">1. static 简介</h3> 

<p><strong>变量其实只不过是程序可操作的存储区的名称。</strong> C++ 中每个变量都有指定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。<br>变量的存储区分类：   </p>
<ol>
<li>栈：临时变量。由编译器决定何时分配，不需要的时候自动清除的内存。</li>
<li>堆：由 new 分配的内存块。由编程人员指定何时分配，并要delete显式释放。堆可以动态地扩展和收缩。</li>
<li>常量存储区：里面存放的是常量，不允许修改。</li>
<li>静态存储区：全局变量，静态变量。</li>
</ol>
<h3 id="func">2. static 作用</h3>

<p><em>static</em>的作用主要有3点：</p>
<ol>
<li>隐藏：加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。</li>
<li>变量的持久化：静态数据区的变量会在程序刚开始运行时，就完成唯一一次初始化。</li>
<li>默认初始化为0：出生在静态存储区的变量（static,global）,会自动初始化为0x00。tips:将变量弄成全局的可以省去初始化为0的工序。</li>
</ol>
<h3 id="diff">3. static局部变量和static全局变量的区别</h3><br>主要区别在于“隐藏”这一点：<br>加了static变量作用域会限制在该变量所处的.c,.cpp文件中，其他.c,.cpp文件无法访问到它。<br>而未加static的全局变量可以在其他文件中访问到。<br><br><h3 id="example">4. static变量使用示例</h3>

<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">staticLocalVar</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> local_var = <span class="number">9</span>; <span class="comment">// 静态局部变量</span></div><div class="line">    local_var++;</div><div class="line">    <span class="keyword">return</span> local_var;</div><div class="line">&#125;</div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> global_var = <span class="number">0</span>;<span class="comment">// 静态全局变量</span></div><div class="line"><span class="keyword">int</span> iszero1; <span class="comment">// 静态存储区的变量会自动初始化为0</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> iszero2;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"global_var : local_var"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">for</span>(; global_var&lt;<span class="number">10</span>; global_var++)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;global_var&lt;&lt;<span class="string">" : "</span>&lt;&lt;staticLocalVar()&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> iszero3; <span class="comment">// 非静态存储区的变量会初始化为一个未知的值！！！</span></div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero1:"</span>&lt;&lt;iszero1&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero2:"</span>&lt;&lt;iszero2&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"iszero3:"</span>&lt;&lt;iszero3&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/images/cpp/static_rst.jpg" alt="运行结果图"></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> cpp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 学习笔记]]></title>
      <url>/2017/04/23/Hexo-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="1-说说你的故事"><a href="#1-说说你的故事" class="headerlink" title="1. 说说你的故事"></a>1. 说说你的故事</h2><h3 id="为你的hexo-blog添加”about”详情页"><a href="#为你的hexo-blog添加”about”详情页" class="headerlink" title="为你的hexo blog添加”about”详情页"></a>为你的hexo blog添加”about”详情页</h3><ul>
<li><p>新建一个 about 页面</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hexo new page <span class="string">"about"</span></div></pre></td></tr></table></figure>
</li>
<li><p>在blog的根目录下会自动生成一个about文件夹，把里面的about.md修改成你想写的信息。</p>
</li>
<li><p>简单修改配置文件: 在所用<strong>主题</strong>的_config.yml文件中，将nav中about前面的注释去掉。<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">nav:</div><div class="line">    home: .</div><div class="line">    archive: archives</div><div class="line">    about: about</div></pre></td></tr></table></figure>
</li>
<li><p>刷新一下，即刻呈现！<br><img src="/images/hexo/hexo-about.jpg" alt="blog&#39;s about page"></p>
</li>
</ul>
<h2 id="2-新建一篇文章"><a href="#2-新建一篇文章" class="headerlink" title="2. 新建一篇文章"></a>2. 新建一篇文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo new [layout] &lt;title&gt;</div><div class="line"><span class="comment"># layout: [post(default), page, draft]</span></div><div class="line"><span class="comment"># title: 文章标题</span></div></pre></td></tr></table></figure>
<h2 id="3-在本地启动hexo-server"><a href="#3-在本地启动hexo-server" class="headerlink" title="3. 在本地启动hexo server"></a>3. 在本地启动hexo server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> 到blog目录下</div><div class="line">&gt; hexo server</div><div class="line">即可通过 http://localhost:4000/ 访问你的博客。</div></pre></td></tr></table></figure>
<h2 id="4-把你本地的blog部署到github上"><a href="#4-把你本地的blog部署到github上" class="headerlink" title="4. 把你本地的blog部署到github上"></a>4. 把你本地的blog部署到github上</h2><ul>
<li>到github新建一个仓库，仓库名为：YourGithubUsername.github.io <strong>必须为这个名字</strong></li>
<li><p>配置root目录下的_config.yml文件:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repository: git@github.com:YourGithubUsername/YourGithubUsername.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>在cmd中执行命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hexo clean  </div><div class="line">&gt; hexo generate  <span class="comment"># hexo g</span></div><div class="line">&gt; hexo deploy  <span class="comment"># hexo d</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>就会自动生成.deploy_git文件夹,并推送到github上。<br>也可以手动推送至github:</p>
<ul>
<li><p>在git中cd 进入这个.deploy_git文件夹</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 初次操作</div><div class="line">$ git remote add origin [your repo link] //http or ssh</div><div class="line">$ git push -u origin master</div><div class="line">// 之后推送</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
</li>
<li><p>打开浏览器，访问：<a href="https://yourgithubusername.github.io/" target="_blank" rel="noopener">https://yourgithubusername.github.io/</a><br>就可以看到你的博客啦！</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/04/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
        <tags>
            
            <tag> tech </tag>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Secret(秘密)]]></title>
      <url>/2017/04/22/I-love-u/</url>
      <content type="html"><![CDATA[<p>I love you, it’s a fact.<br>2017/04/22</p>
]]></content>
      
        
        <tags>
            
            <tag> living </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
